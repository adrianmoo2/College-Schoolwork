
LED_EXP_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00000f4c  00000fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  008001a8  008001a8  00001088  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001689  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d2  00000000  00000000  00002821  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d06  00000000  00000000  000031f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00003efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000786  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d1a  00000000  00000000  00004812  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000552c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	60 c0       	rjmp	.+192    	; 0xc2 <__ctors_end>
   2:	00 00       	nop
   4:	7b c0       	rjmp	.+246    	; 0xfc <__bad_interrupt>
   6:	00 00       	nop
   8:	79 c0       	rjmp	.+242    	; 0xfc <__bad_interrupt>
   a:	00 00       	nop
   c:	77 c0       	rjmp	.+238    	; 0xfc <__bad_interrupt>
   e:	00 00       	nop
  10:	75 c0       	rjmp	.+234    	; 0xfc <__bad_interrupt>
  12:	00 00       	nop
  14:	73 c0       	rjmp	.+230    	; 0xfc <__bad_interrupt>
  16:	00 00       	nop
  18:	71 c0       	rjmp	.+226    	; 0xfc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6f c0       	rjmp	.+222    	; 0xfc <__bad_interrupt>
  1e:	00 00       	nop
  20:	6d c0       	rjmp	.+218    	; 0xfc <__bad_interrupt>
  22:	00 00       	nop
  24:	6b c0       	rjmp	.+214    	; 0xfc <__bad_interrupt>
  26:	00 00       	nop
  28:	69 c0       	rjmp	.+210    	; 0xfc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	67 c0       	rjmp	.+206    	; 0xfc <__bad_interrupt>
  2e:	00 00       	nop
  30:	65 c0       	rjmp	.+202    	; 0xfc <__bad_interrupt>
  32:	00 00       	nop
  34:	e0 c0       	rjmp	.+448    	; 0x1f6 <__vector_13>
  36:	00 00       	nop
  38:	61 c0       	rjmp	.+194    	; 0xfc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5f c0       	rjmp	.+190    	; 0xfc <__bad_interrupt>
  3e:	00 00       	nop
  40:	5d c0       	rjmp	.+186    	; 0xfc <__bad_interrupt>
  42:	00 00       	nop
  44:	5b c0       	rjmp	.+182    	; 0xfc <__bad_interrupt>
  46:	00 00       	nop
  48:	59 c0       	rjmp	.+178    	; 0xfc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	57 c0       	rjmp	.+174    	; 0xfc <__bad_interrupt>
  4e:	00 00       	nop
  50:	55 c0       	rjmp	.+170    	; 0xfc <__bad_interrupt>
  52:	00 00       	nop
  54:	53 c0       	rjmp	.+166    	; 0xfc <__bad_interrupt>
  56:	00 00       	nop
  58:	51 c0       	rjmp	.+162    	; 0xfc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4f c0       	rjmp	.+158    	; 0xfc <__bad_interrupt>
  5e:	00 00       	nop
  60:	4d c0       	rjmp	.+154    	; 0xfc <__bad_interrupt>
  62:	00 00       	nop
  64:	4b c0       	rjmp	.+150    	; 0xfc <__bad_interrupt>
  66:	00 00       	nop
  68:	49 c0       	rjmp	.+146    	; 0xfc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	47 c0       	rjmp	.+142    	; 0xfc <__bad_interrupt>
  6e:	00 00       	nop
  70:	45 c0       	rjmp	.+138    	; 0xfc <__bad_interrupt>
  72:	00 00       	nop
  74:	43 c0       	rjmp	.+134    	; 0xfc <__bad_interrupt>
  76:	00 00       	nop
  78:	41 c0       	rjmp	.+130    	; 0xfc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3f c0       	rjmp	.+126    	; 0xfc <__bad_interrupt>
  7e:	00 00       	nop
  80:	3d c0       	rjmp	.+122    	; 0xfc <__bad_interrupt>
  82:	00 00       	nop
  84:	3b c0       	rjmp	.+118    	; 0xfc <__bad_interrupt>
  86:	00 00       	nop
  88:	39 c0       	rjmp	.+114    	; 0xfc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	61 01       	movw	r12, r2
  8e:	65 01       	movw	r12, r10
  90:	69 01       	movw	r12, r18
  92:	6d 01       	movw	r12, r26
  94:	76 01       	movw	r14, r12
  96:	82 01       	movw	r16, r4
  98:	85 01       	movw	r16, r10
  9a:	8c 01       	movw	r16, r24
  9c:	0c 03       	fmul	r16, r20
  9e:	10 03       	mulsu	r17, r16
  a0:	14 03       	mulsu	r17, r20
  a2:	18 03       	fmul	r17, r16
  a4:	2e 03       	fmul	r18, r22
  a6:	44 03       	mulsu	r20, r20
  a8:	5a 03       	fmul	r21, r18
  aa:	63 03       	mulsu	r22, r19
  ac:	6f 03       	fmul	r22, r23
  ae:	72 03       	mulsu	r23, r18
  b0:	86 03       	fmuls	r16, r22
  b2:	d5 03       	fmuls	r21, r21
  b4:	e6 03       	fmuls	r22, r22
  b6:	3c 04       	cpc	r3, r12
  b8:	6f 04       	cpc	r6, r15
  ba:	a3 04       	cpc	r10, r3
  bc:	ea 04       	cpc	r14, r10
  be:	15 06       	cpc	r1, r21
  c0:	26 06       	cpc	r2, r22

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d0 e4       	ldi	r29, 0x40	; 64
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	ec e4       	ldi	r30, 0x4C	; 76
  d6:	ff e0       	ldi	r31, 0x0F	; 15
  d8:	00 e0       	ldi	r16, 0x00	; 0
  da:	0b bf       	out	0x3b, r16	; 59
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x14>
  de:	07 90       	elpm	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	a8 3a       	cpi	r26, 0xA8	; 168
  e4:	b1 07       	cpc	r27, r17
  e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0x10>

000000e8 <__do_clear_bss>:
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	a8 ea       	ldi	r26, 0xA8	; 168
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
  f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
  f2:	ab 3b       	cpi	r26, 0xBB	; 187
  f4:	b2 07       	cpc	r27, r18
  f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>
  f8:	3e d6       	rcall	.+3196   	; 0xd76 <main>
  fa:	26 c7       	rjmp	.+3660   	; 0xf48 <_exit>

000000fc <__bad_interrupt>:
  fc:	81 cf       	rjmp	.-254    	; 0x0 <__vectors>

000000fe <delay_ms>:
			base = base*16;
		}
	}
	
	return dec_val;
}
  fe:	18 16       	cp	r1, r24
 100:	19 06       	cpc	r1, r25
 102:	5c f0       	brlt	.+22     	; 0x11a <delay_ms+0x1c>
 104:	08 95       	ret
 106:	00 00       	nop
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	31 09       	sbc	r19, r1
 10c:	e1 f7       	brne	.-8      	; 0x106 <delay_ms+0x8>
 10e:	4f 5f       	subi	r20, 0xFF	; 255
 110:	5f 4f       	sbci	r21, 0xFF	; 255
 112:	84 17       	cp	r24, r20
 114:	95 07       	cpc	r25, r21
 116:	19 f4       	brne	.+6      	; 0x11e <delay_ms+0x20>
 118:	08 95       	ret
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	27 e0       	ldi	r18, 0x07	; 7
 120:	33 e0       	ldi	r19, 0x03	; 3
 122:	f1 cf       	rjmp	.-30     	; 0x106 <delay_ms+0x8>

00000124 <LCD_WriteCommand>:
 124:	5e 98       	cbi	0x0b, 6	; 11
 126:	88 b9       	out	0x08, r24	; 8
 128:	5f 9a       	sbi	0x0b, 7	; 11
 12a:	00 00       	nop
 12c:	5f 98       	cbi	0x0b, 7	; 11
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	e5 cf       	rjmp	.-54     	; 0xfe <delay_ms>
 134:	08 95       	ret

00000136 <LCD_ClearScreen>:
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	f5 cf       	rjmp	.-22     	; 0x124 <LCD_WriteCommand>
 13a:	08 95       	ret

0000013c <LCD_Cursor>:
 13c:	81 31       	cpi	r24, 0x11	; 17
 13e:	18 f4       	brcc	.+6      	; 0x146 <LCD_Cursor+0xa>
 140:	81 58       	subi	r24, 0x81	; 129
 142:	f0 cf       	rjmp	.-32     	; 0x124 <LCD_WriteCommand>
 144:	08 95       	ret
 146:	81 55       	subi	r24, 0x51	; 81
 148:	ed cf       	rjmp	.-38     	; 0x124 <LCD_WriteCommand>
 14a:	08 95       	ret

0000014c <LCD_init>:
 14c:	84 e6       	ldi	r24, 0x64	; 100
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	d6 df       	rcall	.-84     	; 0xfe <delay_ms>
 152:	88 e3       	ldi	r24, 0x38	; 56
 154:	e7 df       	rcall	.-50     	; 0x124 <LCD_WriteCommand>
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	e5 df       	rcall	.-54     	; 0x124 <LCD_WriteCommand>
 15a:	8f e0       	ldi	r24, 0x0F	; 15
 15c:	e3 df       	rcall	.-58     	; 0x124 <LCD_WriteCommand>
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	e1 df       	rcall	.-62     	; 0x124 <LCD_WriteCommand>
 162:	8a e0       	ldi	r24, 0x0A	; 10
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	cb cf       	rjmp	.-106    	; 0xfe <delay_ms>
 168:	08 95       	ret

0000016a <LCD_WriteData>:
 16a:	5e 9a       	sbi	0x0b, 6	; 11
 16c:	88 b9       	out	0x08, r24	; 8
 16e:	5f 9a       	sbi	0x0b, 7	; 11
 170:	00 00       	nop
 172:	5f 98       	cbi	0x0b, 7	; 11
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	c2 cf       	rjmp	.-124    	; 0xfe <delay_ms>
 17a:	08 95       	ret

0000017c <LCD_DisplayString>:
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	18 2f       	mov	r17, r24
 186:	eb 01       	movw	r28, r22
 188:	d6 df       	rcall	.-84     	; 0x136 <LCD_ClearScreen>
 18a:	88 81       	ld	r24, Y
 18c:	88 23       	and	r24, r24
 18e:	51 f0       	breq	.+20     	; 0x1a4 <LCD_DisplayString+0x28>
 190:	01 e0       	ldi	r16, 0x01	; 1
 192:	01 0f       	add	r16, r17
 194:	81 2f       	mov	r24, r17
 196:	d2 df       	rcall	.-92     	; 0x13c <LCD_Cursor>
 198:	89 91       	ld	r24, Y+
 19a:	e7 df       	rcall	.-50     	; 0x16a <LCD_WriteData>
 19c:	10 2f       	mov	r17, r16
 19e:	88 81       	ld	r24, Y
 1a0:	81 11       	cpse	r24, r1
 1a2:	f6 cf       	rjmp	.-20     	; 0x190 <LCD_DisplayString+0x14>
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <TimerOn>:
 1ae:	8b e0       	ldi	r24, 0x0B	; 11
 1b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1b4:	8d e7       	ldi	r24, 0x7D	; 125
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_M>
 1d2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_M+0x1>
 1d6:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_M+0x2>
 1da:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_M+0x3>
 1de:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
 1e2:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <__data_end+0x1>
 1e6:	a0 93 aa 01 	sts	0x01AA, r26	; 0x8001aa <__data_end+0x2>
 1ea:	b0 93 ab 01 	sts	0x01AB, r27	; 0x8001ab <__data_end+0x3>
 1ee:	8f b7       	in	r24, 0x3f	; 63
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	8f bf       	out	0x3f, r24	; 63
 1f4:	08 95       	ret

000001f6 <__vector_13>:
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
 20c:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <__data_end+0x1>
 210:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <__data_end+0x2>
 214:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <__data_end+0x3>
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	a1 09       	sbc	r26, r1
 21c:	b1 09       	sbc	r27, r1
 21e:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
 222:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <__data_end+0x1>
 226:	a0 93 aa 01 	sts	0x01AA, r26	; 0x8001aa <__data_end+0x2>
 22a:	b0 93 ab 01 	sts	0x01AB, r27	; 0x8001ab <__data_end+0x3>
 22e:	89 2b       	or	r24, r25
 230:	8a 2b       	or	r24, r26
 232:	8b 2b       	or	r24, r27
 234:	99 f4       	brne	.+38     	; 0x25c <__vector_13+0x66>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <TimerFlag>
 23c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_M>
 240:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_M+0x1>
 244:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_M+0x2>
 248:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_M+0x3>
 24c:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
 250:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <__data_end+0x1>
 254:	a0 93 aa 01 	sts	0x01AA, r26	; 0x8001aa <__data_end+0x2>
 258:	b0 93 ab 01 	sts	0x01AB, r27	; 0x8001ab <__data_end+0x3>
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <TimerSet>:
 26e:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <_avr_timer_M>
 272:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <_avr_timer_M+0x1>
 276:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_avr_timer_M+0x2>
 27a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_avr_timer_M+0x3>
 27e:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <__data_end>
 282:	70 93 a9 01 	sts	0x01A9, r23	; 0x8001a9 <__data_end+0x1>
 286:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end+0x2>
 28a:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__data_end+0x3>
 28e:	08 95       	ret

00000290 <SM1_Tick>:


void SM1_Tick() {
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
	
	unsigned D0 = ~PIND & 0x01;
 298:	89 b1       	in	r24, 0x09	; 9
 29a:	28 2f       	mov	r18, r24
 29c:	21 70       	andi	r18, 0x01	; 1
	unsigned D1 = ~PIND & 0x02;
 29e:	a9 b1       	in	r26, 0x09	; 9
	unsigned D2 = ~PIND & 0x04;
 2a0:	89 b1       	in	r24, 0x09	; 9
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	80 95       	com	r24
 2a6:	90 95       	com	r25
 2a8:	84 70       	andi	r24, 0x04	; 4
 2aa:	99 27       	eor	r25, r25
	static unsigned char column_val = 0x01; // sets the pattern displayed on columns
	static unsigned char column_sel = 0x7F; // grounds column to display pattern
	
	
	// === Transitions ===
	switch (sm1_state) {
 2ac:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <sm1_state>
 2b0:	43 2f       	mov	r20, r19
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	48 30       	cpi	r20, 0x08	; 8
 2b6:	51 05       	cpc	r21, r1
 2b8:	58 f5       	brcc	.+86     	; 0x310 <SM1_Tick+0x80>
 2ba:	fa 01       	movw	r30, r20
 2bc:	ea 5b       	subi	r30, 0xBA	; 186
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	88 c5       	rjmp	.+2832   	; 0xdd2 <__tablejump2__>
		case sm1_start:
			sm1_state = sm1_init;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <sm1_state>
 2c8:	3c c0       	rjmp	.+120    	; 0x342 <SM1_Tick+0xb2>
			break;
		case sm1_init:
			sm1_state = sm1_setup;
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <sm1_state>
 2d0:	54 c0       	rjmp	.+168    	; 0x37a <SM1_Tick+0xea>
			break;
		case sm1_setup:
			sm1_state = sm1_display;
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <sm1_state>
			break;
 2d8:	5d c0       	rjmp	.+186    	; 0x394 <SM1_Tick+0x104>
		case sm1_display:    
			sm1_state = D0 ? sm1_pressed : sm1_state;
 2da:	21 11       	cpse	r18, r1
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <SM1_Tick+0x50>
 2de:	34 e0       	ldi	r19, 0x04	; 4
			sm1_state = D2 ? sm1_reset : sm1_state;
 2e0:	89 2b       	or	r24, r25
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <SM1_Tick+0x56>
 2e4:	35 e0       	ldi	r19, 0x05	; 5
 2e6:	30 93 ba 01 	sts	0x01BA, r19	; 0x8001ba <sm1_state>
			break;
 2ea:	16 c0       	rjmp	.+44     	; 0x318 <SM1_Tick+0x88>
		case sm1_pressed:
			sm1_state = D2 ? sm1_reset : sm1_state;
 2ec:	89 2b       	or	r24, r25
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <SM1_Tick+0x62>
 2f0:	35 e0       	ldi	r19, 0x05	; 5
			sm1_state = D1 ? sm1_reset_level : sm1_state;
 2f2:	8a 2f       	mov	r24, r26
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	80 95       	com	r24
 2f8:	90 95       	com	r25
 2fa:	81 fd       	sbrc	r24, 1
 2fc:	36 e0       	ldi	r19, 0x06	; 6
 2fe:	30 93 ba 01 	sts	0x01BA, r19	; 0x8001ba <sm1_state>
			break;
 302:	0a c0       	rjmp	.+20     	; 0x318 <SM1_Tick+0x88>
		case sm1_reset:
			sm1_state = sm1_start;
 304:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <sm1_state>
			break;
 308:	46 c1       	rjmp	.+652    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
		case sm1_reset_level:
			sm1_state = sm1_start;
 30a:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <sm1_state>
			break;
 30e:	43 c1       	rjmp	.+646    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
		case sm1_death:
			//sm1_state = D2 ? sm1_reset : sm1_state;
			//sm1_state = D1 ? sm1_reset_level : sm1_state;
			break;
		default:               
			sm1_state = sm1_display;
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <sm1_state>
			break;
 316:	3e c0       	rjmp	.+124    	; 0x394 <SM1_Tick+0x104>
	}
	
	// === Actions ===
	switch (sm1_state) {
 318:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <sm1_state>
 31c:	83 30       	cpi	r24, 0x03	; 3
 31e:	09 f4       	brne	.+2      	; 0x322 <SM1_Tick+0x92>
 320:	39 c0       	rjmp	.+114    	; 0x394 <SM1_Tick+0x104>
 322:	30 f4       	brcc	.+12     	; 0x330 <SM1_Tick+0xa0>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	69 f0       	breq	.+26     	; 0x342 <SM1_Tick+0xb2>
 328:	82 30       	cpi	r24, 0x02	; 2
 32a:	09 f0       	breq	.+2      	; 0x32e <SM1_Tick+0x9e>
 32c:	34 c1       	rjmp	.+616    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 32e:	25 c0       	rjmp	.+74     	; 0x37a <SM1_Tick+0xea>
 330:	85 30       	cpi	r24, 0x05	; 5
 332:	09 f4       	brne	.+2      	; 0x336 <SM1_Tick+0xa6>
 334:	24 c1       	rjmp	.+584    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 336:	08 f4       	brcc	.+2      	; 0x33a <SM1_Tick+0xaa>
 338:	76 c0       	rjmp	.+236    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 33a:	86 30       	cpi	r24, 0x06	; 6
 33c:	09 f4       	brne	.+2      	; 0x340 <SM1_Tick+0xb0>
 33e:	26 c1       	rjmp	.+588    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 340:	2a c1       	rjmp	.+596    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
		case sm1_start:
			break;
		case sm1_init:
			TimerSet(2000);
 342:	60 ed       	ldi	r22, 0xD0	; 208
 344:	77 e0       	ldi	r23, 0x07	; 7
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
			TimerOn();
 34a:	91 df       	rcall	.-222    	; 0x26e <TimerSet>
 34c:	30 df       	rcall	.-416    	; 0x1ae <TimerOn>
			column_sel = 0xF7;
 34e:	87 ef       	ldi	r24, 0xF7	; 247
 350:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <column_sel.1926>
			column_val = 0x08;
 354:	88 e0       	ldi	r24, 0x08	; 8
 356:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <column_val.1925>
			ledTimeLate = 0;
 35a:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <ledTimeLate+0x1>
 35e:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ledTimeLate>
			ledTimeEarly = 2700;
 362:	8c e8       	ldi	r24, 0x8C	; 140
 364:	9a e0       	ldi	r25, 0x0A	; 10
 366:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <ledTimeEarly+0x1>
 36a:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <ledTimeEarly>
			lvl1_passedLED = 0;
			LCD_ClearScreen();
 36e:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <lvl1_passedLED>
			LCD_Cursor(1);
 372:	e1 de       	rcall	.-574    	; 0x136 <LCD_ClearScreen>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	e2 de       	rcall	.-572    	; 0x13c <LCD_Cursor>
			break;
		case sm1_setup:
			TimerSet(100);
 378:	0e c1       	rjmp	.+540    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 37a:	64 e6       	ldi	r22, 0x64	; 100
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
			TimerOn();
 382:	75 df       	rcall	.-278    	; 0x26e <TimerSet>
 384:	14 df       	rcall	.-472    	; 0x1ae <TimerOn>
			column_sel = 0x7F;
 386:	8f e7       	ldi	r24, 0x7F	; 127
 388:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <column_sel.1926>
			column_val = 0x01;
 38c:	81 e0       	ldi	r24, 0x01	; 1
			break;
		case sm1_display:   // If illuminated LED in bottom right corner
			LCD_ClearScreen();
 38e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <column_val.1925>
			LCD_DisplayString(1, "Timer: ");
 392:	01 c1       	rjmp	.+514    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 394:	d0 de       	rcall	.-608    	; 0x136 <LCD_ClearScreen>
 396:	60 e2       	ldi	r22, 0x20	; 32
			LCD_WriteData(1 + '0');
 398:	71 e0       	ldi	r23, 0x01	; 1
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	ef de       	rcall	.-546    	; 0x17c <LCD_DisplayString>
			LCD_WriteData(0 + '0');
 39e:	81 e3       	ldi	r24, 0x31	; 49
 3a0:	e4 de       	rcall	.-568    	; 0x16a <LCD_WriteData>
 3a2:	80 e3       	ldi	r24, 0x30	; 48
			LCD_WriteData(0 + '0');
 3a4:	e2 de       	rcall	.-572    	; 0x16a <LCD_WriteData>
 3a6:	80 e3       	ldi	r24, 0x30	; 48
 3a8:	e0 de       	rcall	.-576    	; 0x16a <LCD_WriteData>
			if (column_sel == 0xFE && column_val == 0x80) {
 3aa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <column_sel.1926>
 3ae:	8e 3f       	cpi	r24, 0xFE	; 254
 3b0:	91 f4       	brne	.+36     	; 0x3d6 <SM1_Tick+0x146>
 3b2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <column_val.1925>
 3b6:	80 38       	cpi	r24, 0x80	; 128
 3b8:	39 f4       	brne	.+14     	; 0x3c8 <SM1_Tick+0x138>
				column_sel = 0x7F; // display far left column
 3ba:	8f e7       	ldi	r24, 0x7F	; 127
 3bc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <column_sel.1926>
				column_val = 0x01; // pattern illuminates top row
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <column_val.1925>
 3c6:	0b c0       	rjmp	.+22     	; 0x3de <SM1_Tick+0x14e>
			}
			// else if far right column was last to display (grounded)
			else if (column_sel == 0xFE) {
				column_sel = 0x7F; // resets display column to far left column
 3c8:	9f e7       	ldi	r25, 0x7F	; 127
 3ca:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <column_sel.1926>
				column_val = column_val << 1; // shift down illuminated LED one row
 3ce:	88 0f       	add	r24, r24
 3d0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <column_val.1925>
 3d4:	04 c0       	rjmp	.+8      	; 0x3de <SM1_Tick+0x14e>
			}
			// else Shift displayed column one to the right
			else {
				column_sel = (column_sel >> 1) | 0x80;
 3d6:	86 95       	lsr	r24
 3d8:	80 68       	ori	r24, 0x80	; 128
 3da:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <column_sel.1926>
			}
			if (lvl1_passedLED)
 3de:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <lvl1_passedLED>
 3e2:	88 23       	and	r24, r24
 3e4:	59 f0       	breq	.+22     	; 0x3fc <SM1_Tick+0x16c>
			{
				ledTimeLate += 100;
 3e6:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <ledTimeLate>
 3ea:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <ledTimeLate+0x1>
 3ee:	8c 59       	subi	r24, 0x9C	; 156
 3f0:	9f 4f       	sbci	r25, 0xFF	; 255
 3f2:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <ledTimeLate+0x1>
 3f6:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <ledTimeLate>
 3fa:	cd c0       	rjmp	.+410    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
			}
			else if (PORTA == 0x08 && PORTB == 0xF7)
 3fc:	82 b1       	in	r24, 0x02	; 2
 3fe:	88 30       	cpi	r24, 0x08	; 8
 400:	39 f4       	brne	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 402:	85 b1       	in	r24, 0x05	; 5
 404:	87 3f       	cpi	r24, 0xF7	; 247
 406:	21 f4       	brne	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			{
				lvl1_passedLED = 0x01;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <lvl1_passedLED>
 40e:	c3 c0       	rjmp	.+390    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
			}
			else
			{
				ledTimeEarly -= 100;
 410:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <ledTimeEarly>
 414:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <ledTimeEarly+0x1>
 418:	84 56       	subi	r24, 0x64	; 100
 41a:	91 09       	sbc	r25, r1
 41c:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <ledTimeEarly+0x1>
 420:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <ledTimeEarly>
			}
			break;
		case sm1_pressed:
			if (PORTA == 0x08 && PORTB == 0xF7 || D0)
 424:	b8 c0       	rjmp	.+368    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 426:	82 b1       	in	r24, 0x02	; 2
 428:	88 30       	cpi	r24, 0x08	; 8
 42a:	19 f4       	brne	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42c:	85 b1       	in	r24, 0x05	; 5
 42e:	87 3f       	cpi	r24, 0xF7	; 247
 430:	11 f0       	breq	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	21 11       	cpse	r18, r1
			{
				LCD_DisplayString(1, "Congratulations!");
 434:	05 c0       	rjmp	.+10     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 436:	68 e2       	ldi	r22, 0x28	; 40
 438:	71 e0       	ldi	r23, 0x01	; 1
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	9f de       	rcall	.-706    	; 0x17c <LCD_DisplayString>
 43e:	ab c0       	rjmp	.+342    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
			{
				//LCD_ClearScreen();
				//LCD_Cursor(1);
				
				//LCD_DisplayString(1, "STINKY");
				if (ledTimeLate > 0)
 440:	c0 91 b3 01 	lds	r28, 0x01B3	; 0x8001b3 <ledTimeLate>
 444:	d0 91 b4 01 	lds	r29, 0x01B4	; 0x8001b4 <ledTimeLate+0x1>
 448:	20 97       	sbiw	r28, 0x00	; 0
 44a:	09 f4       	brne	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				{
					unsigned int tempLEDTime = ledTimeLate;
					unsigned int tempLEDTimeLate = ledTimeLate;
					if (ledTimeLate >= 1000)
 44c:	4a c0       	rjmp	.+148    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 44e:	c8 3e       	cpi	r28, 0xE8	; 232
 450:	83 e0       	ldi	r24, 0x03	; 3
					{
						LCD_DisplayString(1, "You were late by 1000 ms or more!");
 452:	d8 07       	cpc	r29, r24
 454:	28 f0       	brcs	.+10     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 456:	69 e3       	ldi	r22, 0x39	; 57
 458:	71 e0       	ldi	r23, 0x01	; 1
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	8f de       	rcall	.-738    	; 0x17c <LCD_DisplayString>
					}
					else
					{
						if (ledTimeLate >= 100)
 45e:	9b c0       	rjmp	.+310    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 460:	c4 36       	cpi	r28, 0x64	; 100
 462:	d1 05       	cpc	r29, r1
						{		
							LCD_DisplayString(1, "You were late by ");
 464:	08 f4       	brcc	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 466:	97 c0       	rjmp	.+302    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 468:	6b e5       	ldi	r22, 0x5B	; 91
 46a:	71 e0       	ldi	r23, 0x01	; 1
							
							tempLEDTime = (int)(tempLEDTimeLate/100);
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	86 de       	rcall	.-756    	; 0x17c <LCD_DisplayString>
 470:	9e 01       	movw	r18, r28
 472:	36 95       	lsr	r19
 474:	27 95       	ror	r18
 476:	36 95       	lsr	r19
 478:	27 95       	ror	r18
 47a:	ab e7       	ldi	r26, 0x7B	; 123
 47c:	b4 e1       	ldi	r27, 0x14	; 20
 47e:	b2 d4       	rcall	.+2404   	; 0xde4 <__umulhisi3>
 480:	ec 01       	movw	r28, r24
 482:	d6 95       	lsr	r29
							LCD_WriteData(tempLEDTime+'0');
 484:	c7 95       	ror	r28
 486:	8c 2f       	mov	r24, r28
 488:	80 5d       	subi	r24, 0xD0	; 208
							tempLEDTimeLate = ledTimeLate - (tempLEDTime*100);
 48a:	6f de       	rcall	.-802    	; 0x16a <LCD_WriteData>
 48c:	24 e6       	ldi	r18, 0x64	; 100
 48e:	2c 9f       	mul	r18, r28
 490:	c0 01       	movw	r24, r0
 492:	2d 9f       	mul	r18, r29
 494:	90 0d       	add	r25, r0
 496:	11 24       	eor	r1, r1
 498:	00 91 b3 01 	lds	r16, 0x01B3	; 0x8001b3 <ledTimeLate>
 49c:	10 91 b4 01 	lds	r17, 0x01B4	; 0x8001b4 <ledTimeLate+0x1>
							
							tempLEDTime = (int)(tempLEDTimeLate/10);
 4a0:	08 1b       	sub	r16, r24
 4a2:	19 0b       	sbc	r17, r25
 4a4:	98 01       	movw	r18, r16
 4a6:	ad ec       	ldi	r26, 0xCD	; 205
 4a8:	bc ec       	ldi	r27, 0xCC	; 204
 4aa:	9c d4       	rcall	.+2360   	; 0xde4 <__umulhisi3>
 4ac:	ec 01       	movw	r28, r24
 4ae:	d6 95       	lsr	r29
 4b0:	c7 95       	ror	r28
 4b2:	d6 95       	lsr	r29
 4b4:	c7 95       	ror	r28
 4b6:	d6 95       	lsr	r29
							LCD_WriteData(tempLEDTime+'0');
 4b8:	c7 95       	ror	r28
 4ba:	8c 2f       	mov	r24, r28
 4bc:	80 5d       	subi	r24, 0xD0	; 208
							tempLEDTimeLate = tempLEDTimeLate - (tempLEDTime*10);
							
							LCD_WriteData(tempLEDTimeLate+'0');
 4be:	55 de       	rcall	.-854    	; 0x16a <LCD_WriteData>
 4c0:	ce 01       	movw	r24, r28
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	cc 0f       	add	r28, r28
 4c8:	dd 1f       	adc	r29, r29
 4ca:	cc 0f       	add	r28, r28
 4cc:	dd 1f       	adc	r29, r29
 4ce:	cc 0f       	add	r28, r28
 4d0:	dd 1f       	adc	r29, r29
 4d2:	c8 0f       	add	r28, r24
 4d4:	d9 1f       	adc	r29, r25
 4d6:	c8 01       	movw	r24, r16
 4d8:	8c 1b       	sub	r24, r28
 4da:	9d 0b       	sbc	r25, r29
 4dc:	80 5d       	subi	r24, 0xD0	; 208
 4de:	45 de       	rcall	.-886    	; 0x16a <LCD_WriteData>
					}
				}
				else 
				{
					unsigned int tempLEDTime = ledTimeEarly;
					unsigned int tempLEDTimeEarly = ledTimeEarly;
 4e0:	5a c0       	rjmp	.+180    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 4e2:	c0 91 b5 01 	lds	r28, 0x01B5	; 0x8001b5 <ledTimeEarly>
					
					if (ledTimeEarly >= 1000)
 4e6:	d0 91 b6 01 	lds	r29, 0x01B6	; 0x8001b6 <ledTimeEarly+0x1>
 4ea:	c8 3e       	cpi	r28, 0xE8	; 232
 4ec:	83 e0       	ldi	r24, 0x03	; 3
					{
						LCD_DisplayString(1, "You were early 1000 ms or more!");
 4ee:	d8 07       	cpc	r29, r24
 4f0:	28 f0       	brcs	.+10     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4f2:	6d e6       	ldi	r22, 0x6D	; 109
 4f4:	71 e0       	ldi	r23, 0x01	; 1
 4f6:	81 e0       	ldi	r24, 0x01	; 1
					}
					else if (ledTimeEarly >= 100)
 4f8:	41 de       	rcall	.-894    	; 0x17c <LCD_DisplayString>
 4fa:	4d c0       	rjmp	.+154    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 4fc:	c4 36       	cpi	r28, 0x64	; 100
					{
						LCD_DisplayString(1, "You were early by ");
 4fe:	d1 05       	cpc	r29, r1
 500:	08 f4       	brcc	.+2      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 502:	49 c0       	rjmp	.+146    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 504:	6d e8       	ldi	r22, 0x8D	; 141
 506:	71 e0       	ldi	r23, 0x01	; 1
						
						tempLEDTime = (int)(tempLEDTimeEarly/100);
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	38 de       	rcall	.-912    	; 0x17c <LCD_DisplayString>
 50c:	9e 01       	movw	r18, r28
 50e:	36 95       	lsr	r19
 510:	27 95       	ror	r18
 512:	36 95       	lsr	r19
 514:	27 95       	ror	r18
 516:	ab e7       	ldi	r26, 0x7B	; 123
 518:	b4 e1       	ldi	r27, 0x14	; 20
 51a:	64 d4       	rcall	.+2248   	; 0xde4 <__umulhisi3>
 51c:	ec 01       	movw	r28, r24
						LCD_WriteData(tempLEDTime+'0');
 51e:	d6 95       	lsr	r29
 520:	c7 95       	ror	r28
 522:	8c 2f       	mov	r24, r28
 524:	80 5d       	subi	r24, 0xD0	; 208
						tempLEDTimeEarly = ledTimeEarly - (tempLEDTime*100);
 526:	21 de       	rcall	.-958    	; 0x16a <LCD_WriteData>
 528:	24 e6       	ldi	r18, 0x64	; 100
 52a:	2c 9f       	mul	r18, r28
 52c:	c0 01       	movw	r24, r0
 52e:	2d 9f       	mul	r18, r29
 530:	90 0d       	add	r25, r0
 532:	11 24       	eor	r1, r1
 534:	00 91 b5 01 	lds	r16, 0x01B5	; 0x8001b5 <ledTimeEarly>
 538:	10 91 b6 01 	lds	r17, 0x01B6	; 0x8001b6 <ledTimeEarly+0x1>
										
						tempLEDTime = (int)(tempLEDTimeEarly/10);
 53c:	08 1b       	sub	r16, r24
 53e:	19 0b       	sbc	r17, r25
 540:	98 01       	movw	r18, r16
 542:	ad ec       	ldi	r26, 0xCD	; 205
 544:	bc ec       	ldi	r27, 0xCC	; 204
 546:	4e d4       	rcall	.+2204   	; 0xde4 <__umulhisi3>
 548:	ec 01       	movw	r28, r24
 54a:	d6 95       	lsr	r29
 54c:	c7 95       	ror	r28
 54e:	d6 95       	lsr	r29
 550:	c7 95       	ror	r28
						LCD_WriteData(tempLEDTime+'0');
 552:	d6 95       	lsr	r29
 554:	c7 95       	ror	r28
 556:	8c 2f       	mov	r24, r28
 558:	80 5d       	subi	r24, 0xD0	; 208
						tempLEDTimeEarly = tempLEDTimeEarly - (tempLEDTime*10);
						
						LCD_WriteData(tempLEDTimeEarly+'0');
 55a:	07 de       	rcall	.-1010   	; 0x16a <LCD_WriteData>
 55c:	ce 01       	movw	r24, r28
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	cc 0f       	add	r28, r28
 564:	dd 1f       	adc	r29, r29
 566:	cc 0f       	add	r28, r28
 568:	dd 1f       	adc	r29, r29
 56a:	cc 0f       	add	r28, r28
 56c:	dd 1f       	adc	r29, r29
 56e:	c8 0f       	add	r28, r24
 570:	d9 1f       	adc	r29, r25
 572:	c8 01       	movw	r24, r16
 574:	8c 1b       	sub	r24, r28
 576:	9d 0b       	sbc	r25, r29
 578:	80 5d       	subi	r24, 0xD0	; 208
 57a:	f7 dd       	rcall	.-1042   	; 0x16a <LCD_WriteData>
 57c:	0c c0       	rjmp	.+24     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
					}*/
				}
			}
			break;
		case sm1_reset:
			column_sel = 0x7F;
 57e:	8f e7       	ldi	r24, 0x7F	; 127
 580:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <column_sel.1926>
			column_val = 0x01;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <column_val.1925>
			break;
 58a:	05 c0       	rjmp	.+10     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
		case sm1_reset_level:
			lvl_state = lvl_init;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <lvl_state>
			levelTemp = 0x00;
 592:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <levelTemp>
			break;
		default:
			break;
	}
	
	PORTA = column_val; // PORTA displays column pattern
 596:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <column_val.1925>
 59a:	82 b9       	out	0x02, r24	; 2
	PORTB = column_sel; // PORTB selects column to display pattern
 59c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <column_sel.1926>
 5a0:	85 b9       	out	0x05, r24	; 5

};
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	0f 91       	pop	r16
 5aa:	08 95       	ret

000005ac <lvl2_Tick>:

void lvl2_Tick() {
 5ac:	ef 92       	push	r14
 5ae:	ff 92       	push	r15
 5b0:	0f 93       	push	r16
 5b2:	1f 93       	push	r17
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
 5bc:	60 97       	sbiw	r28, 0x10	; 16
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	f8 94       	cli
 5c2:	de bf       	out	0x3e, r29	; 62
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	cd bf       	out	0x3d, r28	; 61
	
	unsigned D0 = ~PIND & 0x01;
 5c8:	89 b1       	in	r24, 0x09	; 9
 5ca:	38 2f       	mov	r19, r24
 5cc:	31 70       	andi	r19, 0x01	; 1
	unsigned D1 = ~PIND & 0x02;
 5ce:	19 b1       	in	r17, 0x09	; 9
	unsigned D2 = ~PIND & 0x04;
 5d0:	89 b1       	in	r24, 0x09	; 9
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	80 95       	com	r24
 5d6:	90 95       	com	r25
 5d8:	84 70       	andi	r24, 0x04	; 4
 5da:	99 27       	eor	r25, r25
	
	// === Local Variables ===
	//int column_sel_index = 7;
	//int column_val_index = 7;
	
	unsigned char column_sel_array[8] = {0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0xFE};
 5dc:	28 e0       	ldi	r18, 0x08	; 8
 5de:	e0 e1       	ldi	r30, 0x10	; 16
 5e0:	f1 e0       	ldi	r31, 0x01	; 1
 5e2:	de 01       	movw	r26, r28
 5e4:	11 96       	adiw	r26, 0x01	; 1
 5e6:	01 90       	ld	r0, Z+
 5e8:	0d 92       	st	X+, r0
 5ea:	2a 95       	dec	r18
 5ec:	e1 f7       	brne	.-8      	; 0x5e6 <lvl2_Tick+0x3a>
	unsigned char column_val_array[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
 5ee:	28 e0       	ldi	r18, 0x08	; 8
 5f0:	e8 e1       	ldi	r30, 0x18	; 24
 5f2:	f1 e0       	ldi	r31, 0x01	; 1
 5f4:	de 01       	movw	r26, r28
 5f6:	19 96       	adiw	r26, 0x09	; 9
 5f8:	01 90       	ld	r0, Z+
 5fa:	0d 92       	st	X+, r0
 5fc:	2a 95       	dec	r18
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <lvl2_Tick+0x4c>
	
	// === Transitions ===
	switch (lvl2_state) {
 600:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <lvl2_state>
 604:	42 2f       	mov	r20, r18
 606:	50 e0       	ldi	r21, 0x00	; 0
 608:	4a 30       	cpi	r20, 0x0A	; 10
 60a:	51 05       	cpc	r21, r1
 60c:	08 f0       	brcs	.+2      	; 0x610 <lvl2_Tick+0x64>
 60e:	6d c0       	rjmp	.+218    	; 0x6ea <lvl2_Tick+0x13e>
 610:	fa 01       	movw	r30, r20
 612:	e2 5b       	subi	r30, 0xB2	; 178
 614:	ff 4f       	sbci	r31, 0xFF	; 255
 616:	dd c3       	rjmp	.+1978   	; 0xdd2 <__tablejump2__>
		case lvl2_start:
			lvl2_state = lvl2_init;
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <lvl2_state>
 61e:	76 c0       	rjmp	.+236    	; 0x70c <lvl2_Tick+0x160>
			break;
		case lvl2_init:
			lvl2_state = lvl2_setup;
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <lvl2_state>
 626:	c1 c0       	rjmp	.+386    	; 0x7aa <lvl2_Tick+0x1fe>
			break;
		case lvl2_setup:
			lvl2_state = lvl2_display_1;
 628:	83 e0       	ldi	r24, 0x03	; 3
 62a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <lvl2_state>
			break;
 62e:	ce c0       	rjmp	.+412    	; 0x7cc <lvl2_Tick+0x220>
		case lvl2_display_1:
			lvl2_state = D0 ? lvl2_pressed : lvl2_state;
 630:	31 11       	cpse	r19, r1
 632:	01 c0       	rjmp	.+2      	; 0x636 <lvl2_Tick+0x8a>
 634:	27 e0       	ldi	r18, 0x07	; 7
			lvl2_state = D2 ? lvl2_reset : lvl2_state;
 636:	89 2b       	or	r24, r25
 638:	09 f0       	breq	.+2      	; 0x63c <lvl2_Tick+0x90>
 63a:	28 e0       	ldi	r18, 0x08	; 8
			lvl2_state = column_sel_index_lvl2 == 0 && column_val_index_lvl2 == 0 ? lvl2_display_2 : lvl2_state;
 63c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <column_sel_index_lvl2>
 640:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <column_sel_index_lvl2+0x1>
 644:	89 2b       	or	r24, r25
 646:	39 f4       	brne	.+14     	; 0x656 <lvl2_Tick+0xaa>
 648:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <column_val_index_lvl2>
 64c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <column_val_index_lvl2+0x1>
 650:	89 2b       	or	r24, r25
 652:	09 f4       	brne	.+2      	; 0x656 <lvl2_Tick+0xaa>
 654:	24 e0       	ldi	r18, 0x04	; 4
 656:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <lvl2_state>
			//lvl2_state = column_sel_index == 0 && column_val_index == 0 ? lvl2_init : lvl2_state; 
			break;
 65a:	4b c0       	rjmp	.+150    	; 0x6f2 <lvl2_Tick+0x146>
		case lvl2_display_2:
			lvl2_state = D0 ? lvl2_pressed : lvl2_state;
 65c:	31 11       	cpse	r19, r1
 65e:	01 c0       	rjmp	.+2      	; 0x662 <lvl2_Tick+0xb6>
 660:	27 e0       	ldi	r18, 0x07	; 7
			lvl2_state = D2 ? lvl2_reset : lvl2_state;
 662:	89 2b       	or	r24, r25
 664:	09 f0       	breq	.+2      	; 0x668 <lvl2_Tick+0xbc>
 666:	28 e0       	ldi	r18, 0x08	; 8
			lvl2_state = column_sel_index_lvl2 == 7 && column_val_index_lvl2 == 7 ? lvl2_display_3 : lvl2_state;
 668:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <column_sel_index_lvl2>
 66c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <column_sel_index_lvl2+0x1>
 670:	07 97       	sbiw	r24, 0x07	; 7
 672:	39 f4       	brne	.+14     	; 0x682 <lvl2_Tick+0xd6>
 674:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <column_val_index_lvl2>
 678:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <column_val_index_lvl2+0x1>
 67c:	07 97       	sbiw	r24, 0x07	; 7
 67e:	09 f4       	brne	.+2      	; 0x682 <lvl2_Tick+0xd6>
 680:	25 e0       	ldi	r18, 0x05	; 5
 682:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <lvl2_state>
			break;
 686:	35 c0       	rjmp	.+106    	; 0x6f2 <lvl2_Tick+0x146>
		case lvl2_display_3:
			lvl2_state = D0 ? lvl2_pressed : lvl2_state;
 688:	31 11       	cpse	r19, r1
 68a:	01 c0       	rjmp	.+2      	; 0x68e <lvl2_Tick+0xe2>
 68c:	27 e0       	ldi	r18, 0x07	; 7
			lvl2_state = D2 ? lvl2_reset : lvl2_state;
 68e:	89 2b       	or	r24, r25
 690:	09 f0       	breq	.+2      	; 0x694 <lvl2_Tick+0xe8>
 692:	28 e0       	ldi	r18, 0x08	; 8
			lvl2_state = column_sel_index_lvl2 == 0 && column_val_index_lvl2 == 0 ? lvl2_display_4 : lvl2_state;
 694:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <column_sel_index_lvl2>
 698:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <column_sel_index_lvl2+0x1>
 69c:	89 2b       	or	r24, r25
 69e:	39 f4       	brne	.+14     	; 0x6ae <lvl2_Tick+0x102>
 6a0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <column_val_index_lvl2>
 6a4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <column_val_index_lvl2+0x1>
 6a8:	89 2b       	or	r24, r25
 6aa:	09 f4       	brne	.+2      	; 0x6ae <lvl2_Tick+0x102>
 6ac:	26 e0       	ldi	r18, 0x06	; 6
 6ae:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <lvl2_state>
			break;
 6b2:	1f c0       	rjmp	.+62     	; 0x6f2 <lvl2_Tick+0x146>
		case lvl2_display_4:
			lvl2_state = D0 ? lvl2_pressed : lvl2_state;
 6b4:	31 11       	cpse	r19, r1
 6b6:	01 c0       	rjmp	.+2      	; 0x6ba <lvl2_Tick+0x10e>
 6b8:	27 e0       	ldi	r18, 0x07	; 7
			lvl2_state = D2 ? lvl2_reset : lvl2_state;
 6ba:	89 2b       	or	r24, r25
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <lvl2_Tick+0x114>
 6be:	28 e0       	ldi	r18, 0x08	; 8
 6c0:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <lvl2_state>
			break;
 6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lvl2_Tick+0x146>
		case lvl2_pressed:
			lvl2_state = D2 ? lvl2_reset : lvl2_state;
 6c6:	89 2b       	or	r24, r25
 6c8:	09 f0       	breq	.+2      	; 0x6cc <lvl2_Tick+0x120>
 6ca:	28 e0       	ldi	r18, 0x08	; 8
			lvl2_state = D1 ? lvl2_reset_level : lvl2_state;
 6cc:	81 2f       	mov	r24, r17
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	80 95       	com	r24
 6d2:	90 95       	com	r25
 6d4:	81 fd       	sbrc	r24, 1
 6d6:	29 e0       	ldi	r18, 0x09	; 9
 6d8:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <lvl2_state>
			break;
 6dc:	0a c0       	rjmp	.+20     	; 0x6f2 <lvl2_Tick+0x146>
		case lvl2_reset:
			lvl2_state = lvl2_start;
 6de:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <lvl2_state>
			break;
 6e2:	b9 c2       	rjmp	.+1394   	; 0xc56 <lvl2_Tick+0x6aa>
		case lvl2_reset_level:
			lvl2_state = lvl2_start;
 6e4:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <lvl2_state>
			break;
 6e8:	b6 c2       	rjmp	.+1388   	; 0xc56 <lvl2_Tick+0x6aa>
		default:
			lvl2_state = lvl2_display_1;
 6ea:	83 e0       	ldi	r24, 0x03	; 3
 6ec:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <lvl2_state>
		break;
 6f0:	6d c0       	rjmp	.+218    	; 0x7cc <lvl2_Tick+0x220>
	}


	// === Actions ===
	switch (lvl2_state) {
 6f2:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <lvl2_state>
 6f6:	8e 2f       	mov	r24, r30
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	fc 01       	movw	r30, r24
 6fc:	31 97       	sbiw	r30, 0x01	; 1
 6fe:	e9 30       	cpi	r30, 0x09	; 9
 700:	f1 05       	cpc	r31, r1
 702:	08 f0       	brcs	.+2      	; 0x706 <lvl2_Tick+0x15a>
 704:	a8 c2       	rjmp	.+1360   	; 0xc56 <lvl2_Tick+0x6aa>
 706:	e8 5a       	subi	r30, 0xA8	; 168
 708:	ff 4f       	sbci	r31, 0xFF	; 255
 70a:	63 c3       	rjmp	.+1734   	; 0xdd2 <__tablejump2__>
		case lvl2_start:
			break;
		case lvl2_init:
			TimerSet(2000);
 70c:	60 ed       	ldi	r22, 0xD0	; 208
 70e:	77 e0       	ldi	r23, 0x07	; 7
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	90 e0       	ldi	r25, 0x00	; 0
			TimerOn();
 714:	ac dd       	rcall	.-1192   	; 0x26e <TimerSet>
 716:	4b dd       	rcall	.-1386   	; 0x1ae <TimerOn>
			column_sel_index_lvl2 = (rand() % 8);
 718:	bb d3       	rcall	.+1910   	; 0xe90 <rand>
 71a:	87 70       	andi	r24, 0x07	; 7
 71c:	90 78       	andi	r25, 0x80	; 128
 71e:	99 23       	and	r25, r25
 720:	24 f4       	brge	.+8      	; 0x72a <lvl2_Tick+0x17e>
 722:	01 97       	sbiw	r24, 0x01	; 1
 724:	88 6f       	ori	r24, 0xF8	; 248
 726:	9f 6f       	ori	r25, 0xFF	; 255
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <column_sel_index_lvl2+0x1>
 72e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <column_sel_index_lvl2>
			column_val_index_lvl2 = (rand() % 8);
 732:	ae d3       	rcall	.+1884   	; 0xe90 <rand>
 734:	87 70       	andi	r24, 0x07	; 7
 736:	90 78       	andi	r25, 0x80	; 128
 738:	99 23       	and	r25, r25
 73a:	24 f4       	brge	.+8      	; 0x744 <lvl2_Tick+0x198>
 73c:	01 97       	sbiw	r24, 0x01	; 1
 73e:	88 6f       	ori	r24, 0xF8	; 248
 740:	9f 6f       	ori	r25, 0xFF	; 255
 742:	01 96       	adiw	r24, 0x01	; 1
 744:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <column_val_index_lvl2+0x1>
 748:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <column_val_index_lvl2>
 74c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <column_sel_index_lvl2>
			lvl2_col_index = column_sel_index_lvl2;
 750:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <column_sel_index_lvl2+0x1>
 754:	30 93 b0 01 	sts	0x01B0, r19	; 0x8001b0 <lvl2_col_index+0x1>
 758:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <lvl2_col_index>
 75c:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <lvl2_val_index+0x1>
			lvl2_val_index = column_val_index_lvl2;
 760:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <lvl2_val_index>
 764:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <ledTimeLate+0x1>
			ledTimeLate = 0;
 768:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ledTimeLate>
 76c:	68 ea       	ldi	r22, 0xA8	; 168
			ledTimeEarly = 0;
			
			ledTimeEarly = (7 - lvl2_col_index)*75*8;
			ledTimeEarly += (7 - lvl2_val_index)*75;
 76e:	7d ef       	ldi	r23, 0xFD	; 253
 770:	26 9f       	mul	r18, r22
 772:	a0 01       	movw	r20, r0
 774:	27 9f       	mul	r18, r23
 776:	50 0d       	add	r21, r0
 778:	36 9f       	mul	r19, r22
 77a:	50 0d       	add	r21, r0
 77c:	11 24       	eor	r1, r1
 77e:	4b 58       	subi	r20, 0x8B	; 139
 780:	5d 4e       	sbci	r21, 0xED	; 237
 782:	65 eb       	ldi	r22, 0xB5	; 181
 784:	8c 01       	movw	r16, r24
 786:	60 03       	mulsu	r22, r16
 788:	90 01       	movw	r18, r0
 78a:	61 9f       	mul	r22, r17
 78c:	30 0d       	add	r19, r0
 78e:	11 24       	eor	r1, r1
 790:	ca 01       	movw	r24, r20
 792:	82 0f       	add	r24, r18
 794:	93 1f       	adc	r25, r19
 796:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <ledTimeEarly+0x1>
 79a:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <ledTimeEarly>
			
			lvl2_passedLED = 0;
 79e:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <lvl2_passedLED>
			LCD_ClearScreen();
 7a2:	c9 dc       	rcall	.-1646   	; 0x136 <LCD_ClearScreen>
			LCD_Cursor(1);
 7a4:	81 e0       	ldi	r24, 0x01	; 1
			break;
 7a6:	ca dc       	rcall	.-1644   	; 0x13c <LCD_Cursor>
		case lvl2_setup:
			TimerSet(75);
 7a8:	56 c2       	rjmp	.+1196   	; 0xc56 <lvl2_Tick+0x6aa>
 7aa:	6b e4       	ldi	r22, 0x4B	; 75
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	5d dd       	rcall	.-1350   	; 0x26e <TimerSet>
			TimerOn();
 7b4:	fc dc       	rcall	.-1544   	; 0x1ae <TimerOn>
 7b6:	87 e0       	ldi	r24, 0x07	; 7
			column_sel_index_lvl2 = 7;
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <column_sel_index_lvl2+0x1>
 7be:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <column_sel_index_lvl2>
			column_val_index_lvl2 = 7;
 7c2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <column_val_index_lvl2+0x1>
 7c6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <column_val_index_lvl2>
			/*if (column_sel_index_lvl2 == 0 && column_val_index_lvl2 == 0)
			{
				column_sel_index_lvl2 = 7;
				column_val_index_lvl2 = 7;
			}*/
			LCD_ClearScreen();
 7ca:	45 c2       	rjmp	.+1162   	; 0xc56 <lvl2_Tick+0x6aa>
 7cc:	b4 dc       	rcall	.-1688   	; 0x136 <LCD_ClearScreen>
			LCD_DisplayString(1, "Timer: ");
 7ce:	60 e2       	ldi	r22, 0x20	; 32
 7d0:	71 e0       	ldi	r23, 0x01	; 1
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	d3 dc       	rcall	.-1626   	; 0x17c <LCD_DisplayString>
 7d6:	87 e3       	ldi	r24, 0x37	; 55
			LCD_WriteData(7 + '0');
 7d8:	c8 dc       	rcall	.-1648   	; 0x16a <LCD_WriteData>
 7da:	85 e3       	ldi	r24, 0x35	; 53
 7dc:	c6 dc       	rcall	.-1652   	; 0x16a <LCD_WriteData>
			LCD_WriteData(5+ '0');
 7de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <column_val_index_lvl2>
 7e2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <column_val_index_lvl2+0x1>
			
			if (column_val_index_lvl2 == 0)
 7e6:	00 97       	sbiw	r24, 0x00	; 0
 7e8:	81 f4       	brne	.+32     	; 0x80a <lvl2_Tick+0x25e>
 7ea:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <column_sel_index_lvl2>
 7ee:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <column_sel_index_lvl2+0x1>
			{
				column_sel_index_lvl2 = column_sel_index_lvl2 - 1;
 7f2:	01 97       	sbiw	r24, 0x01	; 1
 7f4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <column_sel_index_lvl2+0x1>
 7f8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <column_sel_index_lvl2>
 7fc:	87 e0       	ldi	r24, 0x07	; 7
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <column_val_index_lvl2+0x1>
				column_val_index_lvl2 = 7;
 804:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <column_val_index_lvl2>
 808:	05 c0       	rjmp	.+10     	; 0x814 <lvl2_Tick+0x268>
 80a:	01 97       	sbiw	r24, 0x01	; 1
 80c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <column_val_index_lvl2+0x1>
			}
			else
			{
				column_val_index_lvl2 = column_val_index_lvl2 - 1;
 810:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <column_val_index_lvl2>
 814:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <lvl2_passedLED>
 818:	88 23       	and	r24, r24
			}
			if (lvl2_passedLED)
 81a:	59 f0       	breq	.+22     	; 0x832 <lvl2_Tick+0x286>
 81c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <ledTimeLate>
 820:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <ledTimeLate+0x1>
			{
				ledTimeLate += 75;
 824:	85 5b       	subi	r24, 0xB5	; 181
 826:	9f 4f       	sbci	r25, 0xFF	; 255
 828:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <ledTimeLate+0x1>
 82c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <ledTimeLate>
 830:	12 c2       	rjmp	.+1060   	; 0xc56 <lvl2_Tick+0x6aa>
 832:	92 b1       	in	r25, 0x02	; 2
 834:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <lvl2_val_index>
			}
			else if (PORTA == column_val_array[lvl2_val_index] && PORTB == column_sel_array[lvl2_col_index])
 838:	f0 91 ae 01 	lds	r31, 0x01AE	; 0x8001ae <lvl2_val_index+0x1>
 83c:	ec 0f       	add	r30, r28
 83e:	fd 1f       	adc	r31, r29
 840:	81 85       	ldd	r24, Z+9	; 0x09
 842:	98 13       	cpse	r25, r24
 844:	0e c0       	rjmp	.+28     	; 0x862 <lvl2_Tick+0x2b6>
 846:	95 b1       	in	r25, 0x05	; 5
 848:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <lvl2_col_index>
 84c:	f0 91 b0 01 	lds	r31, 0x01B0	; 0x8001b0 <lvl2_col_index+0x1>
 850:	ec 0f       	add	r30, r28
 852:	fd 1f       	adc	r31, r29
 854:	81 81       	ldd	r24, Z+1	; 0x01
 856:	98 13       	cpse	r25, r24
 858:	04 c0       	rjmp	.+8      	; 0x862 <lvl2_Tick+0x2b6>
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <lvl2_passedLED>
			{
				lvl2_passedLED = 0x01;
 860:	fa c1       	rjmp	.+1012   	; 0xc56 <lvl2_Tick+0x6aa>
 862:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <ledTimeEarly>
 866:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <ledTimeEarly+0x1>
			}
			else
			{
				ledTimeEarly -= 75;
 86a:	8b 54       	subi	r24, 0x4B	; 75
 86c:	91 09       	sbc	r25, r1
 86e:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <ledTimeEarly+0x1>
 872:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <ledTimeEarly>
			}
			break;
		case lvl2_display_2:
			TimerSet(55);
 876:	ef c1       	rjmp	.+990    	; 0xc56 <lvl2_Tick+0x6aa>
 878:	67 e3       	ldi	r22, 0x37	; 55
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	90 e0       	ldi	r25, 0x00	; 0
			TimerOn();
 880:	f6 dc       	rcall	.-1556   	; 0x26e <TimerSet>
 882:	95 dc       	rcall	.-1750   	; 0x1ae <TimerOn>
			
			LCD_ClearScreen();
 884:	58 dc       	rcall	.-1872   	; 0x136 <LCD_ClearScreen>
 886:	60 e2       	ldi	r22, 0x20	; 32
			LCD_DisplayString(1, "Timer: ");
 888:	71 e0       	ldi	r23, 0x01	; 1
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	77 dc       	rcall	.-1810   	; 0x17c <LCD_DisplayString>
 88e:	85 e3       	ldi	r24, 0x35	; 53
 890:	6c dc       	rcall	.-1832   	; 0x16a <LCD_WriteData>
			LCD_WriteData(5 + '0');
 892:	85 e3       	ldi	r24, 0x35	; 53
 894:	6a dc       	rcall	.-1836   	; 0x16a <LCD_WriteData>
 896:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <column_val_index_lvl2>
			LCD_WriteData(5+ '0');
 89a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <column_val_index_lvl2+0x1>
			/*if (column_sel_index_lvl2 == 0 && column_val_index_lvl2 == 0)
			{
				column_sel_index_lvl2 = 7;
				column_val_index_lvl2 = 7;
			}*/
			if (column_val_index_lvl2 == 7)
 89e:	87 30       	cpi	r24, 0x07	; 7
 8a0:	91 05       	cpc	r25, r1
 8a2:	71 f4       	brne	.+28     	; 0x8c0 <lvl2_Tick+0x314>
 8a4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <column_sel_index_lvl2>
 8a8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <column_sel_index_lvl2+0x1>
			{
				column_sel_index_lvl2 = column_sel_index_lvl2 + 1;
 8ac:	01 96       	adiw	r24, 0x01	; 1
 8ae:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <column_sel_index_lvl2+0x1>
 8b2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <column_sel_index_lvl2>
 8b6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <column_val_index_lvl2+0x1>
 8ba:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <column_val_index_lvl2>
				column_val_index_lvl2 = 0;
 8be:	05 c0       	rjmp	.+10     	; 0x8ca <lvl2_Tick+0x31e>
 8c0:	01 96       	adiw	r24, 0x01	; 1
 8c2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <column_val_index_lvl2+0x1>
			}
			else
			{
				column_val_index_lvl2 = column_val_index_lvl2 + 1;
 8c6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <column_val_index_lvl2>
 8ca:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <ledTimeLate>
			}
			ledTimeLate += 55;
 8ce:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <ledTimeLate+0x1>
 8d2:	c7 96       	adiw	r24, 0x37	; 55
 8d4:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <ledTimeLate+0x1>
			break;
 8d8:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <ledTimeLate>
		case lvl2_display_3:
			TimerSet(45);
 8dc:	bc c1       	rjmp	.+888    	; 0xc56 <lvl2_Tick+0x6aa>
 8de:	6d e2       	ldi	r22, 0x2D	; 45
 8e0:	70 e0       	ldi	r23, 0x00	; 0
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	90 e0       	ldi	r25, 0x00	; 0
			TimerOn();
 8e6:	c3 dc       	rcall	.-1658   	; 0x26e <TimerSet>
 8e8:	62 dc       	rcall	.-1852   	; 0x1ae <TimerOn>
			
			LCD_ClearScreen();
 8ea:	25 dc       	rcall	.-1974   	; 0x136 <LCD_ClearScreen>
 8ec:	60 e2       	ldi	r22, 0x20	; 32
			LCD_DisplayString(1, "Timer: ");
 8ee:	71 e0       	ldi	r23, 0x01	; 1
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	44 dc       	rcall	.-1912   	; 0x17c <LCD_DisplayString>
 8f4:	84 e3       	ldi	r24, 0x34	; 52
 8f6:	39 dc       	rcall	.-1934   	; 0x16a <LCD_WriteData>
			LCD_WriteData(4 + '0');
 8f8:	85 e3       	ldi	r24, 0x35	; 53
 8fa:	37 dc       	rcall	.-1938   	; 0x16a <LCD_WriteData>
 8fc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <column_sel_index_lvl2>
			LCD_WriteData(5+ '0');
 900:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <column_sel_index_lvl2+0x1>
			/*if (column_sel_index_lvl2 == 0 && column_val_index_lvl2 == 0)
			{
				column_sel_index_lvl2 = 7;
				column_val_index_lvl2 = 7;
			}
			else*/ if (column_sel_index_lvl2 == 0)
 904:	00 97       	sbiw	r24, 0x00	; 0
 906:	81 f4       	brne	.+32     	; 0x928 <lvl2_Tick+0x37c>
 908:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <column_val_index_lvl2>
 90c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <column_val_index_lvl2+0x1>
			{
				column_val_index_lvl2 = column_val_index_lvl2 - 1;
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <column_val_index_lvl2+0x1>
 916:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <column_val_index_lvl2>
 91a:	87 e0       	ldi	r24, 0x07	; 7
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <column_sel_index_lvl2+0x1>
				column_sel_index_lvl2 = 7;
 922:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <column_sel_index_lvl2>
 926:	05 c0       	rjmp	.+10     	; 0x932 <lvl2_Tick+0x386>
 928:	01 97       	sbiw	r24, 0x01	; 1
			}
			else
			{
				column_sel_index_lvl2 = column_sel_index_lvl2 - 1;
 92a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <column_sel_index_lvl2+0x1>
 92e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <column_sel_index_lvl2>
			}
			ledTimeLate += 45;
 932:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <ledTimeLate>
 936:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <ledTimeLate+0x1>
 93a:	8d 96       	adiw	r24, 0x2d	; 45
 93c:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <ledTimeLate+0x1>
 940:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <ledTimeLate>
			break;
		case lvl2_display_4:
			TimerSet(25);
 944:	88 c1       	rjmp	.+784    	; 0xc56 <lvl2_Tick+0x6aa>
 946:	69 e1       	ldi	r22, 0x19	; 25
 948:	70 e0       	ldi	r23, 0x00	; 0
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	8f dc       	rcall	.-1762   	; 0x26e <TimerSet>
			TimerOn();
 950:	2e dc       	rcall	.-1956   	; 0x1ae <TimerOn>
 952:	f1 db       	rcall	.-2078   	; 0x136 <LCD_ClearScreen>
			
			LCD_ClearScreen();
 954:	60 e2       	ldi	r22, 0x20	; 32
 956:	71 e0       	ldi	r23, 0x01	; 1
			LCD_DisplayString(1, "Timer: ");
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	10 dc       	rcall	.-2016   	; 0x17c <LCD_DisplayString>
 95c:	82 e3       	ldi	r24, 0x32	; 50
 95e:	05 dc       	rcall	.-2038   	; 0x16a <LCD_WriteData>
 960:	85 e3       	ldi	r24, 0x35	; 53
			LCD_WriteData(2 + '0');
 962:	03 dc       	rcall	.-2042   	; 0x16a <LCD_WriteData>
 964:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <column_val_index_lvl2>
			LCD_WriteData(5+ '0');
 968:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <column_val_index_lvl2+0x1>
 96c:	27 30       	cpi	r18, 0x07	; 7
			if (column_val_index_lvl2 == 7 && column_sel_index_lvl2 == 7)
 96e:	31 05       	cpc	r19, r1
 970:	81 f4       	brne	.+32     	; 0x992 <lvl2_Tick+0x3e6>
 972:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <column_sel_index_lvl2>
 976:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <column_sel_index_lvl2+0x1>
 97a:	87 30       	cpi	r24, 0x07	; 7
 97c:	91 05       	cpc	r25, r1
 97e:	d9 f4       	brne	.+54     	; 0x9b6 <lvl2_Tick+0x40a>
 980:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <column_sel_index_lvl2+0x1>
 984:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <column_sel_index_lvl2>
 988:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <column_val_index_lvl2+0x1>
			{
				column_sel_index_lvl2 = 0;
 98c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <column_val_index_lvl2>
 990:	17 c0       	rjmp	.+46     	; 0x9c0 <lvl2_Tick+0x414>
				column_val_index_lvl2 = 0;
 992:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <column_sel_index_lvl2>
 996:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <column_sel_index_lvl2+0x1>
 99a:	87 30       	cpi	r24, 0x07	; 7
			}
			else if (column_sel_index_lvl2 == 7)
 99c:	91 05       	cpc	r25, r1
 99e:	59 f4       	brne	.+22     	; 0x9b6 <lvl2_Tick+0x40a>
 9a0:	2f 5f       	subi	r18, 0xFF	; 255
 9a2:	3f 4f       	sbci	r19, 0xFF	; 255
 9a4:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <column_val_index_lvl2+0x1>
 9a8:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <column_val_index_lvl2>
			{
				column_val_index_lvl2 = column_val_index_lvl2 + 1;
 9ac:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <column_sel_index_lvl2+0x1>
 9b0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <column_sel_index_lvl2>
 9b4:	05 c0       	rjmp	.+10     	; 0x9c0 <lvl2_Tick+0x414>
				column_sel_index_lvl2 = 0;
 9b6:	01 96       	adiw	r24, 0x01	; 1
 9b8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <column_sel_index_lvl2+0x1>
 9bc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <column_sel_index_lvl2>
			}
			else
			{
				column_sel_index_lvl2 = column_sel_index_lvl2 + 1;
 9c0:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <ledTimeLate>
 9c4:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <ledTimeLate+0x1>
 9c8:	49 96       	adiw	r24, 0x19	; 25
			}
			
			ledTimeLate += 25;
 9ca:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <ledTimeLate+0x1>
 9ce:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <ledTimeLate>
 9d2:	41 c1       	rjmp	.+642    	; 0xc56 <lvl2_Tick+0x6aa>
 9d4:	42 b1       	in	r20, 0x02	; 2
 9d6:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <lvl2_val_index>
			break;
 9da:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <lvl2_val_index+0x1>
		case lvl2_pressed:
			//buttonTemp = 0x01;
			if (PORTA == column_val_array[lvl2_val_index] && PORTB == column_sel_array[lvl2_val_index] || D0)
 9de:	fe 01       	movw	r30, r28
 9e0:	e8 0f       	add	r30, r24
 9e2:	f9 1f       	adc	r31, r25
 9e4:	21 85       	ldd	r18, Z+9	; 0x09
 9e6:	42 13       	cpse	r20, r18
 9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <lvl2_Tick+0x44c>
 9ea:	25 b1       	in	r18, 0x05	; 5
 9ec:	fe 01       	movw	r30, r28
 9ee:	e8 0f       	add	r30, r24
 9f0:	f9 1f       	adc	r31, r25
 9f2:	81 81       	ldd	r24, Z+1	; 0x01
 9f4:	28 17       	cp	r18, r24
 9f6:	11 f0       	breq	.+4      	; 0x9fc <lvl2_Tick+0x450>
 9f8:	31 11       	cpse	r19, r1
 9fa:	05 c0       	rjmp	.+10     	; 0xa06 <lvl2_Tick+0x45a>
 9fc:	68 e2       	ldi	r22, 0x28	; 40
 9fe:	71 e0       	ldi	r23, 0x01	; 1
			{
				LCD_DisplayString(1, "Congratulations!");
 a00:	81 e0       	ldi	r24, 0x01	; 1
 a02:	bc db       	rcall	.-2184   	; 0x17c <LCD_DisplayString>
 a04:	28 c1       	rjmp	.+592    	; 0xc56 <lvl2_Tick+0x6aa>
 a06:	00 91 b3 01 	lds	r16, 0x01B3	; 0x8001b3 <ledTimeLate>
			{
				//LCD_ClearScreen();
				//LCD_Cursor(1);
				
				//LCD_DisplayString(1, "STINKY");
				if (ledTimeLate > 0)
 a0a:	10 91 b4 01 	lds	r17, 0x01B4	; 0x8001b4 <ledTimeLate+0x1>
 a0e:	01 15       	cp	r16, r1
 a10:	11 05       	cpc	r17, r1
 a12:	09 f4       	brne	.+2      	; 0xa16 <lvl2_Tick+0x46a>
 a14:	83 c0       	rjmp	.+262    	; 0xb1c <lvl2_Tick+0x570>
 a16:	08 3e       	cpi	r16, 0xE8	; 232
				{
					unsigned int tempLEDTime = ledTimeLate;
					unsigned int tempLEDTimeLate = ledTimeLate;
					if (ledTimeLate >= 1000)
 a18:	83 e0       	ldi	r24, 0x03	; 3
 a1a:	18 07       	cpc	r17, r24
 a1c:	28 f0       	brcs	.+10     	; 0xa28 <lvl2_Tick+0x47c>
 a1e:	69 e3       	ldi	r22, 0x39	; 57
					{
						LCD_DisplayString(1, "You were late by 1000 ms or more!");
 a20:	71 e0       	ldi	r23, 0x01	; 1
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	ab db       	rcall	.-2218   	; 0x17c <LCD_DisplayString>
 a26:	17 c1       	rjmp	.+558    	; 0xc56 <lvl2_Tick+0x6aa>
 a28:	04 36       	cpi	r16, 0x64	; 100
 a2a:	11 05       	cpc	r17, r1
					}
					else
					{
						if (ledTimeLate >= 100)
 a2c:	08 f4       	brcc	.+2      	; 0xa30 <lvl2_Tick+0x484>
 a2e:	3d c0       	rjmp	.+122    	; 0xaaa <lvl2_Tick+0x4fe>
 a30:	6b e5       	ldi	r22, 0x5B	; 91
						{		
							LCD_DisplayString(1, "You were late by ");
 a32:	71 e0       	ldi	r23, 0x01	; 1
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	a2 db       	rcall	.-2236   	; 0x17c <LCD_DisplayString>
 a38:	98 01       	movw	r18, r16
 a3a:	36 95       	lsr	r19
							
							tempLEDTime = (int)(tempLEDTimeLate/100);
 a3c:	27 95       	ror	r18
 a3e:	36 95       	lsr	r19
 a40:	27 95       	ror	r18
 a42:	ab e7       	ldi	r26, 0x7B	; 123
 a44:	b4 e1       	ldi	r27, 0x14	; 20
 a46:	ce d1       	rcall	.+924    	; 0xde4 <__umulhisi3>
 a48:	8c 01       	movw	r16, r24
 a4a:	16 95       	lsr	r17
 a4c:	07 95       	ror	r16
 a4e:	80 e3       	ldi	r24, 0x30	; 48
 a50:	80 0f       	add	r24, r16
							LCD_WriteData(tempLEDTime+'0');
 a52:	8b db       	rcall	.-2282   	; 0x16a <LCD_WriteData>
 a54:	24 e6       	ldi	r18, 0x64	; 100
 a56:	20 9f       	mul	r18, r16
 a58:	c0 01       	movw	r24, r0
							tempLEDTimeLate = ledTimeLate - (tempLEDTime*100);
 a5a:	21 9f       	mul	r18, r17
 a5c:	90 0d       	add	r25, r0
 a5e:	11 24       	eor	r1, r1
 a60:	e0 90 b3 01 	lds	r14, 0x01B3	; 0x8001b3 <ledTimeLate>
 a64:	f0 90 b4 01 	lds	r15, 0x01B4	; 0x8001b4 <ledTimeLate+0x1>
 a68:	e8 1a       	sub	r14, r24
 a6a:	f9 0a       	sbc	r15, r25
 a6c:	97 01       	movw	r18, r14
							
							tempLEDTime = (int)(tempLEDTimeLate/10);
 a6e:	ad ec       	ldi	r26, 0xCD	; 205
 a70:	bc ec       	ldi	r27, 0xCC	; 204
 a72:	b8 d1       	rcall	.+880    	; 0xde4 <__umulhisi3>
 a74:	8c 01       	movw	r16, r24
 a76:	16 95       	lsr	r17
 a78:	07 95       	ror	r16
 a7a:	16 95       	lsr	r17
 a7c:	07 95       	ror	r16
 a7e:	16 95       	lsr	r17
 a80:	07 95       	ror	r16
 a82:	80 e3       	ldi	r24, 0x30	; 48
							LCD_WriteData(tempLEDTime+'0');
 a84:	80 0f       	add	r24, r16
 a86:	71 db       	rcall	.-2334   	; 0x16a <LCD_WriteData>
 a88:	c8 01       	movw	r24, r16
 a8a:	88 0f       	add	r24, r24
							tempLEDTimeLate = tempLEDTimeLate - (tempLEDTime*10);
							
							LCD_WriteData(tempLEDTimeLate+'0');
 a8c:	99 1f       	adc	r25, r25
 a8e:	00 0f       	add	r16, r16
 a90:	11 1f       	adc	r17, r17
 a92:	00 0f       	add	r16, r16
 a94:	11 1f       	adc	r17, r17
 a96:	00 0f       	add	r16, r16
 a98:	11 1f       	adc	r17, r17
 a9a:	08 0f       	add	r16, r24
 a9c:	19 1f       	adc	r17, r25
 a9e:	c7 01       	movw	r24, r14
 aa0:	80 1b       	sub	r24, r16
 aa2:	91 0b       	sbc	r25, r17
 aa4:	80 5d       	subi	r24, 0xD0	; 208
 aa6:	61 db       	rcall	.-2366   	; 0x16a <LCD_WriteData>
 aa8:	d6 c0       	rjmp	.+428    	; 0xc56 <lvl2_Tick+0x6aa>
 aaa:	6b e5       	ldi	r22, 0x5B	; 91
 aac:	71 e0       	ldi	r23, 0x01	; 1
						}
						else
						{
							LCD_DisplayString(1, "You were late by ");
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	65 db       	rcall	.-2358   	; 0x17c <LCD_DisplayString>
 ab2:	98 01       	movw	r18, r16
 ab4:	36 95       	lsr	r19
 ab6:	27 95       	ror	r18
							
							tempLEDTime = (int)(tempLEDTimeLate/100);
							tempLEDTimeLate = ledTimeLate - (tempLEDTime*100);
 ab8:	36 95       	lsr	r19
 aba:	27 95       	ror	r18
 abc:	ab e7       	ldi	r26, 0x7B	; 123
 abe:	b4 e1       	ldi	r27, 0x14	; 20
 ac0:	91 d1       	rcall	.+802    	; 0xde4 <__umulhisi3>
 ac2:	96 95       	lsr	r25
 ac4:	87 95       	ror	r24
 ac6:	44 e6       	ldi	r20, 0x64	; 100
 ac8:	48 9f       	mul	r20, r24
 aca:	90 01       	movw	r18, r0
 acc:	49 9f       	mul	r20, r25
 ace:	30 0d       	add	r19, r0
 ad0:	11 24       	eor	r1, r1
 ad2:	e0 90 b3 01 	lds	r14, 0x01B3	; 0x8001b3 <ledTimeLate>
 ad6:	f0 90 b4 01 	lds	r15, 0x01B4	; 0x8001b4 <ledTimeLate+0x1>
 ada:	e2 1a       	sub	r14, r18
 adc:	f3 0a       	sbc	r15, r19
 ade:	97 01       	movw	r18, r14
 ae0:	ad ec       	ldi	r26, 0xCD	; 205
 ae2:	bc ec       	ldi	r27, 0xCC	; 204
							
							tempLEDTime = (int)(tempLEDTimeLate/10);
 ae4:	7f d1       	rcall	.+766    	; 0xde4 <__umulhisi3>
 ae6:	8c 01       	movw	r16, r24
 ae8:	16 95       	lsr	r17
 aea:	07 95       	ror	r16
 aec:	16 95       	lsr	r17
 aee:	07 95       	ror	r16
 af0:	16 95       	lsr	r17
 af2:	07 95       	ror	r16
 af4:	80 e3       	ldi	r24, 0x30	; 48
 af6:	80 0f       	add	r24, r16
							LCD_WriteData(tempLEDTime+'0');
 af8:	38 db       	rcall	.-2448   	; 0x16a <LCD_WriteData>
 afa:	c8 01       	movw	r24, r16
 afc:	88 0f       	add	r24, r24
 afe:	99 1f       	adc	r25, r25
							tempLEDTimeLate = tempLEDTimeLate - (tempLEDTime*10);
							
							LCD_WriteData(tempLEDTimeLate+'0');
 b00:	00 0f       	add	r16, r16
 b02:	11 1f       	adc	r17, r17
 b04:	00 0f       	add	r16, r16
 b06:	11 1f       	adc	r17, r17
 b08:	00 0f       	add	r16, r16
 b0a:	11 1f       	adc	r17, r17
 b0c:	08 0f       	add	r16, r24
 b0e:	19 1f       	adc	r17, r25
 b10:	c7 01       	movw	r24, r14
 b12:	80 1b       	sub	r24, r16
 b14:	91 0b       	sbc	r25, r17
 b16:	80 5d       	subi	r24, 0xD0	; 208
 b18:	28 db       	rcall	.-2480   	; 0x16a <LCD_WriteData>
 b1a:	9d c0       	rjmp	.+314    	; 0xc56 <lvl2_Tick+0x6aa>
 b1c:	00 91 b5 01 	lds	r16, 0x01B5	; 0x8001b5 <ledTimeEarly>
					}
				}
				else 
				{
					unsigned int tempLEDTime = ledTimeEarly;
					unsigned int tempLEDTimeEarly = ledTimeEarly;
 b20:	10 91 b6 01 	lds	r17, 0x01B6	; 0x8001b6 <ledTimeEarly+0x1>
 b24:	08 3e       	cpi	r16, 0xE8	; 232
 b26:	83 e0       	ldi	r24, 0x03	; 3
					
					if (ledTimeEarly >= 1000)
 b28:	18 07       	cpc	r17, r24
 b2a:	28 f0       	brcs	.+10     	; 0xb36 <lvl2_Tick+0x58a>
 b2c:	6d e6       	ldi	r22, 0x6D	; 109
					{
						LCD_DisplayString(1, "You were early 1000 ms or more!");
 b2e:	71 e0       	ldi	r23, 0x01	; 1
 b30:	81 e0       	ldi	r24, 0x01	; 1
 b32:	24 db       	rcall	.-2488   	; 0x17c <LCD_DisplayString>
 b34:	90 c0       	rjmp	.+288    	; 0xc56 <lvl2_Tick+0x6aa>
 b36:	04 36       	cpi	r16, 0x64	; 100
 b38:	11 05       	cpc	r17, r1
					}
					else if (ledTimeEarly >= 100)
 b3a:	08 f4       	brcc	.+2      	; 0xb3e <lvl2_Tick+0x592>
 b3c:	3d c0       	rjmp	.+122    	; 0xbb8 <lvl2_Tick+0x60c>
 b3e:	6d e8       	ldi	r22, 0x8D	; 141
					{
						LCD_DisplayString(1, "You were early by ");
 b40:	71 e0       	ldi	r23, 0x01	; 1
 b42:	81 e0       	ldi	r24, 0x01	; 1
 b44:	1b db       	rcall	.-2506   	; 0x17c <LCD_DisplayString>
 b46:	98 01       	movw	r18, r16
 b48:	36 95       	lsr	r19
						
						tempLEDTime = (int)(tempLEDTimeEarly/100);
 b4a:	27 95       	ror	r18
 b4c:	36 95       	lsr	r19
 b4e:	27 95       	ror	r18
 b50:	ab e7       	ldi	r26, 0x7B	; 123
 b52:	b4 e1       	ldi	r27, 0x14	; 20
 b54:	47 d1       	rcall	.+654    	; 0xde4 <__umulhisi3>
 b56:	8c 01       	movw	r16, r24
 b58:	16 95       	lsr	r17
 b5a:	07 95       	ror	r16
 b5c:	80 e3       	ldi	r24, 0x30	; 48
 b5e:	80 0f       	add	r24, r16
						LCD_WriteData(tempLEDTime+'0');
 b60:	04 db       	rcall	.-2552   	; 0x16a <LCD_WriteData>
 b62:	24 e6       	ldi	r18, 0x64	; 100
 b64:	20 9f       	mul	r18, r16
						tempLEDTimeEarly = ledTimeEarly - (tempLEDTime*100);
 b66:	c0 01       	movw	r24, r0
 b68:	21 9f       	mul	r18, r17
 b6a:	90 0d       	add	r25, r0
 b6c:	11 24       	eor	r1, r1
 b6e:	e0 90 b5 01 	lds	r14, 0x01B5	; 0x8001b5 <ledTimeEarly>
 b72:	f0 90 b6 01 	lds	r15, 0x01B6	; 0x8001b6 <ledTimeEarly+0x1>
 b76:	e8 1a       	sub	r14, r24
 b78:	f9 0a       	sbc	r15, r25
 b7a:	97 01       	movw	r18, r14
										
						tempLEDTime = (int)(tempLEDTimeEarly/10);
 b7c:	ad ec       	ldi	r26, 0xCD	; 205
 b7e:	bc ec       	ldi	r27, 0xCC	; 204
 b80:	31 d1       	rcall	.+610    	; 0xde4 <__umulhisi3>
 b82:	8c 01       	movw	r16, r24
 b84:	16 95       	lsr	r17
 b86:	07 95       	ror	r16
 b88:	16 95       	lsr	r17
 b8a:	07 95       	ror	r16
 b8c:	16 95       	lsr	r17
 b8e:	07 95       	ror	r16
 b90:	80 e3       	ldi	r24, 0x30	; 48
						LCD_WriteData(tempLEDTime+'0');
 b92:	80 0f       	add	r24, r16
 b94:	ea da       	rcall	.-2604   	; 0x16a <LCD_WriteData>
 b96:	c8 01       	movw	r24, r16
 b98:	88 0f       	add	r24, r24
						tempLEDTimeEarly = tempLEDTimeEarly - (tempLEDTime*10);
						
						LCD_WriteData(tempLEDTimeEarly+'0');
 b9a:	99 1f       	adc	r25, r25
 b9c:	00 0f       	add	r16, r16
 b9e:	11 1f       	adc	r17, r17
 ba0:	00 0f       	add	r16, r16
 ba2:	11 1f       	adc	r17, r17
 ba4:	00 0f       	add	r16, r16
 ba6:	11 1f       	adc	r17, r17
 ba8:	08 0f       	add	r16, r24
 baa:	19 1f       	adc	r17, r25
 bac:	c7 01       	movw	r24, r14
 bae:	80 1b       	sub	r24, r16
 bb0:	91 0b       	sbc	r25, r17
 bb2:	80 5d       	subi	r24, 0xD0	; 208
 bb4:	da da       	rcall	.-2636   	; 0x16a <LCD_WriteData>
 bb6:	4f c0       	rjmp	.+158    	; 0xc56 <lvl2_Tick+0x6aa>
 bb8:	6d e8       	ldi	r22, 0x8D	; 141
 bba:	71 e0       	ldi	r23, 0x01	; 1
					}
					else
					{
						LCD_DisplayString(1, "You were early by ");
 bbc:	81 e0       	ldi	r24, 0x01	; 1
 bbe:	de da       	rcall	.-2628   	; 0x17c <LCD_DisplayString>
 bc0:	98 01       	movw	r18, r16
 bc2:	36 95       	lsr	r19
						
						tempLEDTime = (int)(tempLEDTimeEarly/100);
						tempLEDTimeEarly = ledTimeEarly - (tempLEDTime*100);
 bc4:	27 95       	ror	r18
 bc6:	36 95       	lsr	r19
 bc8:	27 95       	ror	r18
 bca:	ab e7       	ldi	r26, 0x7B	; 123
 bcc:	b4 e1       	ldi	r27, 0x14	; 20
 bce:	0a d1       	rcall	.+532    	; 0xde4 <__umulhisi3>
 bd0:	96 95       	lsr	r25
 bd2:	87 95       	ror	r24
 bd4:	44 e6       	ldi	r20, 0x64	; 100
 bd6:	48 9f       	mul	r20, r24
 bd8:	90 01       	movw	r18, r0
 bda:	49 9f       	mul	r20, r25
 bdc:	30 0d       	add	r19, r0
 bde:	11 24       	eor	r1, r1
 be0:	e0 90 b5 01 	lds	r14, 0x01B5	; 0x8001b5 <ledTimeEarly>
 be4:	f0 90 b6 01 	lds	r15, 0x01B6	; 0x8001b6 <ledTimeEarly+0x1>
 be8:	e2 1a       	sub	r14, r18
 bea:	f3 0a       	sbc	r15, r19
 bec:	97 01       	movw	r18, r14
						
						tempLEDTime = (int)(tempLEDTimeEarly/10);
 bee:	ad ec       	ldi	r26, 0xCD	; 205
 bf0:	bc ec       	ldi	r27, 0xCC	; 204
 bf2:	f8 d0       	rcall	.+496    	; 0xde4 <__umulhisi3>
 bf4:	8c 01       	movw	r16, r24
 bf6:	16 95       	lsr	r17
 bf8:	07 95       	ror	r16
 bfa:	16 95       	lsr	r17
 bfc:	07 95       	ror	r16
 bfe:	16 95       	lsr	r17
 c00:	07 95       	ror	r16
 c02:	80 e3       	ldi	r24, 0x30	; 48
 c04:	80 0f       	add	r24, r16
						LCD_WriteData(tempLEDTime+'0');
 c06:	b1 da       	rcall	.-2718   	; 0x16a <LCD_WriteData>
 c08:	c8 01       	movw	r24, r16
 c0a:	88 0f       	add	r24, r24
 c0c:	99 1f       	adc	r25, r25
						tempLEDTimeEarly = tempLEDTimeEarly - (tempLEDTime*10);
						
						LCD_WriteData(tempLEDTimeEarly+'0');
 c0e:	00 0f       	add	r16, r16
 c10:	11 1f       	adc	r17, r17
 c12:	00 0f       	add	r16, r16
 c14:	11 1f       	adc	r17, r17
 c16:	00 0f       	add	r16, r16
 c18:	11 1f       	adc	r17, r17
 c1a:	08 0f       	add	r16, r24
 c1c:	19 1f       	adc	r17, r25
 c1e:	c7 01       	movw	r24, r14
 c20:	80 1b       	sub	r24, r16
 c22:	91 0b       	sbc	r25, r17
 c24:	80 5d       	subi	r24, 0xD0	; 208
 c26:	a1 da       	rcall	.-2750   	; 0x16a <LCD_WriteData>
 c28:	16 c0       	rjmp	.+44     	; 0xc56 <lvl2_Tick+0x6aa>
 c2a:	6b e4       	ldi	r22, 0x4B	; 75
 c2c:	70 e0       	ldi	r23, 0x00	; 0
 c2e:	80 e0       	ldi	r24, 0x00	; 0
 c30:	90 e0       	ldi	r25, 0x00	; 0
					}
				}
			}
			break;
		case lvl2_reset:
			TimerSet(75);
 c32:	1d db       	rcall	.-2502   	; 0x26e <TimerSet>
 c34:	bc da       	rcall	.-2696   	; 0x1ae <TimerOn>
 c36:	87 e0       	ldi	r24, 0x07	; 7
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <column_sel_index_lvl2+0x1>
			TimerOn();
 c3e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <column_sel_index_lvl2>
			column_sel_index_lvl2 = 7;
 c42:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <column_val_index_lvl2+0x1>
 c46:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <column_val_index_lvl2>
 c4a:	05 c0       	rjmp	.+10     	; 0xc56 <lvl2_Tick+0x6aa>
 c4c:	81 e0       	ldi	r24, 0x01	; 1
			column_val_index_lvl2 = 7;
 c4e:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <lvl_state>
 c52:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <levelTemp>
			break;
 c56:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <column_val_index_lvl2>
		case lvl2_reset_level:
			lvl_state = lvl_init;
 c5a:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <column_val_index_lvl2+0x1>
			levelTemp = 0x00;
 c5e:	ec 0f       	add	r30, r28
 c60:	fd 1f       	adc	r31, r29
			break;
		default:
		break;
	}
	
	PORTA = column_val_array[column_val_index_lvl2]; // PORTA displays column pattern
 c62:	81 85       	ldd	r24, Z+9	; 0x09
 c64:	82 b9       	out	0x02, r24	; 2
 c66:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <column_sel_index_lvl2>
 c6a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <column_sel_index_lvl2+0x1>
 c6e:	ec 0f       	add	r30, r28
 c70:	fd 1f       	adc	r31, r29
	PORTB = column_sel_array[column_sel_index_lvl2]; // PORTB selects column to display pattern
 c72:	81 81       	ldd	r24, Z+1	; 0x01
 c74:	85 b9       	out	0x05, r24	; 5
 c76:	60 96       	adiw	r28, 0x10	; 16
 c78:	0f b6       	in	r0, 0x3f	; 63
 c7a:	f8 94       	cli
 c7c:	de bf       	out	0x3e, r29	; 62
 c7e:	0f be       	out	0x3f, r0	; 63
 c80:	cd bf       	out	0x3d, r28	; 61

};
 c82:	df 91       	pop	r29
 c84:	cf 91       	pop	r28
 c86:	1f 91       	pop	r17
 c88:	0f 91       	pop	r16
 c8a:	ff 90       	pop	r15
 c8c:	ef 90       	pop	r14
 c8e:	08 95       	ret

00000c90 <level_SM_Tick>:
 c90:	99 b1       	in	r25, 0x09	; 9
 c92:	49 b1       	in	r20, 0x09	; 9
 c94:	29 b1       	in	r18, 0x09	; 9
 c96:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <lvl_state>
 c9a:	82 30       	cpi	r24, 0x02	; 2
	unsigned D2 = ~PIND & 0x04;
	
	static unsigned char column_val = 0x01; // sets the pattern displayed on columns
	static unsigned char column_sel = 0x7F; // grounds column to display pattern
	
	switch(lvl_state)
 c9c:	99 f0       	breq	.+38     	; 0xcc4 <level_SM_Tick+0x34>
 c9e:	28 f4       	brcc	.+10     	; 0xcaa <level_SM_Tick+0x1a>
 ca0:	88 23       	and	r24, r24
 ca2:	41 f0       	breq	.+16     	; 0xcb4 <level_SM_Tick+0x24>
 ca4:	81 30       	cpi	r24, 0x01	; 1
 ca6:	51 f0       	breq	.+20     	; 0xcbc <level_SM_Tick+0x2c>
 ca8:	24 c0       	rjmp	.+72     	; 0xcf2 <level_SM_Tick+0x62>
 caa:	83 30       	cpi	r24, 0x03	; 3
 cac:	d1 f0       	breq	.+52     	; 0xce2 <level_SM_Tick+0x52>
 cae:	84 30       	cpi	r24, 0x04	; 4
 cb0:	e1 f0       	breq	.+56     	; 0xcea <level_SM_Tick+0x5a>
 cb2:	1f c0       	rjmp	.+62     	; 0xcf2 <level_SM_Tick+0x62>
	{
		case lvl_start:
			lvl_state = lvl_init;
 cb4:	81 e0       	ldi	r24, 0x01	; 1
 cb6:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <lvl_state>
 cba:	2a c0       	rjmp	.+84     	; 0xd10 <level_SM_Tick+0x80>
			break;
		case lvl_init:
			lvl_state = lvl_wait;
 cbc:	82 e0       	ldi	r24, 0x02	; 2
 cbe:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <lvl_state>
			break;
 cc2:	34 c0       	rjmp	.+104    	; 0xd2c <level_SM_Tick+0x9c>
		case lvl_wait:
			lvl_state = D0 ? lvl_up : lvl_state;
 cc4:	90 ff       	sbrs	r25, 0
 cc6:	83 e0       	ldi	r24, 0x03	; 3
			lvl_state = D1 ? lvl_down : lvl_state;
 cc8:	50 e0       	ldi	r21, 0x00	; 0
 cca:	40 95       	com	r20
 ccc:	50 95       	com	r21
 cce:	41 fd       	sbrc	r20, 1
 cd0:	84 e0       	ldi	r24, 0x04	; 4
			lvl_state = D2 ? lvl_select : lvl_state;
 cd2:	30 e0       	ldi	r19, 0x00	; 0
 cd4:	20 95       	com	r18
 cd6:	30 95       	com	r19
 cd8:	22 fd       	sbrc	r18, 2
 cda:	85 e0       	ldi	r24, 0x05	; 5
 cdc:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <lvl_state>
			break;
 ce0:	08 c0       	rjmp	.+16     	; 0xcf2 <level_SM_Tick+0x62>
		case lvl_up:
			lvl_state = lvl_wait;
 ce2:	82 e0       	ldi	r24, 0x02	; 2
 ce4:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <lvl_state>
			break;
 ce8:	21 c0       	rjmp	.+66     	; 0xd2c <level_SM_Tick+0x9c>
		case lvl_down:
			lvl_state = lvl_wait;
 cea:	82 e0       	ldi	r24, 0x02	; 2
 cec:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <lvl_state>
			break;
 cf0:	1d c0       	rjmp	.+58     	; 0xd2c <level_SM_Tick+0x9c>
			break;
		default:
			break;
	}
	
	switch(lvl_state)
 cf2:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <lvl_state>
 cf6:	83 30       	cpi	r24, 0x03	; 3
 cf8:	19 f1       	breq	.+70     	; 0xd40 <level_SM_Tick+0xb0>
 cfa:	28 f4       	brcc	.+10     	; 0xd06 <level_SM_Tick+0x76>
 cfc:	81 30       	cpi	r24, 0x01	; 1
 cfe:	41 f0       	breq	.+16     	; 0xd10 <level_SM_Tick+0x80>
 d00:	82 30       	cpi	r24, 0x02	; 2
 d02:	89 f5       	brne	.+98     	; 0xd66 <level_SM_Tick+0xd6>
 d04:	13 c0       	rjmp	.+38     	; 0xd2c <level_SM_Tick+0x9c>
 d06:	84 30       	cpi	r24, 0x04	; 4
 d08:	19 f1       	breq	.+70     	; 0xd50 <level_SM_Tick+0xc0>
 d0a:	85 30       	cpi	r24, 0x05	; 5
 d0c:	49 f1       	breq	.+82     	; 0xd60 <level_SM_Tick+0xd0>
 d0e:	2b c0       	rjmp	.+86     	; 0xd66 <level_SM_Tick+0xd6>
	{
		case lvl_start:
			break;
		case lvl_init:
			column_val = 0x01;
 d10:	81 e0       	ldi	r24, 0x01	; 1
 d12:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <column_val.1993>
			column_sel = 0x7F;			
 d16:	8f e7       	ldi	r24, 0x7F	; 127
 d18:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <column_sel.1994>
			LCD_ClearScreen();
 d1c:	0c da       	rcall	.-3048   	; 0x136 <LCD_ClearScreen>
			LCD_DisplayString(1, "Level: ");
 d1e:	60 ea       	ldi	r22, 0xA0	; 160
 d20:	71 e0       	ldi	r23, 0x01	; 1
 d22:	81 e0       	ldi	r24, 0x01	; 1
 d24:	2b da       	rcall	.-2986   	; 0x17c <LCD_DisplayString>
			LCD_WriteData(1 + '0');
 d26:	81 e3       	ldi	r24, 0x31	; 49
 d28:	20 da       	rcall	.-3008   	; 0x16a <LCD_WriteData>
			break;
 d2a:	1d c0       	rjmp	.+58     	; 0xd66 <level_SM_Tick+0xd6>
		case lvl_wait:
			LCD_ClearScreen();
 d2c:	04 da       	rcall	.-3064   	; 0x136 <LCD_ClearScreen>
			LCD_DisplayString(1, "Level: ");
 d2e:	60 ea       	ldi	r22, 0xA0	; 160
 d30:	71 e0       	ldi	r23, 0x01	; 1
 d32:	81 e0       	ldi	r24, 0x01	; 1
 d34:	23 da       	rcall	.-3002   	; 0x17c <LCD_DisplayString>
			LCD_WriteData(column_val + '0');
 d36:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <column_val.1993>
 d3a:	80 5d       	subi	r24, 0xD0	; 208
 d3c:	16 da       	rcall	.-3028   	; 0x16a <LCD_WriteData>
 d3e:	13 c0       	rjmp	.+38     	; 0xd66 <level_SM_Tick+0xd6>
			break;
 d40:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <column_val.1993>
		case lvl_up:
			if (column_val < 0x02)
 d44:	82 30       	cpi	r24, 0x02	; 2
 d46:	78 f4       	brcc	.+30     	; 0xd66 <level_SM_Tick+0xd6>
 d48:	8f 5f       	subi	r24, 0xFF	; 255
			{
				column_val += 0x01;
 d4a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <column_val.1993>
 d4e:	0b c0       	rjmp	.+22     	; 0xd66 <level_SM_Tick+0xd6>
 d50:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <column_val.1993>
			}
			break;
		case lvl_down:
			if (column_val > 0x01)
 d54:	82 30       	cpi	r24, 0x02	; 2
 d56:	38 f0       	brcs	.+14     	; 0xd66 <level_SM_Tick+0xd6>
 d58:	81 50       	subi	r24, 0x01	; 1
			{
				column_val -= 0x01;
 d5a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <column_val.1993>
 d5e:	03 c0       	rjmp	.+6      	; 0xd66 <level_SM_Tick+0xd6>
 d60:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <column_val.1993>
			}
			break;
		case lvl_select:
			return column_val;
 d64:	08 95       	ret
 d66:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <column_val.1993>
			break;
		default:
			break;
	}
	
	PORTA = column_val; // PORTA displays column pattern
 d6a:	82 b9       	out	0x02, r24	; 2
 d6c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <column_sel.1994>
	PORTB = column_sel; // PORTB selects column to display pattern
 d70:	85 b9       	out	0x05, r24	; 5
 d72:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0x00;
 d74:	08 95       	ret

00000d76 <main>:
};
 d76:	64 e6       	ldi	r22, 0x64	; 100

int main(void)
{
	//Timer
	TimerSet(100);
 d78:	70 e0       	ldi	r23, 0x00	; 0
 d7a:	80 e0       	ldi	r24, 0x00	; 0
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	77 da       	rcall	.-2834   	; 0x26e <TimerSet>
	TimerOn();
 d80:	16 da       	rcall	.-3028   	; 0x1ae <TimerOn>
 d82:	8f ef       	ldi	r24, 0xFF	; 255
	
	//Ports
	DDRA = 0xFF; PORTA = 0x00;
 d84:	81 b9       	out	0x01, r24	; 1
 d86:	12 b8       	out	0x02, r1	; 2
 d88:	84 b9       	out	0x04, r24	; 4
	DDRB = 0xFF; PORTB = 0x00;
 d8a:	15 b8       	out	0x05, r1	; 5
 d8c:	87 b9       	out	0x07, r24	; 7
	
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 d8e:	18 b8       	out	0x08, r1	; 8
 d90:	89 ef       	ldi	r24, 0xF9	; 249
	DDRD = 0xF9; PORTD = 0x07; // LCD control lines
 d92:	8a b9       	out	0x0a, r24	; 10
 d94:	87 e0       	ldi	r24, 0x07	; 7
 d96:	8b b9       	out	0x0b, r24	; 11
 d98:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <sm1_state>
	//Local variables
	unsigned char levelSelected = 0x00;
	unsigned char buttonPressed = 0x00;
	
	//sm states
	sm1_state = sm1_start;
 d9c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <lvl_state>
	lvl_state = lvl_start;
 da0:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <lvl2_state>
	lvl2_state = lvl2_start;
	
	//LCD
	LCD_init();
 da4:	d3 d9       	rcall	.-3162   	; 0x14c <LCD_init>
 da6:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <levelTemp>
	
	while (1)
	{
		levelSelected = levelTemp;
		
		if (levelSelected == 0x00)
 daa:	81 11       	cpse	r24, r1
 dac:	04 c0       	rjmp	.+8      	; 0xdb6 <main+0x40>
		{
			levelTemp = level_SM_Tick();	
 dae:	70 df       	rcall	.-288    	; 0xc90 <level_SM_Tick>
 db0:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <levelTemp>
 db4:	07 c0       	rjmp	.+14     	; 0xdc4 <main+0x4e>
		}
		else if (levelSelected == 0x01)
 db6:	81 30       	cpi	r24, 0x01	; 1
 db8:	11 f4       	brne	.+4      	; 0xdbe <main+0x48>
		{	
			SM1_Tick();
 dba:	6a da       	rcall	.-2860   	; 0x290 <SM1_Tick>
 dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <main+0x4e>
		}
		else if (levelSelected == 0x02)
 dbe:	82 30       	cpi	r24, 0x02	; 2
 dc0:	09 f4       	brne	.+2      	; 0xdc4 <main+0x4e>
		{
			lvl2_Tick();
 dc2:	f4 db       	rcall	.-2072   	; 0x5ac <lvl2_Tick>
 dc4:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <TimerFlag>
		}
		while (!TimerFlag)
 dc8:	88 23       	and	r24, r24
 dca:	e1 f3       	breq	.-8      	; 0xdc4 <main+0x4e>
 dcc:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <TimerFlag>
		{
			
		}
		TimerFlag = 0;
 dd0:	ea cf       	rjmp	.-44     	; 0xda6 <main+0x30>

00000dd2 <__tablejump2__>:
			
	}
 dd2:	ee 0f       	add	r30, r30
 dd4:	ff 1f       	adc	r31, r31
 dd6:	00 24       	eor	r0, r0
 dd8:	00 1c       	adc	r0, r0
 dda:	0b be       	out	0x3b, r0	; 59
 ddc:	07 90       	elpm	r0, Z+
 dde:	f6 91       	elpm	r31, Z
 de0:	e0 2d       	mov	r30, r0
 de2:	09 94       	ijmp

00000de4 <__umulhisi3>:
 de4:	a2 9f       	mul	r26, r18
 de6:	b0 01       	movw	r22, r0
 de8:	b3 9f       	mul	r27, r19
 dea:	c0 01       	movw	r24, r0
 dec:	a3 9f       	mul	r26, r19
 dee:	70 0d       	add	r23, r0
 df0:	81 1d       	adc	r24, r1
 df2:	11 24       	eor	r1, r1
 df4:	91 1d       	adc	r25, r1
 df6:	b2 9f       	mul	r27, r18
 df8:	70 0d       	add	r23, r0
 dfa:	81 1d       	adc	r24, r1
 dfc:	11 24       	eor	r1, r1
 dfe:	91 1d       	adc	r25, r1
 e00:	08 95       	ret

00000e02 <do_rand>:
 e02:	8f 92       	push	r8
 e04:	9f 92       	push	r9
 e06:	af 92       	push	r10
 e08:	bf 92       	push	r11
 e0a:	cf 92       	push	r12
 e0c:	df 92       	push	r13
 e0e:	ef 92       	push	r14
 e10:	ff 92       	push	r15
 e12:	cf 93       	push	r28
 e14:	df 93       	push	r29
 e16:	ec 01       	movw	r28, r24
 e18:	68 81       	ld	r22, Y
 e1a:	79 81       	ldd	r23, Y+1	; 0x01
 e1c:	8a 81       	ldd	r24, Y+2	; 0x02
 e1e:	9b 81       	ldd	r25, Y+3	; 0x03
 e20:	61 15       	cp	r22, r1
 e22:	71 05       	cpc	r23, r1
 e24:	81 05       	cpc	r24, r1
 e26:	91 05       	cpc	r25, r1
 e28:	21 f4       	brne	.+8      	; 0xe32 <do_rand+0x30>
 e2a:	64 e2       	ldi	r22, 0x24	; 36
 e2c:	79 ed       	ldi	r23, 0xD9	; 217
 e2e:	8b e5       	ldi	r24, 0x5B	; 91
 e30:	97 e0       	ldi	r25, 0x07	; 7
 e32:	2d e1       	ldi	r18, 0x1D	; 29
 e34:	33 ef       	ldi	r19, 0xF3	; 243
 e36:	41 e0       	ldi	r20, 0x01	; 1
 e38:	50 e0       	ldi	r21, 0x00	; 0
 e3a:	38 d0       	rcall	.+112    	; 0xeac <__divmodsi4>
 e3c:	49 01       	movw	r8, r18
 e3e:	5a 01       	movw	r10, r20
 e40:	9b 01       	movw	r18, r22
 e42:	ac 01       	movw	r20, r24
 e44:	a7 ea       	ldi	r26, 0xA7	; 167
 e46:	b1 e4       	ldi	r27, 0x41	; 65
 e48:	4d d0       	rcall	.+154    	; 0xee4 <__muluhisi3>
 e4a:	6b 01       	movw	r12, r22
 e4c:	7c 01       	movw	r14, r24
 e4e:	ac ee       	ldi	r26, 0xEC	; 236
 e50:	b4 ef       	ldi	r27, 0xF4	; 244
 e52:	a5 01       	movw	r20, r10
 e54:	94 01       	movw	r18, r8
 e56:	52 d0       	rcall	.+164    	; 0xefc <__mulohisi3>
 e58:	dc 01       	movw	r26, r24
 e5a:	cb 01       	movw	r24, r22
 e5c:	8c 0d       	add	r24, r12
 e5e:	9d 1d       	adc	r25, r13
 e60:	ae 1d       	adc	r26, r14
 e62:	bf 1d       	adc	r27, r15
 e64:	b7 ff       	sbrs	r27, 7
 e66:	03 c0       	rjmp	.+6      	; 0xe6e <do_rand+0x6c>
 e68:	01 97       	sbiw	r24, 0x01	; 1
 e6a:	a1 09       	sbc	r26, r1
 e6c:	b0 48       	sbci	r27, 0x80	; 128
 e6e:	88 83       	st	Y, r24
 e70:	99 83       	std	Y+1, r25	; 0x01
 e72:	aa 83       	std	Y+2, r26	; 0x02
 e74:	bb 83       	std	Y+3, r27	; 0x03
 e76:	9f 77       	andi	r25, 0x7F	; 127
 e78:	df 91       	pop	r29
 e7a:	cf 91       	pop	r28
 e7c:	ff 90       	pop	r15
 e7e:	ef 90       	pop	r14
 e80:	df 90       	pop	r13
 e82:	cf 90       	pop	r12
 e84:	bf 90       	pop	r11
 e86:	af 90       	pop	r10
 e88:	9f 90       	pop	r9
 e8a:	8f 90       	pop	r8
 e8c:	08 95       	ret

00000e8e <rand_r>:
 e8e:	b9 cf       	rjmp	.-142    	; 0xe02 <do_rand>

00000e90 <rand>:
 e90:	80 e0       	ldi	r24, 0x00	; 0
 e92:	91 e0       	ldi	r25, 0x01	; 1
 e94:	b6 cf       	rjmp	.-148    	; 0xe02 <do_rand>

00000e96 <srand>:
 e96:	a0 e0       	ldi	r26, 0x00	; 0
 e98:	b0 e0       	ldi	r27, 0x00	; 0
 e9a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 e9e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 ea2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 ea6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 eaa:	08 95       	ret

00000eac <__divmodsi4>:
 eac:	05 2e       	mov	r0, r21
 eae:	97 fb       	bst	r25, 7
 eb0:	16 f4       	brtc	.+4      	; 0xeb6 <__divmodsi4+0xa>
 eb2:	00 94       	com	r0
 eb4:	0f d0       	rcall	.+30     	; 0xed4 <__negsi2>
 eb6:	57 fd       	sbrc	r21, 7
 eb8:	05 d0       	rcall	.+10     	; 0xec4 <__divmodsi4_neg2>
 eba:	24 d0       	rcall	.+72     	; 0xf04 <__udivmodsi4>
 ebc:	07 fc       	sbrc	r0, 7
 ebe:	02 d0       	rcall	.+4      	; 0xec4 <__divmodsi4_neg2>
 ec0:	46 f4       	brtc	.+16     	; 0xed2 <__divmodsi4_exit>
 ec2:	08 c0       	rjmp	.+16     	; 0xed4 <__negsi2>

00000ec4 <__divmodsi4_neg2>:
 ec4:	50 95       	com	r21
 ec6:	40 95       	com	r20
 ec8:	30 95       	com	r19
 eca:	21 95       	neg	r18
 ecc:	3f 4f       	sbci	r19, 0xFF	; 255
 ece:	4f 4f       	sbci	r20, 0xFF	; 255
 ed0:	5f 4f       	sbci	r21, 0xFF	; 255

00000ed2 <__divmodsi4_exit>:
 ed2:	08 95       	ret

00000ed4 <__negsi2>:
 ed4:	90 95       	com	r25
 ed6:	80 95       	com	r24
 ed8:	70 95       	com	r23
 eda:	61 95       	neg	r22
 edc:	7f 4f       	sbci	r23, 0xFF	; 255
 ede:	8f 4f       	sbci	r24, 0xFF	; 255
 ee0:	9f 4f       	sbci	r25, 0xFF	; 255
 ee2:	08 95       	ret

00000ee4 <__muluhisi3>:
 ee4:	7f df       	rcall	.-258    	; 0xde4 <__umulhisi3>
 ee6:	a5 9f       	mul	r26, r21
 ee8:	90 0d       	add	r25, r0
 eea:	b4 9f       	mul	r27, r20
 eec:	90 0d       	add	r25, r0
 eee:	a4 9f       	mul	r26, r20
 ef0:	80 0d       	add	r24, r0
 ef2:	91 1d       	adc	r25, r1
 ef4:	11 24       	eor	r1, r1
 ef6:	08 95       	ret

00000ef8 <__mulshisi3>:
 ef8:	b7 ff       	sbrs	r27, 7
 efa:	f4 cf       	rjmp	.-24     	; 0xee4 <__muluhisi3>

00000efc <__mulohisi3>:
 efc:	f3 df       	rcall	.-26     	; 0xee4 <__muluhisi3>
 efe:	82 1b       	sub	r24, r18
 f00:	93 0b       	sbc	r25, r19
 f02:	08 95       	ret

00000f04 <__udivmodsi4>:
 f04:	a1 e2       	ldi	r26, 0x21	; 33
 f06:	1a 2e       	mov	r1, r26
 f08:	aa 1b       	sub	r26, r26
 f0a:	bb 1b       	sub	r27, r27
 f0c:	fd 01       	movw	r30, r26
 f0e:	0d c0       	rjmp	.+26     	; 0xf2a <__udivmodsi4_ep>

00000f10 <__udivmodsi4_loop>:
 f10:	aa 1f       	adc	r26, r26
 f12:	bb 1f       	adc	r27, r27
 f14:	ee 1f       	adc	r30, r30
 f16:	ff 1f       	adc	r31, r31
 f18:	a2 17       	cp	r26, r18
 f1a:	b3 07       	cpc	r27, r19
 f1c:	e4 07       	cpc	r30, r20
 f1e:	f5 07       	cpc	r31, r21
 f20:	20 f0       	brcs	.+8      	; 0xf2a <__udivmodsi4_ep>
 f22:	a2 1b       	sub	r26, r18
 f24:	b3 0b       	sbc	r27, r19
 f26:	e4 0b       	sbc	r30, r20
 f28:	f5 0b       	sbc	r31, r21

00000f2a <__udivmodsi4_ep>:
 f2a:	66 1f       	adc	r22, r22
 f2c:	77 1f       	adc	r23, r23
 f2e:	88 1f       	adc	r24, r24
 f30:	99 1f       	adc	r25, r25
 f32:	1a 94       	dec	r1
 f34:	69 f7       	brne	.-38     	; 0xf10 <__udivmodsi4_loop>
 f36:	60 95       	com	r22
 f38:	70 95       	com	r23
 f3a:	80 95       	com	r24
 f3c:	90 95       	com	r25
 f3e:	9b 01       	movw	r18, r22
 f40:	ac 01       	movw	r20, r24
 f42:	bd 01       	movw	r22, r26
 f44:	cf 01       	movw	r24, r30
 f46:	08 95       	ret

00000f48 <_exit>:
 f48:	f8 94       	cli

00000f4a <__stop_program>:
 f4a:	ff cf       	rjmp	.-2      	; 0xf4a <__stop_program>
