
ATRAN059_LAB3_PART2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000912  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084d  00000000  00000000  00000b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000339  00000000  00000000  000013df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005b  00000000  00000000  00001bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	52 d0       	rcall	.+164    	; 0x14e <main>
  aa:	5a c0       	rjmp	.+180    	; 0x160 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Tick>:
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}

void Tick() {
	switch (state) {
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	a1 f0       	breq	.+40     	; 0xde <Tick+0x30>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <Tick+0x14>
  b8:	88 23       	and	r24, r24
  ba:	49 f0       	breq	.+18     	; 0xce <Tick+0x20>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	59 f0       	breq	.+22     	; 0xd6 <Tick+0x28>
  c0:	23 c0       	rjmp	.+70     	; 0x108 <Tick+0x5a>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	c9 f0       	breq	.+50     	; 0xf8 <Tick+0x4a>
  c6:	a0 f0       	brcs	.+40     	; 0xf0 <Tick+0x42>
  c8:	85 30       	cpi	r24, 0x05	; 5
  ca:	d1 f0       	breq	.+52     	; 0x100 <Tick+0x52>
  cc:	1d c0       	rjmp	.+58     	; 0x108 <Tick+0x5a>
		case Start:
			state = Init;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  d4:	26 c0       	rjmp	.+76     	; 0x122 <Tick+0x74>
			break;
		case Init:
			state = WhatPush;
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  dc:	08 95       	ret
		case WhatPush:
			state = GetBit(PINA, 0) ? Increment : state;
  de:	00 99       	sbic	0x00, 0	; 0
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			state = GetBit(PINA, 1) ? Decrement : state;
  e6:	01 99       	sbic	0x00, 1	; 0
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  ee:	0c c0       	rjmp	.+24     	; 0x108 <Tick+0x5a>
		case Increment:
			state = BothPushed;
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  f6:	26 c0       	rjmp	.+76     	; 0x144 <Tick+0x96>
		case Decrement:
			state = BothPushed;
  f8:	85 e0       	ldi	r24, 0x05	; 5
  fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  fe:	22 c0       	rjmp	.+68     	; 0x144 <Tick+0x96>
		case BothPushed:
			state = WhatPush;
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 106:	08 95       	ret
	}
	
	switch (state) {
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	61 f0       	breq	.+24     	; 0x128 <Tick+0x7a>
 110:	18 f4       	brcc	.+6      	; 0x118 <Tick+0x6a>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	d9 f4       	brne	.+54     	; 0x14c <Tick+0x9e>
 116:	05 c0       	rjmp	.+10     	; 0x122 <Tick+0x74>
 118:	84 30       	cpi	r24, 0x04	; 4
 11a:	69 f0       	breq	.+26     	; 0x136 <Tick+0x88>
 11c:	85 30       	cpi	r24, 0x05	; 5
 11e:	b1 f4       	brne	.+44     	; 0x14c <Tick+0x9e>
 120:	11 c0       	rjmp	.+34     	; 0x144 <Tick+0x96>
		case Start:
			break;
		case Init:
			PORTC = 0x07;
 122:	87 e0       	ldi	r24, 0x07	; 7
 124:	88 b9       	out	0x08, r24	; 8
			break;
 126:	08 95       	ret
		case WhatPush:
			break;
		case Increment:
			if (PORTC < 0x09)
 128:	88 b1       	in	r24, 0x08	; 8
 12a:	89 30       	cpi	r24, 0x09	; 9
 12c:	78 f4       	brcc	.+30     	; 0x14c <Tick+0x9e>
			{	PORTC = PORTC + 0x01;	}
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	88 b9       	out	0x08, r24	; 8
 134:	08 95       	ret
			break;
		case Decrement:
			if (PORTC > 0x01)
 136:	88 b1       	in	r24, 0x08	; 8
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	40 f0       	brcs	.+16     	; 0x14c <Tick+0x9e>
			{	PORTC = PORTC - 0x01;	}
 13c:	88 b1       	in	r24, 0x08	; 8
 13e:	81 50       	subi	r24, 0x01	; 1
 140:	88 b9       	out	0x08, r24	; 8
 142:	08 95       	ret
			break;
		case BothPushed:
			if (GetBit(PINA, 0) && GetBit(PINA, 1))
 144:	00 9b       	sbis	0x00, 0	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <Tick+0x9e>
 148:	01 99       	sbic	0x00, 1	; 0
			{
				PORTC = 0x00;
 14a:	18 b8       	out	0x08, r1	; 8
 14c:	08 95       	ret

0000014e <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 14e:	11 b8       	out	0x01, r1	; 1
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 154:	87 b9       	out	0x07, r24	; 7
 156:	18 b8       	out	0x08, r1	; 8
	
	state = Start;
 158:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	
    while(1)
    {
		Tick();
 15c:	a8 df       	rcall	.-176    	; 0xae <Tick>
 15e:	fe cf       	rjmp	.-4      	; 0x15c <main+0xe>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
