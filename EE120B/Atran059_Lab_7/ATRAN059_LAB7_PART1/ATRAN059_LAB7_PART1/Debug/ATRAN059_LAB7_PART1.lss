
ATRAN059_LAB7_PART1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000244  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800104  00800104  000002dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aaf  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000850  00000000  00000000  00000e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c1  00000000  00000000  0000169b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000539  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005b  00000000  00000000  00002019  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e4       	ldi	r30, 0x44	; 68
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a7 d0       	rcall	.+334    	; 0x212 <main>
  c4:	bd c0       	rjmp	.+378    	; 0x240 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
void TimerISR() {
	TimerFlag = 1;
}

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
  d8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
  dc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
  e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
  e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
}

void TimerOn() {
	// AVR timer/counter controller register TCCR1
	TCCR1B = 0x0B;// bit3 = 0: CTC mode (clear timer on compare)
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A = 125;	// Timer interrupt will be generated when TCNT1==OCR1A
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register
	TIMSK1 = 0x02; // bit1: OCIE1A -- enables compare match interrupt
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	//Initialize avr counter
	TCNT1=0;
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	_avr_timer_cntcurr = _avr_timer_M;
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 11e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 122:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 126:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	// TimerISR will be called every _avr_timer_cntcurr milliseconds

	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <Tick>:
}

	
void Tick() {
		switch (state) {
 132:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	41 f0       	breq	.+16     	; 0x14a <Tick+0x18>
 13a:	18 f0       	brcs	.+6      	; 0x142 <Tick+0x10>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	49 f0       	breq	.+18     	; 0x152 <Tick+0x20>
 140:	0c c0       	rjmp	.+24     	; 0x15a <Tick+0x28>
		case Start:
			state = Init;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 148:	15 c0       	rjmp	.+42     	; 0x174 <Tick+0x42>
			break;
		case Init:
			state = Wait;
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 150:	1f c0       	rjmp	.+62     	; 0x190 <Tick+0x5e>
			break;
		case Wait:
			state = threeLEDs = 0x00 ? SwitchOne : state; 
			state = threeLEDs == 0x01 ? SwitchTwo : state;
			state = threeLEDs == 0x02 ? SwitchThree: state;
			state = threeLEDs == 0x04 ? SwitchOne : state; 
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 158:	18 c0       	rjmp	.+48     	; 0x18a <Tick+0x58>
			break;
		default:
			break;
	}
	
	switch (state) {
 15a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	61 f0       	breq	.+24     	; 0x17a <Tick+0x48>
 162:	18 f4       	brcc	.+6      	; 0x16a <Tick+0x38>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	a1 f4       	brne	.+40     	; 0x190 <Tick+0x5e>
 168:	05 c0       	rjmp	.+10     	; 0x174 <Tick+0x42>
 16a:	84 30       	cpi	r24, 0x04	; 4
 16c:	51 f0       	breq	.+20     	; 0x182 <Tick+0x50>
 16e:	85 30       	cpi	r24, 0x05	; 5
 170:	79 f4       	brne	.+30     	; 0x190 <Tick+0x5e>
 172:	0b c0       	rjmp	.+22     	; 0x18a <Tick+0x58>
		case Start:
			break;
		case Init:
			threeLEDs = 0x00;
 174:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <threeLEDs>
			break;
 178:	0b c0       	rjmp	.+22     	; 0x190 <Tick+0x5e>
		case Wait:
			break;
		case SwitchOne:
			threeLEDs = 0x01;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <threeLEDs>
			break;
 180:	07 c0       	rjmp	.+14     	; 0x190 <Tick+0x5e>
		case SwitchTwo:
			threeLEDs = 0x02;
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <threeLEDs>
			break;
 188:	03 c0       	rjmp	.+6      	; 0x190 <Tick+0x5e>
		case SwitchThree:
			threeLEDs = 0x04;
 18a:	84 e0       	ldi	r24, 0x04	; 4
 18c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <threeLEDs>
		default:
			break;
	}
	
	// ---------------------BLINKINGLEDS START-------
		switch (state2) {
 190:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <state2>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	41 f0       	breq	.+16     	; 0x1a8 <Tick+0x76>
 198:	18 f0       	brcs	.+6      	; 0x1a0 <Tick+0x6e>
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	49 f0       	breq	.+18     	; 0x1b0 <Tick+0x7e>
 19e:	0e c0       	rjmp	.+28     	; 0x1bc <Tick+0x8a>
			case Start:
				state2 = Init;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <state2>
 1a6:	12 c0       	rjmp	.+36     	; 0x1cc <Tick+0x9a>
				break;
			case Init:
				state2 = Wait;
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <state2>
 1ae:	18 c0       	rjmp	.+48     	; 0x1e0 <Tick+0xae>
				break;
			case Wait:
				state2 = blinkingLED = 0x00 ? SwitchOne : state2;
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <blinkingLED>
				state2 = blinkingLED == 0x08 ? SwitchTwo : state2;
				state2 = blinkingLED == 0x01 ? SwitchOne: state2;
 1b6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <state2>
 1ba:	12 c0       	rjmp	.+36     	; 0x1e0 <Tick+0xae>
				break;
			default:
				break;
		}
		
		switch (state2) {
 1bc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <state2>
 1c0:	83 30       	cpi	r24, 0x03	; 3
 1c2:	39 f0       	breq	.+14     	; 0x1d2 <Tick+0xa0>
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	49 f0       	breq	.+18     	; 0x1da <Tick+0xa8>
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	51 f4       	brne	.+20     	; 0x1e0 <Tick+0xae>
			case Start:
				break;
			case Init:
				blinkingLED = 0x00;
 1cc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <blinkingLED>
				break;
 1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <Tick+0xae>
			case Wait:
				break;
			case SwitchOne:
				blinkingLED = 0x08;
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <blinkingLED>
				break;
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <Tick+0xae>
			case SwitchTwo:
				threeLEDs = 0x01;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <threeLEDs>
		}
		
	//---------------COMBINELEDS START----

	
				switch (state3) {
 1e0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <state3>
 1e4:	81 11       	cpse	r24, r1
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <Tick+0xbe>
					case Start:
						state3 = Init;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state3>
 1ee:	08 c0       	rjmp	.+16     	; 0x200 <Tick+0xce>
					case Init:
						break;
					default:
						break;
				}
				switch (state3) {
 1f0:	88 23       	and	r24, r24
 1f2:	19 f0       	breq	.+6      	; 0x1fa <Tick+0xc8>
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	61 f4       	brne	.+24     	; 0x210 <Tick+0xde>
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <Tick+0xce>
					case Start:
						combineLED = 0x00;
 1fa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <combineLED>
						break;
 1fe:	08 95       	ret
					case Init:
						combineLED = threeLEDs | blinkingLED;
 200:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <threeLEDs>
 204:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <blinkingLED>
 208:	89 2b       	or	r24, r25
 20a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <combineLED>
						PORTB = combineLED;
 20e:	85 b9       	out	0x05, r24	; 5
 210:	08 95       	ret

00000212 <main>:
}


int main(void)
{
	DDRB = 0xFF; PORTB = 0x00;
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	84 b9       	out	0x04, r24	; 4
 216:	15 b8       	out	0x05, r1	; 5
	unsigned char threeLEDs = 0x00;
	unsigned char blinkingLED = 0x00;
	unsigned char combineLED = 0x00;
	
	state = Start;
 218:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <state>
	state2 = Start;
 21c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <state2>
	state3 = Start;
 220:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state3>
	
	TimerSet(500);
 224:	64 ef       	ldi	r22, 0xF4	; 244
 226:	71 e0       	ldi	r23, 0x01	; 1
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	4d df       	rcall	.-358    	; 0xc8 <TimerSet>
	TimerOn();
 22e:	5d df       	rcall	.-326    	; 0xea <TimerOn>
	
    while(1)
    {
        Tick();
 230:	80 df       	rcall	.-256    	; 0x132 <Tick>
 232:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
		while (!TimerFlag) {}
 236:	88 23       	and	r24, r24
 238:	e1 f3       	breq	.-8      	; 0x232 <main+0x20>
 23a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
		TimerFlag = 0;
 23e:	f8 cf       	rjmp	.-16     	; 0x230 <main+0x1e>

00000240 <_exit>:
    }
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
