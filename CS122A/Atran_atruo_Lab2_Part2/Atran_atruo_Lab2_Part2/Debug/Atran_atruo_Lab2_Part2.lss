
Atran_atruo_Lab2_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000510  000005a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000510  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800106  00800106  000005aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d56  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000983  00000000  00000000  000013fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062a  00000000  00000000  00001d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000023a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000571  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047c  00000000  00000000  00002a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002f05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a1 c1       	rjmp	.+834    	; 0x378 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 31       	cpi	r26, 0x13	; 19
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	dd d1       	rcall	.+954    	; 0x47e <main>
  c4:	23 c2       	rjmp	.+1094   	; 0x50c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 106:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10a:	08 95       	ret

0000010c <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	29 f4       	brne	.+10     	; 0x11a <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 110:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 114:	88 23       	and	r24, r24
 116:	74 f0       	brlt	.+28     	; 0x134 <USART_Flush+0x28>
 118:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 11a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 11e:	88 23       	and	r24, r24
 120:	8c f4       	brge	.+34     	; 0x144 <USART_Flush+0x38>
 122:	a6 ec       	ldi	r26, 0xC6	; 198
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e0 ec       	ldi	r30, 0xC0	; 192
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8c 91       	ld	r24, X
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	e4 f3       	brlt	.-8      	; 0x12a <USART_Flush+0x1e>
 132:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 134:	ae ec       	ldi	r26, 0xCE	; 206
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e8 ec       	ldi	r30, 0xC8	; 200
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	8c 91       	ld	r24, X
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	e4 f3       	brlt	.-8      	; 0x13c <USART_Flush+0x30>
 144:	08 95       	ret

00000146 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 146:	61 30       	cpi	r22, 0x01	; 1
 148:	41 f0       	breq	.+16     	; 0x15a <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 14a:	e0 ec       	ldi	r30, 0xC0	; 192
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	90 81       	ld	r25, Z
 150:	95 ff       	sbrs	r25, 5
 152:	fd cf       	rjmp	.-6      	; 0x14e <USART_Send+0x8>
		UDR0 = sendMe;
 154:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 158:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 15a:	e8 ec       	ldi	r30, 0xC8	; 200
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	90 81       	ld	r25, Z
 160:	95 ff       	sbrs	r25, 5
 162:	fd cf       	rjmp	.-6      	; 0x15e <USART_Send+0x18>
		UDR1 = sendMe;
 164:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 168:	08 95       	ret

0000016a <tick>:
	return state;
}

int tick(int state) {
	unsigned char B0 = ~PINB & 0x01;
	if (B0 == 0x01)
 16a:	18 99       	sbic	0x03, 0	; 3
 16c:	0d c0       	rjmp	.+26     	; 0x188 <tick+0x1e>
	{
		PORTC_TEMP = 0x01;
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <PORTC_TEMP>
		isLeader = 1;
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <isLeader+0x1>
 17c:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <isLeader>
		isLeader = 0;
	}
	if (isLeader == 1)
	{
	
		switch(state) {
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	02 97       	sbiw	r24, 0x02	; 2
 184:	40 f0       	brcs	.+16     	; 0x196 <tick+0x2c>
 186:	1e c0       	rjmp	.+60     	; 0x1c4 <tick+0x5a>
	{
		PORTC_TEMP = 0x01;
		isLeader = 1;
	}
	else {
		PORTC_TEMP = 0x00;
 188:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <PORTC_TEMP>
		isLeader = 0;
 18c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <isLeader+0x1>
 190:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <isLeader>
 194:	08 95       	ret
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 196:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
		switch(state)
		{
			case -1:
			break;
			case Send:
				if (USART_IsSendReady(1)) {
 19a:	85 ff       	sbrs	r24, 5
 19c:	16 c0       	rjmp	.+44     	; 0x1ca <tick+0x60>
					USART_Send(led_state, 1);
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1a4:	d0 df       	rcall	.-96     	; 0x146 <USART_Send>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 1a6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
					if (USART_HasTransmitted(1)) {
 1aa:	86 ff       	sbrs	r24, 6
 1ac:	11 c0       	rjmp	.+34     	; 0x1d0 <tick+0x66>
						PORTA = led_state;
 1ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b2:	82 b9       	out	0x02, r24	; 2
						led_state = ~led_state;
 1b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b8:	80 95       	com	r24
 1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <tick+0x6a>
		isLeader = 0;
	}
	if (isLeader == 1)
	{
	
		switch(state) {
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	9f ef       	ldi	r25, 0xFF	; 255
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <tick+0x6a>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <tick+0x6a>
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
			break;
			default:
				state = -1;
		}
	
			PORTC = PORTC_TEMP;
 1d4:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <PORTC_TEMP>
 1d8:	28 b9       	out	0x08, r18	; 8
		}
	return state;
}
 1da:	08 95       	ret

000001dc <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	41 f0       	breq	.+16     	; 0x1f0 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 1e0:	e0 ec       	ldi	r30, 0xC0	; 192
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	88 23       	and	r24, r24
 1e8:	ec f7       	brge	.-6      	; 0x1e4 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 1ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1ee:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 1f0:	e8 ec       	ldi	r30, 0xC8	; 200
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	88 23       	and	r24, r24
 1f8:	ec f7       	brge	.-6      	; 0x1f4 <USART_Receive+0x18>
		return UDR1;
 1fa:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 1fe:	08 95       	ret

00000200 <TickFct_Receive>:
enum LEADER_STATES {Send};
	
int TickFct_Receive(int state)
{
	unsigned char B0 = ~PINB & 0x01;
	if (B0 == 0x01)
 200:	18 99       	sbic	0x03, 0	; 3
 202:	0a c0       	rjmp	.+20     	; 0x218 <TickFct_Receive+0x18>
	{
		PORTC_TEMP = 0x01;
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <PORTC_TEMP>
		isLeader = 1;
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <isLeader+0x1>
 212:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <isLeader>
 216:	08 95       	ret
	}
	else {
		PORTC_TEMP = 0x00;
 218:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <PORTC_TEMP>
		isLeader = 0;
 21c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <isLeader+0x1>
 220:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <isLeader>
	}
	if (isLeader ==  0)
	{
		switch (state)
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	91 05       	cpc	r25, r1
 228:	11 f1       	breq	.+68     	; 0x26e <TickFct_Receive+0x6e>
 22a:	3c f4       	brge	.+14     	; 0x23a <TickFct_Receive+0x3a>
 22c:	8f 3f       	cpi	r24, 0xFF	; 255
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	92 07       	cpc	r25, r18
 232:	c1 f0       	breq	.+48     	; 0x264 <TickFct_Receive+0x64>
 234:	89 2b       	or	r24, r25
 236:	39 f0       	breq	.+14     	; 0x246 <TickFct_Receive+0x46>
 238:	2d c0       	rjmp	.+90     	; 0x294 <TickFct_Receive+0x94>
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	91 05       	cpc	r25, r1
 23e:	41 f0       	breq	.+16     	; 0x250 <TickFct_Receive+0x50>
 240:	03 97       	sbiw	r24, 0x03	; 3
 242:	59 f0       	breq	.+22     	; 0x25a <TickFct_Receive+0x5a>
 244:	27 c0       	rjmp	.+78     	; 0x294 <TickFct_Receive+0x94>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 246:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
			break;
			case Init:
				state = Wait;
			break;
			case Wait:
				if (USART_HasReceived(0))
 24a:	88 23       	and	r24, r24
 24c:	ac f0       	brlt	.+42     	; 0x278 <TickFct_Receive+0x78>
 24e:	1d c0       	rjmp	.+58     	; 0x28a <TickFct_Receive+0x8a>
 250:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				{
					state = LED_Off;
				}
			break;
			case LED_On:
				if (!USART_HasReceived(0))
 254:	88 23       	and	r24, r24
 256:	5c f4       	brge	.+22     	; 0x26e <TickFct_Receive+0x6e>
 258:	0f c0       	rjmp	.+30     	; 0x278 <TickFct_Receive+0x78>
 25a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				{
					state = Wait;
				}
			break;
			case LED_Off:
				if (USART_HasReceived(0))
 25e:	88 23       	and	r24, r24
 260:	5c f0       	brlt	.+22     	; 0x278 <TickFct_Receive+0x78>
 262:	13 c0       	rjmp	.+38     	; 0x28a <TickFct_Receive+0x8a>
		switch(state)
		{
			case -1:
			break;
			case Init:
				PORTA_TEMP = 0x00;
 264:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <PORTA_TEMP>
			break;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	15 c0       	rjmp	.+42     	; 0x298 <TickFct_Receive+0x98>
			case Wait:
				USART_Flush(0);
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	4d df       	rcall	.-358    	; 0x10c <USART_Flush>
			break;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	10 c0       	rjmp	.+32     	; 0x298 <TickFct_Receive+0x98>
			case LED_On:
				temp = USART_Receive(0);
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	b0 df       	rcall	.-160    	; 0x1dc <USART_Receive>
 27c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <temp>
				PORTA_TEMP = temp;
 280:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <PORTA_TEMP>
				//PORTA = 0xFF;
			break;
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	07 c0       	rjmp	.+14     	; 0x298 <TickFct_Receive+0x98>
			case LED_Off:
				PORTA_TEMP = 0x00;
 28a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <PORTA_TEMP>
			break;
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <TickFct_Receive+0x98>
		PORTC_TEMP = 0x00;
		isLeader = 0;
	}
	if (isLeader ==  0)
	{
		switch (state)
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	9f ef       	ldi	r25, 0xFF	; 255
			break;
			default:
				state = -1;
		}
	
		PORTA = PORTA_TEMP;
 298:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <PORTA_TEMP>
 29c:	22 b9       	out	0x02, r18	; 2
		PORTC = PORTC_TEMP;
 29e:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <PORTC_TEMP>
 2a2:	28 b9       	out	0x08, r18	; 8
	}
	return state;
}
 2a4:	08 95       	ret

000002a6 <TimerISR>:

task* tasks;

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
 2a6:	cf 92       	push	r12
 2a8:	df 92       	push	r13
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
    static unsigned char i;
    for (i = 0; i < tasksNum; i++) { 
 2b4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 2b8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tasksNum>
 2bc:	88 23       	and	r24, r24
 2be:	09 f4       	brne	.+2      	; 0x2c2 <TimerISR+0x1c>
 2c0:	53 c0       	rjmp	.+166    	; 0x368 <TimerISR+0xc2>
 2c2:	80 e0       	ldi	r24, 0x00	; 0
        if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
 2c4:	1b e0       	ldi	r17, 0x0B	; 11
 2c6:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <tasks>
 2ca:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <tasks+0x1>
 2ce:	18 9f       	mul	r17, r24
 2d0:	c0 0d       	add	r28, r0
 2d2:	d1 1d       	adc	r29, r1
 2d4:	11 24       	eor	r1, r1
 2d6:	4d 81       	ldd	r20, Y+5	; 0x05
 2d8:	5e 81       	ldd	r21, Y+6	; 0x06
 2da:	6f 81       	ldd	r22, Y+7	; 0x07
 2dc:	78 85       	ldd	r23, Y+8	; 0x08
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	9a 81       	ldd	r25, Y+2	; 0x02
 2e2:	ab 81       	ldd	r26, Y+3	; 0x03
 2e4:	bc 81       	ldd	r27, Y+4	; 0x04
 2e6:	48 17       	cp	r20, r24
 2e8:	59 07       	cpc	r21, r25
 2ea:	6a 07       	cpc	r22, r26
 2ec:	7b 07       	cpc	r23, r27
 2ee:	b0 f0       	brcs	.+44     	; 0x31c <TimerISR+0x76>
            tasks[i].state = tasks[i].TickFct(tasks[i].state);
 2f0:	88 81       	ld	r24, Y
 2f2:	e9 85       	ldd	r30, Y+9	; 0x09
 2f4:	fa 85       	ldd	r31, Y+10	; 0x0a
 2f6:	08 2e       	mov	r0, r24
 2f8:	00 0c       	add	r0, r0
 2fa:	99 0b       	sbc	r25, r25
 2fc:	09 95       	icall
 2fe:	88 83       	st	Y, r24
            tasks[i].elapsedTime = 0;
 300:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 304:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <tasks>
 308:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <tasks+0x1>
 30c:	18 9f       	mul	r17, r24
 30e:	e0 0d       	add	r30, r0
 310:	f1 1d       	adc	r31, r1
 312:	11 24       	eor	r1, r1
 314:	15 82       	std	Z+5, r1	; 0x05
 316:	16 82       	std	Z+6, r1	; 0x06
 318:	17 82       	std	Z+7, r1	; 0x07
 31a:	10 86       	std	Z+8, r1	; 0x08
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
 31c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 320:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <tasks>
 324:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <tasks+0x1>
 328:	18 9f       	mul	r17, r24
 32a:	e0 0d       	add	r30, r0
 32c:	f1 1d       	adc	r31, r1
 32e:	11 24       	eor	r1, r1
 330:	c5 80       	ldd	r12, Z+5	; 0x05
 332:	d6 80       	ldd	r13, Z+6	; 0x06
 334:	e7 80       	ldd	r14, Z+7	; 0x07
 336:	f0 84       	ldd	r15, Z+8	; 0x08
 338:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <tasksPeriodGCD>
 33c:	50 91 02 01 	lds	r21, 0x0102	; 0x800102 <tasksPeriodGCD+0x1>
 340:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <tasksPeriodGCD+0x2>
 344:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <tasksPeriodGCD+0x3>
 348:	4c 0d       	add	r20, r12
 34a:	5d 1d       	adc	r21, r13
 34c:	6e 1d       	adc	r22, r14
 34e:	7f 1d       	adc	r23, r15
 350:	45 83       	std	Z+5, r20	; 0x05
 352:	56 83       	std	Z+6, r21	; 0x06
 354:	67 83       	std	Z+7, r22	; 0x07
 356:	70 87       	std	Z+8, r23	; 0x08

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
    static unsigned char i;
    for (i = 0; i < tasksNum; i++) { 
 358:	8f 5f       	subi	r24, 0xFF	; 255
 35a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 35e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tasksNum>
 362:	89 17       	cp	r24, r25
 364:	08 f4       	brcc	.+2      	; 0x368 <TimerISR+0xc2>
 366:	af cf       	rjmp	.-162    	; 0x2c6 <TimerISR+0x20>
            tasks[i].state = tasks[i].TickFct(tasks[i].state);
            tasks[i].elapsedTime = 0;
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
    }
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	ff 90       	pop	r15
 370:	ef 90       	pop	r14
 372:	df 90       	pop	r13
 374:	cf 90       	pop	r12
 376:	08 95       	ret

00000378 <__vector_13>:

///////////////////////////////////////////////////////////////////////////////
// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	0b b6       	in	r0, 0x3b	; 59
 384:	0f 92       	push	r0
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	4f 93       	push	r20
 38c:	5f 93       	push	r21
 38e:	6f 93       	push	r22
 390:	7f 93       	push	r23
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	af 93       	push	r26
 398:	bf 93       	push	r27
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	tasksPeriodCntDown--; 			// Count down to 0 rather than up to TOP
 39e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tasksPeriodCntDown>
 3a2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tasksPeriodCntDown+0x1>
 3a6:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <tasksPeriodCntDown+0x2>
 3aa:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <tasksPeriodCntDown+0x3>
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	a1 09       	sbc	r26, r1
 3b2:	b1 09       	sbc	r27, r1
 3b4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tasksPeriodCntDown>
 3b8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tasksPeriodCntDown+0x1>
 3bc:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <tasksPeriodCntDown+0x2>
 3c0:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <tasksPeriodCntDown+0x3>
	if (tasksPeriodCntDown == 0) { 	// results in a more efficient compare
 3c4:	89 2b       	or	r24, r25
 3c6:	8a 2b       	or	r24, r26
 3c8:	8b 2b       	or	r24, r27
 3ca:	89 f4       	brne	.+34     	; 0x3ee <__vector_13+0x76>
		TimerISR(); 				// Call the ISR that the user uses
 3cc:	6c df       	rcall	.-296    	; 0x2a6 <TimerISR>
		tasksPeriodCntDown = tasksPeriodGCD;
 3ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasksPeriodGCD>
 3d2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <tasksPeriodGCD+0x1>
 3d6:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <tasksPeriodGCD+0x2>
 3da:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <tasksPeriodGCD+0x3>
 3de:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tasksPeriodCntDown>
 3e2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tasksPeriodCntDown+0x1>
 3e6:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <tasksPeriodCntDown+0x2>
 3ea:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <tasksPeriodCntDown+0x3>
	}
}
 3ee:	ff 91       	pop	r31
 3f0:	ef 91       	pop	r30
 3f2:	bf 91       	pop	r27
 3f4:	af 91       	pop	r26
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	7f 91       	pop	r23
 3fc:	6f 91       	pop	r22
 3fe:	5f 91       	pop	r21
 400:	4f 91       	pop	r20
 402:	3f 91       	pop	r19
 404:	2f 91       	pop	r18
 406:	0f 90       	pop	r0
 408:	0b be       	out	0x3b, r0	; 59
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <TimerSet>:

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
 414:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <tasksPeriodGCD>
 418:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <tasksPeriodGCD+0x1>
 41c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tasksPeriodGCD+0x2>
 420:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <tasksPeriodGCD+0x3>
	tasksPeriodCntDown = tasksPeriodGCD;
 424:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <tasksPeriodCntDown>
 428:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <tasksPeriodCntDown+0x1>
 42c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tasksPeriodCntDown+0x2>
 430:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tasksPeriodCntDown+0x3>
 434:	08 95       	ret

00000436 <TimerOn>:
}

///////////////////////////////////////////////////////////////////////////////
void TimerOn() {
	// AVR timer/counter controller register TCCR1
	TCCR1B 	= (1<<WGM12)|(1<<CS11)|(1<<CS10);
 436:	8b e0       	ldi	r24, 0x0B	; 11
 438:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
					// Thus TCCR1B = 00001011 or 0x0B
					// So, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
					// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A 	= 125;	// Timer interrupt will be generated when TCNT1==OCR1A
 43c:	8d e7       	ldi	r24, 0x7D	; 125
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 444:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
					// So when TCNT1 register equals 125,
					// 1 ms has passed. Thus, we compare to 125.
					// AVR timer interrupt mask register

#if defined (__AVR_ATmega1284__)
    TIMSK1 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega1284
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
#else
    TIMSK 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega32
#endif

	// Initialize avr counter
	TCNT1 = 0;
 44e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 452:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	// TimerISR will be called every tasksPeriodCntDown milliseconds
	tasksPeriodCntDown = tasksPeriodGCD;
 456:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasksPeriodGCD>
 45a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <tasksPeriodGCD+0x1>
 45e:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <tasksPeriodGCD+0x2>
 462:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <tasksPeriodGCD+0x3>
 466:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tasksPeriodCntDown>
 46a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tasksPeriodCntDown+0x1>
 46e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <tasksPeriodCntDown+0x2>
 472:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <tasksPeriodCntDown+0x3>

	// Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 476:	8f b7       	in	r24, 0x3f	; 63
 478:	80 68       	ori	r24, 0x80	; 128
 47a:	8f bf       	out	0x3f, r24	; 63
 47c:	08 95       	ret

0000047e <main>:
	return state;
}


int main(void)
{
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	66 97       	sbiw	r28, 0x16	; 22
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
	//initialize ports
	DDRA = 0xFF; PORTA = 0x00;
 492:	1f ef       	ldi	r17, 0xFF	; 255
 494:	11 b9       	out	0x01, r17	; 1
 496:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00; PORTB = 0xFF;
 498:	14 b8       	out	0x04, r1	; 4
 49a:	15 b9       	out	0x05, r17	; 5
	DDRC = 0xFF; PORTC = 0x00;
 49c:	17 b9       	out	0x07, r17	; 7
 49e:	18 b8       	out	0x08, r1	; 8
	
	//initialize uSART
    initUSART(0);
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	12 de       	rcall	.-988    	; 0xc8 <initUSART>
	initUSART(1);
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	10 de       	rcall	.-992    	; 0xc8 <initUSART>
	
	tasksNum = 2;
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tasksNum>
	task tsks[2];
	tasks = tsks;
 4ae:	ce 01       	movw	r24, r28
 4b0:	01 96       	adiw	r24, 0x01	; 1
 4b2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <tasks+0x1>
 4b6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tasks>
	
	//define tasks
	unsigned char i = 0;
	tasks[i].state = -1;
 4ba:	19 83       	std	Y+1, r17	; 0x01
	tasks[i].period = 600;
 4bc:	88 e5       	ldi	r24, 0x58	; 88
 4be:	92 e0       	ldi	r25, 0x02	; 2
 4c0:	a0 e0       	ldi	r26, 0x00	; 0
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	8a 83       	std	Y+2, r24	; 0x02
 4c6:	9b 83       	std	Y+3, r25	; 0x03
 4c8:	ac 83       	std	Y+4, r26	; 0x04
 4ca:	bd 83       	std	Y+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 4cc:	8e 83       	std	Y+6, r24	; 0x06
 4ce:	9f 83       	std	Y+7, r25	; 0x07
 4d0:	a8 87       	std	Y+8, r26	; 0x08
 4d2:	b9 87       	std	Y+9, r27	; 0x09
	tasks[i].TickFct = &TickFct_Receive;
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	9b 87       	std	Y+11, r25	; 0x0b
 4da:	8a 87       	std	Y+10, r24	; 0x0a
	
	++i;
	
	tasks[i].state = -1;
 4dc:	1c 87       	std	Y+12, r17	; 0x0c
	tasks[i].period = 1000;
 4de:	88 ee       	ldi	r24, 0xE8	; 232
 4e0:	93 e0       	ldi	r25, 0x03	; 3
 4e2:	a0 e0       	ldi	r26, 0x00	; 0
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	8d 87       	std	Y+13, r24	; 0x0d
 4e8:	9e 87       	std	Y+14, r25	; 0x0e
 4ea:	af 87       	std	Y+15, r26	; 0x0f
 4ec:	b8 8b       	std	Y+16, r27	; 0x10
	tasks[i].elapsedTime = tasks[i].period;
 4ee:	89 8b       	std	Y+17, r24	; 0x11
 4f0:	9a 8b       	std	Y+18, r25	; 0x12
 4f2:	ab 8b       	std	Y+19, r26	; 0x13
 4f4:	bc 8b       	std	Y+20, r27	; 0x14
	tasks[i].TickFct = &tick;
 4f6:	85 eb       	ldi	r24, 0xB5	; 181
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	9e 8b       	std	Y+22, r25	; 0x16
 4fc:	8d 8b       	std	Y+21, r24	; 0x15
	
	const unsigned int period_sm_1 = 100;
	TimerSet(period_sm_1);
 4fe:	64 e6       	ldi	r22, 0x64	; 100
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 506:	86 df       	rcall	.-244    	; 0x414 <TimerSet>
 508:	96 df       	rcall	.-212    	; 0x436 <TimerOn>
 50a:	ff cf       	rjmp	.-2      	; 0x50a <main+0x8c>

0000050c <_exit>:
 50c:	f8 94       	cli

0000050e <__stop_program>:
 50e:	ff cf       	rjmp	.-2      	; 0x50e <__stop_program>
