
LED_TEST_@.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000734  000007c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000734  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080011c  0080011c  000007e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d4a  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000930  00000000  00000000  000015fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ea  00000000  00000000  00001f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00002718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067f  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038a  00000000  00000000  00002e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000031fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	60 c0       	rjmp	.+192    	; 0xc2 <__ctors_end>
   2:	00 00       	nop
   4:	7b c0       	rjmp	.+246    	; 0xfc <__bad_interrupt>
   6:	00 00       	nop
   8:	79 c0       	rjmp	.+242    	; 0xfc <__bad_interrupt>
   a:	00 00       	nop
   c:	77 c0       	rjmp	.+238    	; 0xfc <__bad_interrupt>
   e:	00 00       	nop
  10:	75 c0       	rjmp	.+234    	; 0xfc <__bad_interrupt>
  12:	00 00       	nop
  14:	73 c0       	rjmp	.+230    	; 0xfc <__bad_interrupt>
  16:	00 00       	nop
  18:	71 c0       	rjmp	.+226    	; 0xfc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6f c0       	rjmp	.+222    	; 0xfc <__bad_interrupt>
  1e:	00 00       	nop
  20:	6d c0       	rjmp	.+218    	; 0xfc <__bad_interrupt>
  22:	00 00       	nop
  24:	6b c0       	rjmp	.+214    	; 0xfc <__bad_interrupt>
  26:	00 00       	nop
  28:	69 c0       	rjmp	.+210    	; 0xfc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	67 c0       	rjmp	.+206    	; 0xfc <__bad_interrupt>
  2e:	00 00       	nop
  30:	65 c0       	rjmp	.+202    	; 0xfc <__bad_interrupt>
  32:	00 00       	nop
  34:	88 c0       	rjmp	.+272    	; 0x146 <__vector_13>
  36:	00 00       	nop
  38:	61 c0       	rjmp	.+194    	; 0xfc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5f c0       	rjmp	.+190    	; 0xfc <__bad_interrupt>
  3e:	00 00       	nop
  40:	5d c0       	rjmp	.+186    	; 0xfc <__bad_interrupt>
  42:	00 00       	nop
  44:	5b c0       	rjmp	.+182    	; 0xfc <__bad_interrupt>
  46:	00 00       	nop
  48:	59 c0       	rjmp	.+178    	; 0xfc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	57 c0       	rjmp	.+174    	; 0xfc <__bad_interrupt>
  4e:	00 00       	nop
  50:	55 c0       	rjmp	.+170    	; 0xfc <__bad_interrupt>
  52:	00 00       	nop
  54:	53 c0       	rjmp	.+166    	; 0xfc <__bad_interrupt>
  56:	00 00       	nop
  58:	51 c0       	rjmp	.+162    	; 0xfc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4f c0       	rjmp	.+158    	; 0xfc <__bad_interrupt>
  5e:	00 00       	nop
  60:	4d c0       	rjmp	.+154    	; 0xfc <__bad_interrupt>
  62:	00 00       	nop
  64:	4b c0       	rjmp	.+150    	; 0xfc <__bad_interrupt>
  66:	00 00       	nop
  68:	49 c0       	rjmp	.+146    	; 0xfc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	47 c0       	rjmp	.+142    	; 0xfc <__bad_interrupt>
  6e:	00 00       	nop
  70:	45 c0       	rjmp	.+138    	; 0xfc <__bad_interrupt>
  72:	00 00       	nop
  74:	43 c0       	rjmp	.+134    	; 0xfc <__bad_interrupt>
  76:	00 00       	nop
  78:	41 c0       	rjmp	.+130    	; 0xfc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3f c0       	rjmp	.+126    	; 0xfc <__bad_interrupt>
  7e:	00 00       	nop
  80:	3d c0       	rjmp	.+122    	; 0xfc <__bad_interrupt>
  82:	00 00       	nop
  84:	3b c0       	rjmp	.+118    	; 0xfc <__bad_interrupt>
  86:	00 00       	nop
  88:	39 c0       	rjmp	.+114    	; 0xfc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	03 01       	movw	r0, r6
  8e:	07 01       	movw	r0, r14
  90:	0b 01       	movw	r0, r22
  92:	0f 01       	movw	r0, r30
  94:	17 01       	movw	r2, r14
  96:	23 01       	movw	r4, r6
  98:	27 01       	movw	r4, r14
  9a:	2e 01       	movw	r4, r28
  9c:	ba 01       	movw	r22, r20
  9e:	be 01       	movw	r22, r28
  a0:	20 02       	muls	r18, r16
  a2:	c2 01       	movw	r24, r4
  a4:	d8 01       	movw	r26, r16
  a6:	ee 01       	movw	r28, r28
  a8:	04 02       	muls	r16, r20
  aa:	0d 02       	muls	r16, r29
  ac:	19 02       	muls	r17, r25
  ae:	1d 02       	muls	r17, r29
  b0:	31 02       	muls	r19, r17
  b2:	ec 02       	muls	r30, r28
  b4:	42 02       	muls	r20, r18
  b6:	5e 02       	muls	r21, r30
  b8:	7f 02       	muls	r23, r31
  ba:	a1 02       	muls	r26, r17
  bc:	ec 02       	muls	r30, r28
  be:	d6 02       	muls	r29, r22
  c0:	e7 02       	muls	r30, r23

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d0 e4       	ldi	r29, 0x40	; 64
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e4 e3       	ldi	r30, 0x34	; 52
  d6:	f7 e0       	ldi	r31, 0x07	; 7
  d8:	00 e0       	ldi	r16, 0x00	; 0
  da:	0b bf       	out	0x3b, r16	; 59
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x14>
  de:	07 90       	elpm	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	ac 31       	cpi	r26, 0x1C	; 28
  e4:	b1 07       	cpc	r27, r17
  e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0x10>

000000e8 <__do_clear_bss>:
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	ac e1       	ldi	r26, 0x1C	; 28
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
  f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
  f2:	a5 32       	cpi	r26, 0x25	; 37
  f4:	b2 07       	cpc	r27, r18
  f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>
  f8:	e9 d2       	rcall	.+1490   	; 0x6cc <main>
  fa:	1a c3       	rjmp	.+1588   	; 0x730 <_exit>

000000fc <__bad_interrupt>:
  fc:	81 cf       	rjmp	.-254    	; 0x0 <__vectors>

000000fe <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  fe:	8b e0       	ldi	r24, 0x0B	; 11
 100:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 104:	8d e7       	ldi	r24, 0x7D	; 125
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 10c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 116:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 11a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 11e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 122:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 126:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 12a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 12e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
 132:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 136:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <__data_end+0x2>
 13a:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <__data_end+0x3>
 13e:	8f b7       	in	r24, 0x3f	; 63
 140:	80 68       	ori	r24, 0x80	; 128
 142:	8f bf       	out	0x3f, r24	; 63
 144:	08 95       	ret

00000146 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 158:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 15c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 160:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <__data_end+0x2>
 164:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <__data_end+0x3>
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	a1 09       	sbc	r26, r1
 16c:	b1 09       	sbc	r27, r1
 16e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
 172:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 176:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <__data_end+0x2>
 17a:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 17e:	89 2b       	or	r24, r25
 180:	8a 2b       	or	r24, r26
 182:	8b 2b       	or	r24, r27
 184:	99 f4       	brne	.+38     	; 0x1ac <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 18c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 190:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 194:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 198:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 19c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
 1a0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 1a4:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <__data_end+0x2>
 1a8:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <__data_end+0x3>
	}
}
 1ac:	bf 91       	pop	r27
 1ae:	af 91       	pop	r26
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 1be:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
 1c2:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
 1c6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
 1ca:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 1ce:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <__data_end>
 1d2:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <__data_end+0x1>
 1d6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end+0x2>
 1da:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x3>
 1de:	08 95       	ret

000001e0 <SM1_Tick>:
}


void SM1_Tick() {
	
	unsigned D0 = ~PIND & 0x01;
 1e0:	a9 b1       	in	r26, 0x09	; 9
	unsigned D1 = ~PIND & 0x02;
 1e2:	39 b1       	in	r19, 0x09	; 9
	unsigned D2 = ~PIND & 0x04;
 1e4:	89 b1       	in	r24, 0x09	; 9
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	80 95       	com	r24
 1ea:	90 95       	com	r25
 1ec:	84 70       	andi	r24, 0x04	; 4
 1ee:	99 27       	eor	r25, r25
	static unsigned char column_val = 0x01; // sets the pattern displayed on columns
	static unsigned char column_sel = 0x7F; // grounds column to display pattern
	
	
	// === Transitions ===
	switch (sm1_state) {
 1f0:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <sm1_state>
 1f4:	42 2f       	mov	r20, r18
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	48 30       	cpi	r20, 0x08	; 8
 1fa:	51 05       	cpc	r21, r1
 1fc:	58 f5       	brcc	.+86     	; 0x254 <SM1_Tick+0x74>
 1fe:	fa 01       	movw	r30, r20
 200:	ea 5b       	subi	r30, 0xBA	; 186
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	8c c2       	rjmp	.+1304   	; 0x71e <__tablejump2__>
		case sm1_start:
			sm1_state = sm1_init;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <sm1_state>
 20c:	38 c0       	rjmp	.+112    	; 0x27e <SM1_Tick+0x9e>
			break;
		case sm1_init:
			sm1_state = sm1_setup;
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <sm1_state>
 214:	41 c0       	rjmp	.+130    	; 0x298 <SM1_Tick+0xb8>
			break;
		case sm1_setup:
			sm1_state = sm1_display;
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <sm1_state>
			break;
 21c:	4a c0       	rjmp	.+148    	; 0x2b2 <SM1_Tick+0xd2>
		case sm1_display:    
			sm1_state = D0 ? sm1_pressed : sm1_state;
 21e:	a0 ff       	sbrs	r26, 0
 220:	24 e0       	ldi	r18, 0x04	; 4
			sm1_state = D2 ? sm1_reset : sm1_state;
 222:	89 2b       	or	r24, r25
 224:	09 f0       	breq	.+2      	; 0x228 <SM1_Tick+0x48>
 226:	25 e0       	ldi	r18, 0x05	; 5
 228:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <sm1_state>
			break;
 22c:	17 c0       	rjmp	.+46     	; 0x25c <SM1_Tick+0x7c>
		case sm1_pressed:
			sm1_state = D2 ? sm1_reset : sm1_state;
 22e:	89 2b       	or	r24, r25
 230:	09 f0       	breq	.+2      	; 0x234 <SM1_Tick+0x54>
 232:	25 e0       	ldi	r18, 0x05	; 5
			sm1_state = D1 ? sm1_reset_level : sm1_state;
 234:	83 2f       	mov	r24, r19
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	80 95       	com	r24
 23a:	90 95       	com	r25
 23c:	81 fd       	sbrc	r24, 1
 23e:	26 e0       	ldi	r18, 0x06	; 6
 240:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <sm1_state>
			break;
 244:	0b c0       	rjmp	.+22     	; 0x25c <SM1_Tick+0x7c>
		case sm1_reset:
			sm1_state = sm1_display;
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <sm1_state>
			break;
 24c:	32 c0       	rjmp	.+100    	; 0x2b2 <SM1_Tick+0xd2>
		case sm1_reset_level:
			sm1_state = sm1_start;
 24e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <sm1_state>
 252:	56 c0       	rjmp	.+172    	; 0x300 <SM1_Tick+0x120>
			break;
		case sm1_death:
			break;
		default:               
			sm1_state = sm1_display;
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <sm1_state>
			break;
 25a:	2b c0       	rjmp	.+86     	; 0x2b2 <SM1_Tick+0xd2>
	}
	
	// === Actions ===
	switch (sm1_state) {
 25c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <sm1_state>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	39 f1       	breq	.+78     	; 0x2b2 <SM1_Tick+0xd2>
 264:	30 f4       	brcc	.+12     	; 0x272 <SM1_Tick+0x92>
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	51 f0       	breq	.+20     	; 0x27e <SM1_Tick+0x9e>
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	09 f0       	breq	.+2      	; 0x270 <SM1_Tick+0x90>
 26e:	48 c0       	rjmp	.+144    	; 0x300 <SM1_Tick+0x120>
 270:	13 c0       	rjmp	.+38     	; 0x298 <SM1_Tick+0xb8>
 272:	85 30       	cpi	r24, 0x05	; 5
 274:	c9 f1       	breq	.+114    	; 0x2e8 <SM1_Tick+0x108>
 276:	86 30       	cpi	r24, 0x06	; 6
 278:	09 f4       	brne	.+2      	; 0x27c <SM1_Tick+0x9c>
 27a:	3d c0       	rjmp	.+122    	; 0x2f6 <SM1_Tick+0x116>
 27c:	41 c0       	rjmp	.+130    	; 0x300 <SM1_Tick+0x120>
		case sm1_start:
			break;
		case sm1_init:
			TimerSet(2000);
 27e:	60 ed       	ldi	r22, 0xD0	; 208
 280:	77 e0       	ldi	r23, 0x07	; 7
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
			TimerOn();
 286:	9b df       	rcall	.-202    	; 0x1be <TimerSet>
 288:	3a df       	rcall	.-396    	; 0xfe <TimerOn>
			column_sel = 0xF7;
 28a:	87 ef       	ldi	r24, 0xF7	; 247
 28c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <column_sel.1660>
			column_val = 0x08;
 290:	88 e0       	ldi	r24, 0x08	; 8
 292:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <column_val.1659>
			break;
 296:	34 c0       	rjmp	.+104    	; 0x300 <SM1_Tick+0x120>
		case sm1_setup:
			TimerSet(100);
 298:	64 e6       	ldi	r22, 0x64	; 100
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
			TimerOn();
 2a0:	8e df       	rcall	.-228    	; 0x1be <TimerSet>
 2a2:	2d df       	rcall	.-422    	; 0xfe <TimerOn>
			column_sel = 0x7F;
 2a4:	8f e7       	ldi	r24, 0x7F	; 127
 2a6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <column_sel.1660>
			column_val = 0x01;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <column_val.1659>
			break;
 2b0:	27 c0       	rjmp	.+78     	; 0x300 <SM1_Tick+0x120>
		case sm1_display:   // If illuminated LED in bottom right corner
			if (column_sel == 0xFE && column_val == 0x80) {
 2b2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <column_sel.1660>
 2b6:	8e 3f       	cpi	r24, 0xFE	; 254
 2b8:	91 f4       	brne	.+36     	; 0x2de <SM1_Tick+0xfe>
 2ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <column_val.1659>
 2be:	80 38       	cpi	r24, 0x80	; 128
 2c0:	39 f4       	brne	.+14     	; 0x2d0 <SM1_Tick+0xf0>
				column_sel = 0x7F; // display far left column
 2c2:	8f e7       	ldi	r24, 0x7F	; 127
 2c4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <column_sel.1660>
				column_val = 0x01; // pattern illuminates top row
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <column_val.1659>
 2ce:	18 c0       	rjmp	.+48     	; 0x300 <SM1_Tick+0x120>
			}
			// else if far right column was last to display (grounded)
			else if (column_sel == 0xFE) {
				column_sel = 0x7F; // resets display column to far left column
 2d0:	9f e7       	ldi	r25, 0x7F	; 127
 2d2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <column_sel.1660>
				column_val = column_val << 1; // shift down illuminated LED one row
 2d6:	88 0f       	add	r24, r24
 2d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <column_val.1659>
 2dc:	11 c0       	rjmp	.+34     	; 0x300 <SM1_Tick+0x120>
			}
			// else Shift displayed column one to the right
			else {
				column_sel = (column_sel >> 1) | 0x80;
 2de:	86 95       	lsr	r24
 2e0:	80 68       	ori	r24, 0x80	; 128
 2e2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <column_sel.1660>
 2e6:	0c c0       	rjmp	.+24     	; 0x300 <SM1_Tick+0x120>
			}
			break;
		case sm1_pressed:
			break;
		case sm1_reset:
			column_sel = 0x7F;
 2e8:	8f e7       	ldi	r24, 0x7F	; 127
 2ea:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <column_sel.1660>
			column_val = 0x01;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <column_val.1659>
			break;
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <SM1_Tick+0x120>
		case sm1_reset_level:
			lvl_state = lvl_init;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <lvl_state>
			levelTemp = 0x00;
 2fc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <levelTemp>
			break;
		default:
			break;
	}
	
	PORTA = column_val; // PORTA displays column pattern
 300:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <column_val.1659>
 304:	82 b9       	out	0x02, r24	; 2
	PORTB = column_sel; // PORTB selects column to display pattern
 306:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <column_sel.1660>
 30a:	85 b9       	out	0x05, r24	; 5
 30c:	08 95       	ret

0000030e <lvl2_Tick>:

};

void lvl2_Tick() {
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
 318:	60 97       	sbiw	r28, 0x10	; 16
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	f8 94       	cli
 31e:	de bf       	out	0x3e, r29	; 62
 320:	0f be       	out	0x3f, r0	; 63
 322:	cd bf       	out	0x3d, r28	; 61
	
	unsigned D0 = ~PIND & 0x01;
 324:	89 b1       	in	r24, 0x09	; 9
 326:	28 2f       	mov	r18, r24
 328:	21 70       	andi	r18, 0x01	; 1
	unsigned D1 = ~PIND & 0x02;
 32a:	19 b1       	in	r17, 0x09	; 9
	unsigned D2 = ~PIND & 0x04;
 32c:	89 b1       	in	r24, 0x09	; 9
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	80 95       	com	r24
 332:	90 95       	com	r25
 334:	84 70       	andi	r24, 0x04	; 4
 336:	99 27       	eor	r25, r25
	
	// === Local Variables ===
	//int column_sel_index = 7;
	//int column_val_index = 7;
	
	unsigned char column_sel_array[8] = {0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0xFE};
 338:	38 e0       	ldi	r19, 0x08	; 8
 33a:	ec e0       	ldi	r30, 0x0C	; 12
 33c:	f1 e0       	ldi	r31, 0x01	; 1
 33e:	de 01       	movw	r26, r28
 340:	11 96       	adiw	r26, 0x01	; 1
 342:	01 90       	ld	r0, Z+
 344:	0d 92       	st	X+, r0
 346:	3a 95       	dec	r19
 348:	e1 f7       	brne	.-8      	; 0x342 <lvl2_Tick+0x34>
	unsigned char column_val_array[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
 34a:	38 e0       	ldi	r19, 0x08	; 8
 34c:	e4 e1       	ldi	r30, 0x14	; 20
 34e:	f1 e0       	ldi	r31, 0x01	; 1
 350:	de 01       	movw	r26, r28
 352:	19 96       	adiw	r26, 0x09	; 9
 354:	01 90       	ld	r0, Z+
 356:	0d 92       	st	X+, r0
 358:	3a 95       	dec	r19
 35a:	e1 f7       	brne	.-8      	; 0x354 <lvl2_Tick+0x46>
	
	// === Transitions ===
	switch (lvl2_state) {
 35c:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <lvl2_state>
 360:	43 2f       	mov	r20, r19
 362:	50 e0       	ldi	r21, 0x00	; 0
 364:	4a 30       	cpi	r20, 0x0A	; 10
 366:	51 05       	cpc	r21, r1
 368:	08 f0       	brcs	.+2      	; 0x36c <lvl2_Tick+0x5e>
 36a:	6a c0       	rjmp	.+212    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 36c:	fa 01       	movw	r30, r20
 36e:	e2 5b       	subi	r30, 0xB2	; 178
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	d5 c1       	rjmp	.+938    	; 0x71e <__tablejump2__>
		case lvl2_start:
			lvl2_state = lvl2_init;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <lvl2_state>
 37a:	73 c0       	rjmp	.+230    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			break;
		case lvl2_init:
			lvl2_state = lvl2_display_1;
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <lvl2_state>
			break;
 382:	80 c0       	rjmp	.+256    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		case lvl2_display_1:
			lvl2_state = D0 ? lvl2_pressed : lvl2_state;
 384:	21 11       	cpse	r18, r1
 386:	01 c0       	rjmp	.+2      	; 0x38a <lvl2_Tick+0x7c>
 388:	37 e0       	ldi	r19, 0x07	; 7
			lvl2_state = D2 ? lvl2_reset : lvl2_state;
 38a:	89 2b       	or	r24, r25
 38c:	09 f0       	breq	.+2      	; 0x390 <lvl2_Tick+0x82>
 38e:	38 e0       	ldi	r19, 0x08	; 8
			lvl2_state = column_sel_index_lvl2 == 0 && column_val_index_lvl2 == 0 ? lvl2_display_2 : lvl2_state;
 390:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <column_sel_index_lvl2>
 394:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <column_sel_index_lvl2+0x1>
 398:	89 2b       	or	r24, r25
 39a:	39 f4       	brne	.+14     	; 0x3aa <lvl2_Tick+0x9c>
 39c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <column_val_index_lvl2>
 3a0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <column_val_index_lvl2+0x1>
 3a4:	89 2b       	or	r24, r25
 3a6:	09 f4       	brne	.+2      	; 0x3aa <lvl2_Tick+0x9c>
 3a8:	34 e0       	ldi	r19, 0x04	; 4
 3aa:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <lvl2_state>
			//lvl2_state = column_sel_index == 0 && column_val_index == 0 ? lvl2_init : lvl2_state; 
			break;
 3ae:	4c c0       	rjmp	.+152    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		case lvl2_display_2:
			lvl2_state = D0 ? lvl2_pressed : lvl2_state;
 3b0:	21 11       	cpse	r18, r1
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <lvl2_Tick+0xa8>
 3b4:	37 e0       	ldi	r19, 0x07	; 7
			lvl2_state = D2 ? lvl2_reset : lvl2_state;
 3b6:	89 2b       	or	r24, r25
 3b8:	09 f0       	breq	.+2      	; 0x3bc <lvl2_Tick+0xae>
 3ba:	38 e0       	ldi	r19, 0x08	; 8
			lvl2_state = column_sel_index_lvl2 == 7 && column_val_index_lvl2 == 7 ? lvl2_display_3 : lvl2_state;
 3bc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <column_sel_index_lvl2>
 3c0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <column_sel_index_lvl2+0x1>
 3c4:	07 97       	sbiw	r24, 0x07	; 7
 3c6:	39 f4       	brne	.+14     	; 0x3d6 <lvl2_Tick+0xc8>
 3c8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <column_val_index_lvl2>
 3cc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <column_val_index_lvl2+0x1>
 3d0:	07 97       	sbiw	r24, 0x07	; 7
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <lvl2_Tick+0xc8>
 3d4:	35 e0       	ldi	r19, 0x05	; 5
 3d6:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <lvl2_state>
			break;
 3da:	36 c0       	rjmp	.+108    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		case lvl2_display_3:
			lvl2_state = D0 ? lvl2_pressed : lvl2_state;
 3dc:	21 11       	cpse	r18, r1
 3de:	01 c0       	rjmp	.+2      	; 0x3e2 <lvl2_Tick+0xd4>
 3e0:	37 e0       	ldi	r19, 0x07	; 7
			lvl2_state = D2 ? lvl2_reset : lvl2_state;
 3e2:	89 2b       	or	r24, r25
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <lvl2_Tick+0xda>
 3e6:	38 e0       	ldi	r19, 0x08	; 8
			lvl2_state = column_sel_index_lvl2 == 0 && column_val_index_lvl2 == 0 ? lvl2_display_4 : lvl2_state;
 3e8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <column_sel_index_lvl2>
 3ec:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <column_sel_index_lvl2+0x1>
 3f0:	89 2b       	or	r24, r25
 3f2:	39 f4       	brne	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <column_val_index_lvl2>
 3f8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <column_val_index_lvl2+0x1>
 3fc:	89 2b       	or	r24, r25
 3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	36 e0       	ldi	r19, 0x06	; 6
 402:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <lvl2_state>
			break;
 406:	20 c0       	rjmp	.+64     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		case lvl2_display_4:
			lvl2_state = D0 ? lvl2_pressed : lvl2_state;
 408:	21 11       	cpse	r18, r1
 40a:	01 c0       	rjmp	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	37 e0       	ldi	r19, 0x07	; 7
			lvl2_state = D2 ? lvl2_reset : lvl2_state;
 40e:	89 2b       	or	r24, r25
 410:	09 f0       	breq	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	38 e0       	ldi	r19, 0x08	; 8
 414:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <lvl2_state>
			break;
 418:	17 c0       	rjmp	.+46     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		case lvl2_pressed:
			lvl2_state = D2 ? lvl2_reset : lvl2_state;
 41a:	89 2b       	or	r24, r25
 41c:	09 f0       	breq	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	38 e0       	ldi	r19, 0x08	; 8
			lvl2_state = D1 ? lvl2_reset_level : lvl2_state;
 420:	81 2f       	mov	r24, r17
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	80 95       	com	r24
 426:	90 95       	com	r25
 428:	81 fd       	sbrc	r24, 1
 42a:	39 e0       	ldi	r19, 0x09	; 9
 42c:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <lvl2_state>
			break;
 430:	0b c0       	rjmp	.+22     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		case lvl2_reset:
			lvl2_state = lvl2_display_1;
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <lvl2_state>
			break;
 438:	25 c0       	rjmp	.+74     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		case lvl2_reset_level:
			lvl2_state = lvl2_start;
 43a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <lvl2_state>
 43e:	cc c0       	rjmp	.+408    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
			break;
		default:
			lvl2_state = lvl2_display_1;
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <lvl2_state>
		break;
 446:	1e c0       	rjmp	.+60     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	}
		int column_sel_index = 7;
		int column_val_index = 7;
	// === Actions ===
	switch (lvl2_state) {
 448:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <lvl2_state>
 44c:	8e 2f       	mov	r24, r30
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	fc 01       	movw	r30, r24
 452:	31 97       	sbiw	r30, 0x01	; 1
 454:	e9 30       	cpi	r30, 0x09	; 9
 456:	f1 05       	cpc	r31, r1
 458:	08 f0       	brcs	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	be c0       	rjmp	.+380    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 45c:	e8 5a       	subi	r30, 0xA8	; 168
 45e:	ff 4f       	sbci	r31, 0xFF	; 255
 460:	5e c1       	rjmp	.+700    	; 0x71e <__tablejump2__>
		case lvl2_start:
			break;
		case lvl2_init:
			TimerSet(75);
 462:	6b e4       	ldi	r22, 0x4B	; 75
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0
			TimerOn();
 46a:	a9 de       	rcall	.-686    	; 0x1be <TimerSet>
 46c:	48 de       	rcall	.-880    	; 0xfe <TimerOn>
			column_sel_index_lvl2 = 7;
 46e:	87 e0       	ldi	r24, 0x07	; 7
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <column_sel_index_lvl2+0x1>
 476:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <column_sel_index_lvl2>
			column_val_index_lvl2 = 7;
 47a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <column_val_index_lvl2+0x1>
 47e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <column_val_index_lvl2>
			break;
 482:	aa c0       	rjmp	.+340    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
			/*if (column_sel_index_lvl2 == 0 && column_val_index_lvl2 == 0)
			{
				column_sel_index_lvl2 = 7;
				column_val_index_lvl2 = 7;
			}*/
			if (column_val_index_lvl2 == 0)
 484:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <column_val_index_lvl2>
 488:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <column_val_index_lvl2+0x1>
 48c:	00 97       	sbiw	r24, 0x00	; 0
 48e:	81 f4       	brne	.+32     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			{
				column_sel_index_lvl2 = column_sel_index_lvl2 - 1;
 490:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <column_sel_index_lvl2>
 494:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <column_sel_index_lvl2+0x1>
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <column_sel_index_lvl2+0x1>
 49e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <column_sel_index_lvl2>
				column_val_index_lvl2 = 7;
 4a2:	87 e0       	ldi	r24, 0x07	; 7
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <column_val_index_lvl2+0x1>
 4aa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <column_val_index_lvl2>
 4ae:	94 c0       	rjmp	.+296    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
			}
			else
			{
				column_val_index_lvl2 = column_val_index_lvl2 - 1;
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <column_val_index_lvl2+0x1>
 4b6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <column_val_index_lvl2>
 4ba:	8e c0       	rjmp	.+284    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
			}
			break;
		case lvl2_display_2:
			TimerSet(55);
 4bc:	67 e3       	ldi	r22, 0x37	; 55
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
			TimerOn();
 4c4:	7c de       	rcall	.-776    	; 0x1be <TimerSet>
 4c6:	1b de       	rcall	.-970    	; 0xfe <TimerOn>
			/*if (column_sel_index_lvl2 == 0 && column_val_index_lvl2 == 0)
			{
				column_sel_index_lvl2 = 7;
				column_val_index_lvl2 = 7;
			}*/
			if (column_val_index_lvl2 == 7)
 4c8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <column_val_index_lvl2>
 4cc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <column_val_index_lvl2+0x1>
 4d0:	87 30       	cpi	r24, 0x07	; 7
 4d2:	91 05       	cpc	r25, r1
 4d4:	71 f4       	brne	.+28     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
			{
				column_sel_index_lvl2 = column_sel_index_lvl2 + 1;
 4d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <column_sel_index_lvl2>
 4da:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <column_sel_index_lvl2+0x1>
 4de:	01 96       	adiw	r24, 0x01	; 1
 4e0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <column_sel_index_lvl2+0x1>
 4e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <column_sel_index_lvl2>
				column_val_index_lvl2 = 0;
 4e8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <column_val_index_lvl2+0x1>
 4ec:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <column_val_index_lvl2>
 4f0:	73 c0       	rjmp	.+230    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
			}
			else
			{
				column_val_index_lvl2 = column_val_index_lvl2 + 1;
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <column_val_index_lvl2+0x1>
 4f8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <column_val_index_lvl2>
			}
			break;
		case lvl2_display_3:
			TimerSet(45);
 4fc:	6d c0       	rjmp	.+218    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 4fe:	6d e2       	ldi	r22, 0x2D	; 45
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	5b de       	rcall	.-842    	; 0x1be <TimerSet>
			TimerOn();
 508:	fa dd       	rcall	.-1036   	; 0xfe <TimerOn>
 50a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <column_sel_index_lvl2>
			/*if (column_sel_index_lvl2 == 0 && column_val_index_lvl2 == 0)
			{
				column_sel_index_lvl2 = 7;
				column_val_index_lvl2 = 7;
			}
			else*/ if (column_sel_index_lvl2 == 0)
 50e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <column_sel_index_lvl2+0x1>
 512:	00 97       	sbiw	r24, 0x00	; 0
 514:	81 f4       	brne	.+32     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 516:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <column_val_index_lvl2>
			{
				column_val_index_lvl2 = column_val_index_lvl2 - 1;
 51a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <column_val_index_lvl2+0x1>
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <column_val_index_lvl2+0x1>
 524:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <column_val_index_lvl2>
 528:	87 e0       	ldi	r24, 0x07	; 7
				column_sel_index_lvl2 = 7;
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <column_sel_index_lvl2+0x1>
 530:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <column_sel_index_lvl2>
 534:	51 c0       	rjmp	.+162    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 536:	01 97       	sbiw	r24, 0x01	; 1
			}
			else
			{
				column_sel_index_lvl2 = column_sel_index_lvl2 - 1;
 538:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <column_sel_index_lvl2+0x1>
 53c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <column_sel_index_lvl2>
			}
			break;
		case lvl2_display_4:
			TimerSet(25);
 540:	4b c0       	rjmp	.+150    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 542:	69 e1       	ldi	r22, 0x19	; 25
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	39 de       	rcall	.-910    	; 0x1be <TimerSet>
			TimerOn();
 54c:	d8 dd       	rcall	.-1104   	; 0xfe <TimerOn>
 54e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <column_val_index_lvl2>
			if (column_val_index_lvl2 == 7 && column_sel_index_lvl2 == 7)
 552:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <column_val_index_lvl2+0x1>
 556:	27 30       	cpi	r18, 0x07	; 7
 558:	31 05       	cpc	r19, r1
 55a:	81 f4       	brne	.+32     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 55c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <column_sel_index_lvl2>
 560:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <column_sel_index_lvl2+0x1>
 564:	87 30       	cpi	r24, 0x07	; 7
 566:	91 05       	cpc	r25, r1
 568:	d9 f4       	brne	.+54     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 56a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <column_sel_index_lvl2+0x1>
			{
				column_sel_index_lvl2 = 0;
 56e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <column_sel_index_lvl2>
 572:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <column_val_index_lvl2+0x1>
				column_val_index_lvl2 = 0;
 576:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <column_val_index_lvl2>
 57a:	2e c0       	rjmp	.+92     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 57c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <column_sel_index_lvl2>
			}
			else if (column_sel_index_lvl2 == 7)
 580:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <column_sel_index_lvl2+0x1>
 584:	87 30       	cpi	r24, 0x07	; 7
 586:	91 05       	cpc	r25, r1
 588:	59 f4       	brne	.+22     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 58a:	2f 5f       	subi	r18, 0xFF	; 255
			{
				column_val_index_lvl2 = column_val_index_lvl2 + 1;
 58c:	3f 4f       	sbci	r19, 0xFF	; 255
 58e:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <column_val_index_lvl2+0x1>
 592:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <column_val_index_lvl2>
 596:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <column_sel_index_lvl2+0x1>
				column_sel_index_lvl2 = 0;
 59a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <column_sel_index_lvl2>
 59e:	1c c0       	rjmp	.+56     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5a0:	01 96       	adiw	r24, 0x01	; 1
			}
			else
			{
				column_sel_index_lvl2 = column_sel_index_lvl2 + 1;
 5a2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <column_sel_index_lvl2+0x1>
 5a6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <column_sel_index_lvl2>
			break;
		case lvl2_pressed:
			//buttonTemp = 0x01;
			break;
		case lvl2_reset:
			TimerSet(75);
 5aa:	16 c0       	rjmp	.+44     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5ac:	6b e4       	ldi	r22, 0x4B	; 75
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	04 de       	rcall	.-1016   	; 0x1be <TimerSet>
			TimerOn();
 5b6:	a3 dd       	rcall	.-1210   	; 0xfe <TimerOn>
 5b8:	87 e0       	ldi	r24, 0x07	; 7
			column_sel_index_lvl2 = 7;
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <column_sel_index_lvl2+0x1>
 5c0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <column_sel_index_lvl2>
 5c4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <column_val_index_lvl2+0x1>
			column_val_index_lvl2 = 7;
 5c8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <column_val_index_lvl2>
 5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
			break;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
		case lvl2_reset_level:
			lvl_state = lvl_init;
 5d0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <lvl_state>
 5d4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <levelTemp>
			levelTemp = 0x00;
 5d8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <column_val_index_lvl2>
			break;
		default:
		break;
	}
	
	PORTA = column_val_array[column_val_index_lvl2]; // PORTA displays column pattern
 5dc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <column_val_index_lvl2+0x1>
 5e0:	ec 0f       	add	r30, r28
 5e2:	fd 1f       	adc	r31, r29
 5e4:	81 85       	ldd	r24, Z+9	; 0x09
 5e6:	82 b9       	out	0x02, r24	; 2
 5e8:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <column_sel_index_lvl2>
	PORTB = column_sel_array[column_sel_index_lvl2]; // PORTB selects column to display pattern
 5ec:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <column_sel_index_lvl2+0x1>
 5f0:	ec 0f       	add	r30, r28
 5f2:	fd 1f       	adc	r31, r29
 5f4:	81 81       	ldd	r24, Z+1	; 0x01
 5f6:	85 b9       	out	0x05, r24	; 5
 5f8:	60 96       	adiw	r28, 0x10	; 16

};
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	f8 94       	cli
 5fe:	de bf       	out	0x3e, r29	; 62
 600:	0f be       	out	0x3f, r0	; 63
 602:	cd bf       	out	0x3d, r28	; 61
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	08 95       	ret

0000060c <level_SM_Tick>:
 60c:	99 b1       	in	r25, 0x09	; 9


unsigned char level_SM_Tick()
{
	unsigned D0 = ~PIND & 0x01;
	unsigned D1 = ~PIND & 0x02;
 60e:	49 b1       	in	r20, 0x09	; 9
	unsigned D2 = ~PIND & 0x04;
 610:	29 b1       	in	r18, 0x09	; 9
	
	static unsigned char column_val = 0x01; // sets the pattern displayed on columns
	static unsigned char column_sel = 0x7F; // grounds column to display pattern
	
	switch(lvl_state)
 612:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <lvl_state>
 616:	82 30       	cpi	r24, 0x02	; 2
 618:	99 f0       	breq	.+38     	; 0x640 <level_SM_Tick+0x34>
 61a:	28 f4       	brcc	.+10     	; 0x626 <level_SM_Tick+0x1a>
 61c:	88 23       	and	r24, r24
 61e:	41 f0       	breq	.+16     	; 0x630 <level_SM_Tick+0x24>
 620:	81 30       	cpi	r24, 0x01	; 1
 622:	51 f0       	breq	.+20     	; 0x638 <level_SM_Tick+0x2c>
 624:	24 c0       	rjmp	.+72     	; 0x66e <level_SM_Tick+0x62>
 626:	83 30       	cpi	r24, 0x03	; 3
 628:	d1 f0       	breq	.+52     	; 0x65e <level_SM_Tick+0x52>
 62a:	84 30       	cpi	r24, 0x04	; 4
 62c:	e1 f0       	breq	.+56     	; 0x666 <level_SM_Tick+0x5a>
 62e:	1f c0       	rjmp	.+62     	; 0x66e <level_SM_Tick+0x62>
	{
		case lvl_start:
			lvl_state = lvl_init;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <lvl_state>
 636:	28 c0       	rjmp	.+80     	; 0x688 <level_SM_Tick+0x7c>
			break;
		case lvl_init:
			lvl_state = lvl_wait;
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <lvl_state>
			break;
 63e:	3e c0       	rjmp	.+124    	; 0x6bc <level_SM_Tick+0xb0>
		case lvl_wait:
			lvl_state = D0 ? lvl_up : lvl_state;
 640:	90 ff       	sbrs	r25, 0
 642:	83 e0       	ldi	r24, 0x03	; 3
			lvl_state = D1 ? lvl_down : lvl_state;
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	40 95       	com	r20
 648:	50 95       	com	r21
 64a:	41 fd       	sbrc	r20, 1
 64c:	84 e0       	ldi	r24, 0x04	; 4
			lvl_state = D2 ? lvl_select : lvl_state;
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	20 95       	com	r18
 652:	30 95       	com	r19
 654:	22 fd       	sbrc	r18, 2
 656:	85 e0       	ldi	r24, 0x05	; 5
 658:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <lvl_state>
			break;
 65c:	08 c0       	rjmp	.+16     	; 0x66e <level_SM_Tick+0x62>
		case lvl_up:
			lvl_state = lvl_wait;
 65e:	82 e0       	ldi	r24, 0x02	; 2
 660:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <lvl_state>
			break;
 664:	2b c0       	rjmp	.+86     	; 0x6bc <level_SM_Tick+0xb0>
		case lvl_down:
			lvl_state = lvl_wait;
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <lvl_state>
			break;
 66c:	27 c0       	rjmp	.+78     	; 0x6bc <level_SM_Tick+0xb0>
			break;
		default:
			break;
	}
	
	switch(lvl_state)
 66e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <lvl_state>
 672:	83 30       	cpi	r24, 0x03	; 3
 674:	81 f0       	breq	.+32     	; 0x696 <level_SM_Tick+0x8a>
 676:	18 f4       	brcc	.+6      	; 0x67e <level_SM_Tick+0x72>
 678:	81 30       	cpi	r24, 0x01	; 1
 67a:	01 f5       	brne	.+64     	; 0x6bc <level_SM_Tick+0xb0>
 67c:	05 c0       	rjmp	.+10     	; 0x688 <level_SM_Tick+0x7c>
 67e:	84 30       	cpi	r24, 0x04	; 4
 680:	91 f0       	breq	.+36     	; 0x6a6 <level_SM_Tick+0x9a>
 682:	85 30       	cpi	r24, 0x05	; 5
 684:	c1 f0       	breq	.+48     	; 0x6b6 <level_SM_Tick+0xaa>
 686:	1a c0       	rjmp	.+52     	; 0x6bc <level_SM_Tick+0xb0>
	{
		case lvl_start:
			break;
		case lvl_init:
			column_val = 0x01;
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <column_val.1717>
			column_sel = 0x7F;
 68e:	8f e7       	ldi	r24, 0x7F	; 127
 690:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 694:	13 c0       	rjmp	.+38     	; 0x6bc <level_SM_Tick+0xb0>
		case lvl_wait:
			break;
		case lvl_up:
			if (column_val <= 0x02)
 696:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <column_val.1717>
 69a:	83 30       	cpi	r24, 0x03	; 3
 69c:	78 f4       	brcc	.+30     	; 0x6bc <level_SM_Tick+0xb0>
			{
				column_val += 0x01;
 69e:	8f 5f       	subi	r24, 0xFF	; 255
 6a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <column_val.1717>
 6a4:	0b c0       	rjmp	.+22     	; 0x6bc <level_SM_Tick+0xb0>
			}	
			break;
		case lvl_down:
			if (column_val >= 0x01)
 6a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <column_val.1717>
 6aa:	88 23       	and	r24, r24
 6ac:	39 f0       	breq	.+14     	; 0x6bc <level_SM_Tick+0xb0>
			{
				column_val -= 0x01;
 6ae:	81 50       	subi	r24, 0x01	; 1
 6b0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <column_val.1717>
 6b4:	03 c0       	rjmp	.+6      	; 0x6bc <level_SM_Tick+0xb0>
			}
			break;
		case lvl_select:
			return column_val;
 6b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <column_val.1717>
 6ba:	08 95       	ret
			break;
		default:
			break;
	}
	
	PORTA = column_val; // PORTA displays column pattern
 6bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <column_val.1717>
 6c0:	82 b9       	out	0x02, r24	; 2
	PORTB = column_sel; // PORTB selects column to display pattern
 6c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6c6:	85 b9       	out	0x05, r24	; 5
	
	return 0x00;
 6c8:	80 e0       	ldi	r24, 0x00	; 0
};
 6ca:	08 95       	ret

000006cc <main>:

int main()
{
	//Timer
	TimerSet(100);
 6cc:	64 e6       	ldi	r22, 0x64	; 100
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	74 dd       	rcall	.-1304   	; 0x1be <TimerSet>
	TimerOn();
 6d6:	13 dd       	rcall	.-1498   	; 0xfe <TimerOn>
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
	
	//Ports
	DDRA = 0xFF; PORTA = 0x00;
 6da:	81 b9       	out	0x01, r24	; 1
 6dc:	12 b8       	out	0x02, r1	; 2
 6de:	84 b9       	out	0x04, r24	; 4
	DDRB = 0xFF; PORTB = 0x00;
 6e0:	15 b8       	out	0x05, r1	; 5
 6e2:	1a b8       	out	0x0a, r1	; 10
	DDRD = 0x00; PORTD = 0xFF;
 6e4:	8b b9       	out	0x0b, r24	; 11
 6e6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <sm1_state>
	//Local variables
	unsigned char levelSelected = 0x00;
	unsigned char buttonPressed = 0x00;
	
	//sm states
	sm1_state = sm1_start;
 6ea:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <lvl_state>
	lvl_state = lvl_start;
 6ee:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <lvl2_state>
	lvl2_state = lvl2_start;
 6f2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <levelTemp>
	
	//Buttons
	
	while (1)
	{
		levelSelected = levelTemp;
 6f6:	81 11       	cpse	r24, r1
		
		if (levelSelected == 0x00)
 6f8:	04 c0       	rjmp	.+8      	; 0x702 <main+0x36>
		{
			levelTemp = level_SM_Tick();	
 6fa:	88 df       	rcall	.-240    	; 0x60c <level_SM_Tick>
 6fc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <levelTemp>
 700:	07 c0       	rjmp	.+14     	; 0x710 <main+0x44>
		}
		else if (levelSelected == 0x01)
 702:	81 30       	cpi	r24, 0x01	; 1
 704:	11 f4       	brne	.+4      	; 0x70a <main+0x3e>
		{	
			SM1_Tick();
 706:	6c dd       	rcall	.-1320   	; 0x1e0 <SM1_Tick>
 708:	03 c0       	rjmp	.+6      	; 0x710 <main+0x44>
		}
		else if (levelSelected == 0x02)
 70a:	82 30       	cpi	r24, 0x02	; 2
 70c:	09 f4       	brne	.+2      	; 0x710 <main+0x44>
		{
			lvl2_Tick();
 70e:	ff dd       	rcall	.-1026   	; 0x30e <lvl2_Tick>
 710:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TimerFlag>
		}
		while (!TimerFlag)
 714:	88 23       	and	r24, r24
 716:	e1 f3       	breq	.-8      	; 0x710 <main+0x44>
 718:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <TimerFlag>
		{
			
		}
		TimerFlag = 0;
 71c:	ea cf       	rjmp	.-44     	; 0x6f2 <main+0x26>

0000071e <__tablejump2__>:
			
	}
 71e:	ee 0f       	add	r30, r30
 720:	ff 1f       	adc	r31, r31
 722:	00 24       	eor	r0, r0
 724:	00 1c       	adc	r0, r0
 726:	0b be       	out	0x3b, r0	; 59
 728:	07 90       	elpm	r0, Z+
 72a:	f6 91       	elpm	r31, Z
 72c:	e0 2d       	mov	r30, r0
 72e:	09 94       	ijmp

00000730 <_exit>:
 730:	f8 94       	cli

00000732 <__stop_program>:
 732:	ff cf       	rjmp	.-2      	; 0x732 <__stop_program>
