
jshin026_cyee008_lab10_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000454  000004e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000454  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  0080010c  0080010c  000004f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dab  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0a  00000000  00000000  00001397  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072d  00000000  00000000  00001da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  000024d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000681  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f1  00000000  00000000  00002c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000307a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	69 c0       	rjmp	.+210    	; 0xd4 <__ctors_end>
   2:	00 00       	nop
   4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
   6:	00 00       	nop
   8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
   a:	00 00       	nop
   c:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
   e:	00 00       	nop
  10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
  12:	00 00       	nop
  14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
  16:	00 00       	nop
  18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
  1e:	00 00       	nop
  20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
  22:	00 00       	nop
  24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
  26:	00 00       	nop
  28:	72 c0       	rjmp	.+228    	; 0x10e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	70 c0       	rjmp	.+224    	; 0x10e <__bad_interrupt>
  2e:	00 00       	nop
  30:	6e c0       	rjmp	.+220    	; 0x10e <__bad_interrupt>
  32:	00 00       	nop
  34:	54 c1       	rjmp	.+680    	; 0x2de <__vector_13>
  36:	00 00       	nop
  38:	6a c0       	rjmp	.+212    	; 0x10e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	68 c0       	rjmp	.+208    	; 0x10e <__bad_interrupt>
  3e:	00 00       	nop
  40:	66 c0       	rjmp	.+204    	; 0x10e <__bad_interrupt>
  42:	00 00       	nop
  44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
  46:	00 00       	nop
  48:	62 c0       	rjmp	.+196    	; 0x10e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	60 c0       	rjmp	.+192    	; 0x10e <__bad_interrupt>
  4e:	00 00       	nop
  50:	5e c0       	rjmp	.+188    	; 0x10e <__bad_interrupt>
  52:	00 00       	nop
  54:	5c c0       	rjmp	.+184    	; 0x10e <__bad_interrupt>
  56:	00 00       	nop
  58:	5a c0       	rjmp	.+180    	; 0x10e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	58 c0       	rjmp	.+176    	; 0x10e <__bad_interrupt>
  5e:	00 00       	nop
  60:	56 c0       	rjmp	.+172    	; 0x10e <__bad_interrupt>
  62:	00 00       	nop
  64:	54 c0       	rjmp	.+168    	; 0x10e <__bad_interrupt>
  66:	00 00       	nop
  68:	52 c0       	rjmp	.+164    	; 0x10e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	50 c0       	rjmp	.+160    	; 0x10e <__bad_interrupt>
  6e:	00 00       	nop
  70:	4e c0       	rjmp	.+156    	; 0x10e <__bad_interrupt>
  72:	00 00       	nop
  74:	4c c0       	rjmp	.+152    	; 0x10e <__bad_interrupt>
  76:	00 00       	nop
  78:	4a c0       	rjmp	.+148    	; 0x10e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	48 c0       	rjmp	.+144    	; 0x10e <__bad_interrupt>
  7e:	00 00       	nop
  80:	46 c0       	rjmp	.+140    	; 0x10e <__bad_interrupt>
  82:	00 00       	nop
  84:	44 c0       	rjmp	.+136    	; 0x10e <__bad_interrupt>
  86:	00 00       	nop
  88:	42 c0       	rjmp	.+132    	; 0x10e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	94 00       	.word	0x0094	; ????
  8e:	f4 00       	.word	0x00f4	; ????
  90:	f7 00       	.word	0x00f7	; ????
  92:	24 01       	movw	r4, r8
  94:	fa 00       	.word	0x00fa	; ????
  96:	fd 00       	.word	0x00fd	; ????
  98:	00 01       	movw	r0, r0
  9a:	03 01       	movw	r0, r6
  9c:	06 01       	movw	r0, r12
  9e:	09 01       	movw	r0, r18
  a0:	0c 01       	movw	r0, r24
  a2:	0f 01       	movw	r0, r30
  a4:	12 01       	movw	r2, r4
  a6:	15 01       	movw	r2, r10
  a8:	18 01       	movw	r2, r16
  aa:	1b 01       	movw	r2, r22
  ac:	1e 01       	movw	r2, r28
  ae:	21 01       	movw	r4, r2
  b0:	37 01       	movw	r6, r14
  b2:	3a 01       	movw	r6, r20
  b4:	3c 01       	movw	r6, r24
  b6:	69 01       	movw	r12, r18
  b8:	3f 01       	movw	r6, r30
  ba:	42 01       	movw	r8, r4
  bc:	45 01       	movw	r8, r10
  be:	48 01       	movw	r8, r16
  c0:	4b 01       	movw	r8, r22
  c2:	4e 01       	movw	r8, r28
  c4:	51 01       	movw	r10, r2
  c6:	54 01       	movw	r10, r8
  c8:	57 01       	movw	r10, r14
  ca:	5a 01       	movw	r10, r20
  cc:	5d 01       	movw	r10, r26
  ce:	60 01       	movw	r12, r0
  d0:	63 01       	movw	r12, r6
  d2:	66 01       	movw	r12, r12

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf ef       	ldi	r28, 0xFF	; 255
  da:	d0 e4       	ldi	r29, 0x40	; 64
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	11 e0       	ldi	r17, 0x01	; 1
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	e4 e5       	ldi	r30, 0x54	; 84
  e8:	f4 e0       	ldi	r31, 0x04	; 4
  ea:	00 e0       	ldi	r16, 0x00	; 0
  ec:	0b bf       	out	0x3b, r16	; 59
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x14>
  f0:	07 90       	elpm	r0, Z+
  f2:	0d 92       	st	X+, r0
  f4:	ac 30       	cpi	r26, 0x0C	; 12
  f6:	b1 07       	cpc	r27, r17
  f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0x10>

000000fa <__do_clear_bss>:
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	ac e0       	ldi	r26, 0x0C	; 12
  fe:	b1 e0       	ldi	r27, 0x01	; 1
 100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
 102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
 104:	af 33       	cpi	r26, 0x3F	; 63
 106:	b2 07       	cpc	r27, r18
 108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>
 10a:	25 d1       	rcall	.+586    	; 0x356 <main>
 10c:	a1 c1       	rjmp	.+834    	; 0x450 <_exit>

0000010e <__bad_interrupt>:
 10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <GetKeypad>:
	}

	PORTB = output;	// Write combined, shared output variables to PORTB

	return state;
}
 110:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <state>
 114:	8e 2f       	mov	r24, r30
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	82 31       	cpi	r24, 0x12	; 18
 11a:	91 05       	cpc	r25, r1
 11c:	08 f0       	brcs	.+2      	; 0x120 <GetKeypad+0x10>
 11e:	99 c0       	rjmp	.+306    	; 0x252 <GetKeypad+0x142>
 120:	fc 01       	movw	r30, r24
 122:	ea 5b       	subi	r30, 0xBA	; 186
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	8b c1       	rjmp	.+790    	; 0x43e <__tablejump2__>
 128:	8f e7       	ldi	r24, 0x7F	; 127
 12a:	88 b9       	out	0x08, r24	; 8
 12c:	00 00       	nop
 12e:	30 99       	sbic	0x06, 0	; 6
 130:	03 c0       	rjmp	.+6      	; 0x138 <GetKeypad+0x28>
 132:	8e e0       	ldi	r24, 0x0E	; 14
 134:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 138:	31 99       	sbic	0x06, 1	; 6
 13a:	03 c0       	rjmp	.+6      	; 0x142 <GetKeypad+0x32>
 13c:	8f e0       	ldi	r24, 0x0F	; 15
 13e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 142:	32 99       	sbic	0x06, 2	; 6
 144:	03 c0       	rjmp	.+6      	; 0x14c <GetKeypad+0x3c>
 146:	80 e1       	ldi	r24, 0x10	; 16
 148:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 14c:	33 99       	sbic	0x06, 3	; 6
 14e:	03 c0       	rjmp	.+6      	; 0x156 <GetKeypad+0x46>
 150:	81 e1       	ldi	r24, 0x11	; 17
 152:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 156:	8f eb       	ldi	r24, 0xBF	; 191
 158:	88 b9       	out	0x08, r24	; 8
 15a:	00 00       	nop
 15c:	30 99       	sbic	0x06, 0	; 6
 15e:	03 c0       	rjmp	.+6      	; 0x166 <GetKeypad+0x56>
 160:	85 e0       	ldi	r24, 0x05	; 5
 162:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 166:	31 99       	sbic	0x06, 1	; 6
 168:	03 c0       	rjmp	.+6      	; 0x170 <GetKeypad+0x60>
 16a:	88 e0       	ldi	r24, 0x08	; 8
 16c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 170:	32 99       	sbic	0x06, 2	; 6
 172:	03 c0       	rjmp	.+6      	; 0x17a <GetKeypad+0x6a>
 174:	8b e0       	ldi	r24, 0x0B	; 11
 176:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 17a:	33 99       	sbic	0x06, 3	; 6
 17c:	03 c0       	rjmp	.+6      	; 0x184 <GetKeypad+0x74>
 17e:	8d e0       	ldi	r24, 0x0D	; 13
 180:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 184:	8f ed       	ldi	r24, 0xDF	; 223
 186:	88 b9       	out	0x08, r24	; 8
 188:	00 00       	nop
 18a:	30 99       	sbic	0x06, 0	; 6
 18c:	03 c0       	rjmp	.+6      	; 0x194 <GetKeypad+0x84>
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 194:	31 99       	sbic	0x06, 1	; 6
 196:	03 c0       	rjmp	.+6      	; 0x19e <GetKeypad+0x8e>
 198:	87 e0       	ldi	r24, 0x07	; 7
 19a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 19e:	32 99       	sbic	0x06, 2	; 6
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <GetKeypad+0x98>
 1a2:	8a e0       	ldi	r24, 0x0A	; 10
 1a4:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 1a8:	33 99       	sbic	0x06, 3	; 6
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <GetKeypad+0xa2>
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 1b2:	8f ee       	ldi	r24, 0xEF	; 239
 1b4:	88 b9       	out	0x08, r24	; 8
 1b6:	00 00       	nop
 1b8:	30 99       	sbic	0x06, 0	; 6
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <GetKeypad+0xb2>
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 1c2:	31 99       	sbic	0x06, 1	; 6
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <GetKeypad+0xbc>
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 1cc:	32 99       	sbic	0x06, 2	; 6
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <GetKeypad+0xcc>
 1d0:	89 e0       	ldi	r24, 0x09	; 9
 1d2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 1d6:	33 9b       	sbis	0x06, 3	; 6
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <GetKeypad+0xd0>
 1da:	60 c0       	rjmp	.+192    	; 0x29c <GetKeypad+0x18c>
 1dc:	33 99       	sbic	0x06, 3	; 6
 1de:	3c c0       	rjmp	.+120    	; 0x258 <GetKeypad+0x148>
 1e0:	8c e0       	ldi	r24, 0x0C	; 12
 1e2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 1e6:	63 c0       	rjmp	.+198    	; 0x2ae <GetKeypad+0x19e>
 1e8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 1ec:	40 c0       	rjmp	.+128    	; 0x26e <GetKeypad+0x15e>
 1ee:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 1f2:	3d c0       	rjmp	.+122    	; 0x26e <GetKeypad+0x15e>
 1f4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 1f8:	3a c0       	rjmp	.+116    	; 0x26e <GetKeypad+0x15e>
 1fa:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 1fe:	37 c0       	rjmp	.+110    	; 0x26e <GetKeypad+0x15e>
 200:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 204:	34 c0       	rjmp	.+104    	; 0x26e <GetKeypad+0x15e>
 206:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 20a:	31 c0       	rjmp	.+98     	; 0x26e <GetKeypad+0x15e>
 20c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 210:	2e c0       	rjmp	.+92     	; 0x26e <GetKeypad+0x15e>
 212:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 216:	2b c0       	rjmp	.+86     	; 0x26e <GetKeypad+0x15e>
 218:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 21c:	28 c0       	rjmp	.+80     	; 0x26e <GetKeypad+0x15e>
 21e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 222:	25 c0       	rjmp	.+74     	; 0x26e <GetKeypad+0x15e>
 224:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 228:	22 c0       	rjmp	.+68     	; 0x26e <GetKeypad+0x15e>
 22a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 22e:	1f c0       	rjmp	.+62     	; 0x26e <GetKeypad+0x15e>
 230:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 234:	1c c0       	rjmp	.+56     	; 0x26e <GetKeypad+0x15e>
 236:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 23a:	19 c0       	rjmp	.+50     	; 0x26e <GetKeypad+0x15e>
 23c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 240:	16 c0       	rjmp	.+44     	; 0x26e <GetKeypad+0x15e>
 242:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 246:	13 c0       	rjmp	.+38     	; 0x26e <GetKeypad+0x15e>
 248:	30 9b       	sbis	0x06, 0	; 6
 24a:	43 c0       	rjmp	.+134    	; 0x2d2 <GetKeypad+0x1c2>
 24c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 250:	0e c0       	rjmp	.+28     	; 0x26e <GetKeypad+0x15e>
 252:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 256:	0b c0       	rjmp	.+22     	; 0x26e <GetKeypad+0x15e>
 258:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <state>
 25c:	8e 2f       	mov	r24, r30
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	82 31       	cpi	r24, 0x12	; 18
 262:	91 05       	cpc	r25, r1
 264:	b0 f5       	brcc	.+108    	; 0x2d2 <GetKeypad+0x1c2>
 266:	fc 01       	movw	r30, r24
 268:	e8 5a       	subi	r30, 0xA8	; 168
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	e8 c0       	rjmp	.+464    	; 0x43e <__tablejump2__>
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	85 b9       	out	0x05, r24	; 5
 272:	31 c0       	rjmp	.+98     	; 0x2d6 <GetKeypad+0x1c6>
 274:	15 b8       	out	0x05, r1	; 5
 276:	2f c0       	rjmp	.+94     	; 0x2d6 <GetKeypad+0x1c6>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	85 b9       	out	0x05, r24	; 5
 27c:	2c c0       	rjmp	.+88     	; 0x2d6 <GetKeypad+0x1c6>
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	85 b9       	out	0x05, r24	; 5
 282:	29 c0       	rjmp	.+82     	; 0x2d6 <GetKeypad+0x1c6>
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	85 b9       	out	0x05, r24	; 5
 288:	26 c0       	rjmp	.+76     	; 0x2d6 <GetKeypad+0x1c6>
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	85 b9       	out	0x05, r24	; 5
 28e:	23 c0       	rjmp	.+70     	; 0x2d6 <GetKeypad+0x1c6>
 290:	85 e0       	ldi	r24, 0x05	; 5
 292:	85 b9       	out	0x05, r24	; 5
 294:	20 c0       	rjmp	.+64     	; 0x2d6 <GetKeypad+0x1c6>
 296:	86 e0       	ldi	r24, 0x06	; 6
 298:	85 b9       	out	0x05, r24	; 5
 29a:	1d c0       	rjmp	.+58     	; 0x2d6 <GetKeypad+0x1c6>
 29c:	87 e0       	ldi	r24, 0x07	; 7
 29e:	85 b9       	out	0x05, r24	; 5
 2a0:	1a c0       	rjmp	.+52     	; 0x2d6 <GetKeypad+0x1c6>
 2a2:	88 e0       	ldi	r24, 0x08	; 8
 2a4:	85 b9       	out	0x05, r24	; 5
 2a6:	17 c0       	rjmp	.+46     	; 0x2d6 <GetKeypad+0x1c6>
 2a8:	89 e0       	ldi	r24, 0x09	; 9
 2aa:	85 b9       	out	0x05, r24	; 5
 2ac:	14 c0       	rjmp	.+40     	; 0x2d6 <GetKeypad+0x1c6>
 2ae:	8e e0       	ldi	r24, 0x0E	; 14
 2b0:	85 b9       	out	0x05, r24	; 5
 2b2:	11 c0       	rjmp	.+34     	; 0x2d6 <GetKeypad+0x1c6>
 2b4:	8f e0       	ldi	r24, 0x0F	; 15
 2b6:	85 b9       	out	0x05, r24	; 5
 2b8:	0e c0       	rjmp	.+28     	; 0x2d6 <GetKeypad+0x1c6>
 2ba:	8a e0       	ldi	r24, 0x0A	; 10
 2bc:	85 b9       	out	0x05, r24	; 5
 2be:	0b c0       	rjmp	.+22     	; 0x2d6 <GetKeypad+0x1c6>
 2c0:	8b e0       	ldi	r24, 0x0B	; 11
 2c2:	85 b9       	out	0x05, r24	; 5
 2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <GetKeypad+0x1c6>
 2c6:	8c e0       	ldi	r24, 0x0C	; 12
 2c8:	85 b9       	out	0x05, r24	; 5
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <GetKeypad+0x1c6>
 2cc:	8d e0       	ldi	r24, 0x0D	; 13
 2ce:	85 b9       	out	0x05, r24	; 5
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <GetKeypad+0x1c6>
 2d2:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <keypadValue>
 2d6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <state>
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	08 95       	ret

000002de <__vector_13>:
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <_avr_timer_cntcurr>
 2f4:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <_avr_timer_cntcurr+0x1>
 2f8:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <_avr_timer_cntcurr+0x2>
 2fc:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <_avr_timer_cntcurr+0x3>
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	a1 09       	sbc	r26, r1
 304:	b1 09       	sbc	r27, r1
 306:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <_avr_timer_cntcurr>
 30a:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <_avr_timer_cntcurr+0x1>
 30e:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <_avr_timer_cntcurr+0x2>
 312:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <_avr_timer_cntcurr+0x3>
 316:	89 2b       	or	r24, r25
 318:	8a 2b       	or	r24, r26
 31a:	8b 2b       	or	r24, r27
 31c:	99 f4       	brne	.+38     	; 0x344 <__vector_13+0x66>
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <TimerFlag>
 324:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 328:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 32c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 330:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 334:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <_avr_timer_cntcurr>
 338:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <_avr_timer_cntcurr+0x1>
 33c:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <_avr_timer_cntcurr+0x2>
 340:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <_avr_timer_cntcurr+0x3>
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <main>:

// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	28 97       	sbiw	r28, 0x08	; 8
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
// Set Data Direction Registers
// Buttons PORTA[0-7], set AVR PORTA to pull down logic
DDRA = 0xFF; PORTA = 0x00;
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	81 b9       	out	0x01, r24	; 1
 36e:	12 b8       	out	0x02, r1	; 2
DDRB = 0xFF; PORTB = 0x00;
 370:	84 b9       	out	0x04, r24	; 4
 372:	15 b8       	out	0x05, r1	; 5
DDRC = 0xF0; PORTC = 0x0F;
 374:	90 ef       	ldi	r25, 0xF0	; 240
 376:	97 b9       	out	0x07, r25	; 7
 378:	9f e0       	ldi	r25, 0x0F	; 15
 37a:	98 b9       	out	0x08, r25	; 8
DDRD = 0xFF; PORTD = 0x00;
 37c:	8a b9       	out	0x0a, r24	; 10
 37e:	1b b8       	out	0x0b, r1	; 11
unsigned long int SMTick3_period = SMTick3_calc/GCD;
unsigned long int SMTick4_period = SMTick4_calc/GCD;

//Declare an array of tasks 
static task task1, task2, task3, task4;
task *tasks[] = { &task1, &task2, &task3, &task4};
 380:	98 e0       	ldi	r25, 0x08	; 8
 382:	e4 e0       	ldi	r30, 0x04	; 4
 384:	f1 e0       	ldi	r31, 0x01	; 1
 386:	de 01       	movw	r26, r28
 388:	11 96       	adiw	r26, 0x01	; 1
 38a:	01 90       	ld	r0, Z+
 38c:	0d 92       	st	X+, r0
 38e:	9a 95       	dec	r25
 390:	e1 f7       	brne	.-8      	; 0x38a <main+0x34>
const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

 //Task 1
task1.state = -1;//Task initial state.
 392:	ed e2       	ldi	r30, 0x2D	; 45
 394:	f1 e0       	ldi	r31, 0x01	; 1
 396:	80 83       	st	Z, r24
task1.period = SMTick1_period;//Task Period.
 398:	82 e3       	ldi	r24, 0x32	; 50
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	a0 e0       	ldi	r26, 0x00	; 0
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	81 83       	std	Z+1, r24	; 0x01
 3a2:	92 83       	std	Z+2, r25	; 0x02
 3a4:	a3 83       	std	Z+3, r26	; 0x03
 3a6:	b4 83       	std	Z+4, r27	; 0x04
task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 3a8:	85 83       	std	Z+5, r24	; 0x05
 3aa:	96 83       	std	Z+6, r25	; 0x06
 3ac:	a7 83       	std	Z+7, r26	; 0x07
 3ae:	b0 87       	std	Z+8, r27	; 0x08
task1.TickFct = &GetKeypad;//Function pointer for the tick.
 3b0:	88 e8       	ldi	r24, 0x88	; 136
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	92 87       	std	Z+10, r25	; 0x0a
 3b6:	81 87       	std	Z+9, r24	; 0x09
 3b8:	7e 01       	movw	r14, r28
 3ba:	89 e0       	ldi	r24, 0x09	; 9
 3bc:	e8 0e       	add	r14, r24
 3be:	f1 1c       	adc	r15, r1
 3c0:	de 01       	movw	r26, r28
 3c2:	11 96       	adiw	r26, 0x01	; 1
 3c4:	6d 01       	movw	r12, r26
while(1) {

	// Scheduler code
	for ( i = 0; i < numTasks; i++ ) {
		// Task is ready to tick
		if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 3c6:	f6 01       	movw	r30, r12
 3c8:	01 91       	ld	r16, Z+
 3ca:	11 91       	ld	r17, Z+
 3cc:	6f 01       	movw	r12, r30
 3ce:	d8 01       	movw	r26, r16
 3d0:	15 96       	adiw	r26, 0x05	; 5
 3d2:	4d 91       	ld	r20, X+
 3d4:	5d 91       	ld	r21, X+
 3d6:	6d 91       	ld	r22, X+
 3d8:	7c 91       	ld	r23, X
 3da:	18 97       	sbiw	r26, 0x08	; 8
 3dc:	11 96       	adiw	r26, 0x01	; 1
 3de:	8d 91       	ld	r24, X+
 3e0:	9d 91       	ld	r25, X+
 3e2:	0d 90       	ld	r0, X+
 3e4:	bc 91       	ld	r27, X
 3e6:	a0 2d       	mov	r26, r0
 3e8:	48 17       	cp	r20, r24
 3ea:	59 07       	cpc	r21, r25
 3ec:	6a 07       	cpc	r22, r26
 3ee:	7b 07       	cpc	r23, r27
 3f0:	81 f4       	brne	.+32     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			// Setting next state for task
			tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 3f2:	f8 01       	movw	r30, r16
 3f4:	80 81       	ld	r24, Z
 3f6:	01 84       	ldd	r0, Z+9	; 0x09
 3f8:	f2 85       	ldd	r31, Z+10	; 0x0a
 3fa:	e0 2d       	mov	r30, r0
 3fc:	08 2e       	mov	r0, r24
 3fe:	00 0c       	add	r0, r0
 400:	99 0b       	sbc	r25, r25
 402:	09 95       	icall
 404:	d8 01       	movw	r26, r16
 406:	8c 93       	st	X, r24
			// Reset the elapsed time for next tick.
			tasks[i]->elapsedTime = 0;
 408:	f8 01       	movw	r30, r16
 40a:	15 82       	std	Z+5, r1	; 0x05
 40c:	16 82       	std	Z+6, r1	; 0x06
 40e:	17 82       	std	Z+7, r1	; 0x07
 410:	10 86       	std	Z+8, r1	; 0x08
		}
		tasks[i]->elapsedTime += 1;
 412:	f8 01       	movw	r30, r16
 414:	85 81       	ldd	r24, Z+5	; 0x05
 416:	96 81       	ldd	r25, Z+6	; 0x06
 418:	a7 81       	ldd	r26, Z+7	; 0x07
 41a:	b0 85       	ldd	r27, Z+8	; 0x08
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	a1 1d       	adc	r26, r1
 420:	b1 1d       	adc	r27, r1
 422:	85 83       	std	Z+5, r24	; 0x05
 424:	96 83       	std	Z+6, r25	; 0x06
 426:	a7 83       	std	Z+7, r26	; 0x07
 428:	b0 87       	std	Z+8, r27	; 0x08
*/
unsigned short i; // Scheduler for-loop iterator
while(1) {

	// Scheduler code
	for ( i = 0; i < numTasks; i++ ) {
 42a:	ce 14       	cp	r12, r14
 42c:	df 04       	cpc	r13, r15
 42e:	59 f6       	brne	.-106    	; 0x3c6 <main+0x70>
			// Reset the elapsed time for next tick.
			tasks[i]->elapsedTime = 0;
		}
		tasks[i]->elapsedTime += 1;
	}
	while(!TimerFlag);
 430:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <TimerFlag>
 434:	88 23       	and	r24, r24
 436:	e1 f3       	breq	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	TimerFlag = 0;
 438:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <TimerFlag>
	
	//GetKeypad();
}
 43c:	c1 cf       	rjmp	.-126    	; 0x3c0 <main+0x6a>

0000043e <__tablejump2__>:
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	00 24       	eor	r0, r0
 444:	00 1c       	adc	r0, r0
 446:	0b be       	out	0x3b, r0	; 59
 448:	07 90       	elpm	r0, Z+
 44a:	f6 91       	elpm	r31, Z
 44c:	e0 2d       	mov	r30, r0
 44e:	09 94       	ijmp

00000450 <_exit>:
 450:	f8 94       	cli

00000452 <__stop_program>:
 452:	ff cf       	rjmp	.-2      	; 0x452 <__stop_program>
