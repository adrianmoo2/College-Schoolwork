
jshin026_cyee008_lab10_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004f0  00000584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800104  00800104  00000588  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f9f  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009dc  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ce  00000000  00000000  0000201b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000026ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062a  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a8  00000000  00000000  00002eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003456  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	00 00       	nop
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	00 00       	nop
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	00 00       	nop
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	00 00       	nop
  14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
  16:	00 00       	nop
  18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	00 00       	nop
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
  26:	00 00       	nop
  28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
  32:	00 00       	nop
  34:	8f c0       	rjmp	.+286    	; 0x154 <__vector_13>
  36:	00 00       	nop
  38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
  42:	00 00       	nop
  44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
  52:	00 00       	nop
  54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
  56:	00 00       	nop
  58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
  66:	00 00       	nop
  68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
  72:	00 00       	nop
  74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
  76:	00 00       	nop
  78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
  82:	00 00       	nop
  84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
  86:	00 00       	nop
  88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5f 01       	movw	r10, r30
  8e:	64 01       	movw	r12, r8
  90:	b6 01       	movw	r22, r12
  92:	69 01       	movw	r12, r18
  94:	6e 01       	movw	r12, r28
  96:	73 01       	movw	r14, r6
  98:	78 01       	movw	r14, r16
  9a:	7d 01       	movw	r14, r26
  9c:	82 01       	movw	r16, r4
  9e:	89 01       	movw	r16, r18
  a0:	8e 01       	movw	r16, r28
  a2:	93 01       	movw	r18, r6
  a4:	9a 01       	movw	r18, r20
  a6:	9f 01       	movw	r18, r30
  a8:	a4 01       	movw	r20, r8
  aa:	a9 01       	movw	r20, r18
  ac:	ae 01       	movw	r20, r28

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e4       	ldi	r29, 0x40	; 64
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	e0 ef       	ldi	r30, 0xF0	; 240
  c2:	f4 e0       	ldi	r31, 0x04	; 4
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
  ca:	07 90       	elpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	a4 30       	cpi	r26, 0x04	; 4
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	a4 e0       	ldi	r26, 0x04	; 4
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a0 32       	cpi	r26, 0x20	; 32
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	6f d1       	rcall	.+734    	; 0x3c4 <main>
  e6:	02 c2       	rjmp	.+1028   	; 0x4ec <_exit>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <TimerSet>:
		if(c==0){return b;}
		a = b;
b = c;
	}
	return 0;
}
  ea:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  ee:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  f2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  f6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  fa:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <_avr_timer_cntcurr>
  fe:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <_avr_timer_cntcurr+0x1>
 102:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_avr_timer_cntcurr+0x2>
 106:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_avr_timer_cntcurr+0x3>
 10a:	08 95       	ret

0000010c <TimerOn>:
 10c:	8b e0       	ldi	r24, 0x0B	; 11
 10e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 112:	8d e7       	ldi	r24, 0x7D	; 125
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 11a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 124:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 128:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 130:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 134:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 138:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 13c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_avr_timer_cntcurr>
 140:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_avr_timer_cntcurr+0x1>
 144:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <_avr_timer_cntcurr+0x2>
 148:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <_avr_timer_cntcurr+0x3>
 14c:	8f b7       	in	r24, 0x3f	; 63
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	8f bf       	out	0x3f, r24	; 63
 152:	08 95       	ret

00000154 <__vector_13>:
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_avr_timer_cntcurr>
 16a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <_avr_timer_cntcurr+0x1>
 16e:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <_avr_timer_cntcurr+0x2>
 172:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <_avr_timer_cntcurr+0x3>
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	a1 09       	sbc	r26, r1
 17a:	b1 09       	sbc	r27, r1
 17c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_avr_timer_cntcurr>
 180:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_avr_timer_cntcurr+0x1>
 184:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <_avr_timer_cntcurr+0x2>
 188:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <_avr_timer_cntcurr+0x3>
 18c:	89 2b       	or	r24, r25
 18e:	8a 2b       	or	r24, r26
 190:	8b 2b       	or	r24, r27
 192:	99 f4       	brne	.+38     	; 0x1ba <__vector_13+0x66>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <TimerFlag>
 19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1aa:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_avr_timer_cntcurr>
 1ae:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_avr_timer_cntcurr+0x1>
 1b2:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <_avr_timer_cntcurr+0x2>
 1b6:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <_avr_timer_cntcurr+0x3>
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <delay_ms>:
 1cc:	18 16       	cp	r1, r24
 1ce:	19 06       	cpc	r1, r25
 1d0:	5c f0       	brlt	.+22     	; 0x1e8 <delay_ms+0x1c>
 1d2:	08 95       	ret
 1d4:	00 00       	nop
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	31 09       	sbc	r19, r1
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <delay_ms+0x8>
 1dc:	4f 5f       	subi	r20, 0xFF	; 255
 1de:	5f 4f       	sbci	r21, 0xFF	; 255
 1e0:	84 17       	cp	r24, r20
 1e2:	95 07       	cpc	r25, r21
 1e4:	19 f4       	brne	.+6      	; 0x1ec <delay_ms+0x20>
 1e6:	08 95       	ret
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	27 e0       	ldi	r18, 0x07	; 7
 1ee:	33 e0       	ldi	r19, 0x03	; 3
 1f0:	f1 cf       	rjmp	.-30     	; 0x1d4 <delay_ms+0x8>

000001f2 <LCD_WriteCommand>:
 1f2:	10 98       	cbi	0x02, 0	; 2
 1f4:	8b b9       	out	0x0b, r24	; 11
 1f6:	11 9a       	sbi	0x02, 1	; 2
 1f8:	00 00       	nop
 1fa:	11 98       	cbi	0x02, 1	; 2
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	e5 cf       	rjmp	.-54     	; 0x1cc <delay_ms>
 202:	08 95       	ret

00000204 <LCD_ClearScreen>:
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	f5 cf       	rjmp	.-22     	; 0x1f2 <LCD_WriteCommand>
 208:	08 95       	ret

0000020a <GetKeypad>:
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	ec 01       	movw	r28, r24
 210:	89 2b       	or	r24, r25
 212:	09 f0       	breq	.+2      	; 0x216 <GetKeypad+0xc>
 214:	49 c0       	rjmp	.+146    	; 0x2a8 <GetKeypad+0x9e>
 216:	8f e7       	ldi	r24, 0x7F	; 127
 218:	88 b9       	out	0x08, r24	; 8
 21a:	00 00       	nop
 21c:	30 99       	sbic	0x06, 0	; 6
 21e:	02 c0       	rjmp	.+4      	; 0x224 <GetKeypad+0x1a>
 220:	ce e0       	ldi	r28, 0x0E	; 14
 222:	d0 e0       	ldi	r29, 0x00	; 0
 224:	31 99       	sbic	0x06, 1	; 6
 226:	02 c0       	rjmp	.+4      	; 0x22c <GetKeypad+0x22>
 228:	cf e0       	ldi	r28, 0x0F	; 15
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	32 99       	sbic	0x06, 2	; 6
 22e:	02 c0       	rjmp	.+4      	; 0x234 <GetKeypad+0x2a>
 230:	c0 e1       	ldi	r28, 0x10	; 16
 232:	d0 e0       	ldi	r29, 0x00	; 0
 234:	33 99       	sbic	0x06, 3	; 6
 236:	02 c0       	rjmp	.+4      	; 0x23c <GetKeypad+0x32>
 238:	c1 e1       	ldi	r28, 0x11	; 17
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	8f eb       	ldi	r24, 0xBF	; 191
 23e:	88 b9       	out	0x08, r24	; 8
 240:	00 00       	nop
 242:	30 99       	sbic	0x06, 0	; 6
 244:	02 c0       	rjmp	.+4      	; 0x24a <GetKeypad+0x40>
 246:	c5 e0       	ldi	r28, 0x05	; 5
 248:	d0 e0       	ldi	r29, 0x00	; 0
 24a:	31 99       	sbic	0x06, 1	; 6
 24c:	02 c0       	rjmp	.+4      	; 0x252 <GetKeypad+0x48>
 24e:	c8 e0       	ldi	r28, 0x08	; 8
 250:	d0 e0       	ldi	r29, 0x00	; 0
 252:	32 99       	sbic	0x06, 2	; 6
 254:	02 c0       	rjmp	.+4      	; 0x25a <GetKeypad+0x50>
 256:	cb e0       	ldi	r28, 0x0B	; 11
 258:	d0 e0       	ldi	r29, 0x00	; 0
 25a:	33 99       	sbic	0x06, 3	; 6
 25c:	02 c0       	rjmp	.+4      	; 0x262 <GetKeypad+0x58>
 25e:	cd e0       	ldi	r28, 0x0D	; 13
 260:	d0 e0       	ldi	r29, 0x00	; 0
 262:	8f ed       	ldi	r24, 0xDF	; 223
 264:	88 b9       	out	0x08, r24	; 8
 266:	00 00       	nop
 268:	30 99       	sbic	0x06, 0	; 6
 26a:	02 c0       	rjmp	.+4      	; 0x270 <GetKeypad+0x66>
 26c:	c4 e0       	ldi	r28, 0x04	; 4
 26e:	d0 e0       	ldi	r29, 0x00	; 0
 270:	31 99       	sbic	0x06, 1	; 6
 272:	02 c0       	rjmp	.+4      	; 0x278 <GetKeypad+0x6e>
 274:	c7 e0       	ldi	r28, 0x07	; 7
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	32 99       	sbic	0x06, 2	; 6
 27a:	02 c0       	rjmp	.+4      	; 0x280 <GetKeypad+0x76>
 27c:	ca e0       	ldi	r28, 0x0A	; 10
 27e:	d0 e0       	ldi	r29, 0x00	; 0
 280:	33 99       	sbic	0x06, 3	; 6
 282:	02 c0       	rjmp	.+4      	; 0x288 <GetKeypad+0x7e>
 284:	c1 e0       	ldi	r28, 0x01	; 1
 286:	d0 e0       	ldi	r29, 0x00	; 0
 288:	8f ee       	ldi	r24, 0xEF	; 239
 28a:	88 b9       	out	0x08, r24	; 8
 28c:	00 00       	nop
 28e:	30 99       	sbic	0x06, 0	; 6
 290:	02 c0       	rjmp	.+4      	; 0x296 <GetKeypad+0x8c>
 292:	c2 e0       	ldi	r28, 0x02	; 2
 294:	d0 e0       	ldi	r29, 0x00	; 0
 296:	31 99       	sbic	0x06, 1	; 6
 298:	02 c0       	rjmp	.+4      	; 0x29e <GetKeypad+0x94>
 29a:	c6 e0       	ldi	r28, 0x06	; 6
 29c:	d0 e0       	ldi	r29, 0x00	; 0
 29e:	32 9b       	sbis	0x06, 2	; 6
 2a0:	62 c0       	rjmp	.+196    	; 0x366 <GetKeypad+0x15c>
 2a2:	33 9b       	sbis	0x06, 3	; 6
 2a4:	40 c0       	rjmp	.+128    	; 0x326 <GetKeypad+0x11c>
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <GetKeypad+0xa2>
 2a8:	c0 e0       	ldi	r28, 0x00	; 0
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
 2ac:	fe 01       	movw	r30, r28
 2ae:	31 97       	sbiw	r30, 0x01	; 1
 2b0:	e1 31       	cpi	r30, 0x11	; 17
 2b2:	f1 05       	cpc	r31, r1
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <GetKeypad+0xae>
 2b6:	5a c0       	rjmp	.+180    	; 0x36c <GetKeypad+0x162>
 2b8:	ea 5b       	subi	r30, 0xBA	; 186
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	0e c1       	rjmp	.+540    	; 0x4da <__tablejump2__>
 2be:	80 e3       	ldi	r24, 0x30	; 48
 2c0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 2c4:	9f df       	rcall	.-194    	; 0x204 <LCD_ClearScreen>
 2c6:	52 c0       	rjmp	.+164    	; 0x36c <GetKeypad+0x162>
 2c8:	81 e3       	ldi	r24, 0x31	; 49
 2ca:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 2ce:	9a df       	rcall	.-204    	; 0x204 <LCD_ClearScreen>
 2d0:	4d c0       	rjmp	.+154    	; 0x36c <GetKeypad+0x162>
 2d2:	82 e3       	ldi	r24, 0x32	; 50
 2d4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 2d8:	95 df       	rcall	.-214    	; 0x204 <LCD_ClearScreen>
 2da:	48 c0       	rjmp	.+144    	; 0x36c <GetKeypad+0x162>
 2dc:	83 e3       	ldi	r24, 0x33	; 51
 2de:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 2e2:	90 df       	rcall	.-224    	; 0x204 <LCD_ClearScreen>
 2e4:	43 c0       	rjmp	.+134    	; 0x36c <GetKeypad+0x162>
 2e6:	84 e3       	ldi	r24, 0x34	; 52
 2e8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 2ec:	8b df       	rcall	.-234    	; 0x204 <LCD_ClearScreen>
 2ee:	3e c0       	rjmp	.+124    	; 0x36c <GetKeypad+0x162>
 2f0:	85 e3       	ldi	r24, 0x35	; 53
 2f2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 2f6:	86 df       	rcall	.-244    	; 0x204 <LCD_ClearScreen>
 2f8:	39 c0       	rjmp	.+114    	; 0x36c <GetKeypad+0x162>
 2fa:	86 e3       	ldi	r24, 0x36	; 54
 2fc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 300:	81 df       	rcall	.-254    	; 0x204 <LCD_ClearScreen>
 302:	34 c0       	rjmp	.+104    	; 0x36c <GetKeypad+0x162>
 304:	87 e3       	ldi	r24, 0x37	; 55
 306:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 30a:	7c df       	rcall	.-264    	; 0x204 <LCD_ClearScreen>
 30c:	c9 e0       	ldi	r28, 0x09	; 9
 30e:	d0 e0       	ldi	r29, 0x00	; 0
 310:	2d c0       	rjmp	.+90     	; 0x36c <GetKeypad+0x162>
 312:	88 e3       	ldi	r24, 0x38	; 56
 314:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 318:	75 df       	rcall	.-278    	; 0x204 <LCD_ClearScreen>
 31a:	28 c0       	rjmp	.+80     	; 0x36c <GetKeypad+0x162>
 31c:	89 e3       	ldi	r24, 0x39	; 57
 31e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 322:	70 df       	rcall	.-288    	; 0x204 <LCD_ClearScreen>
 324:	23 c0       	rjmp	.+70     	; 0x36c <GetKeypad+0x162>
 326:	8a e2       	ldi	r24, 0x2A	; 42
 328:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 32c:	6b df       	rcall	.-298    	; 0x204 <LCD_ClearScreen>
 32e:	cc e0       	ldi	r28, 0x0C	; 12
 330:	d0 e0       	ldi	r29, 0x00	; 0
 332:	1c c0       	rjmp	.+56     	; 0x36c <GetKeypad+0x162>
 334:	83 e2       	ldi	r24, 0x23	; 35
 336:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 33a:	64 df       	rcall	.-312    	; 0x204 <LCD_ClearScreen>
 33c:	17 c0       	rjmp	.+46     	; 0x36c <GetKeypad+0x162>
 33e:	81 e4       	ldi	r24, 0x41	; 65
 340:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 344:	5f df       	rcall	.-322    	; 0x204 <LCD_ClearScreen>
 346:	12 c0       	rjmp	.+36     	; 0x36c <GetKeypad+0x162>
 348:	82 e4       	ldi	r24, 0x42	; 66
 34a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 34e:	5a df       	rcall	.-332    	; 0x204 <LCD_ClearScreen>
 350:	0d c0       	rjmp	.+26     	; 0x36c <GetKeypad+0x162>
 352:	83 e4       	ldi	r24, 0x43	; 67
 354:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 358:	55 df       	rcall	.-342    	; 0x204 <LCD_ClearScreen>
 35a:	08 c0       	rjmp	.+16     	; 0x36c <GetKeypad+0x162>
 35c:	84 e4       	ldi	r24, 0x44	; 68
 35e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <keypadValue>
 362:	50 df       	rcall	.-352    	; 0x204 <LCD_ClearScreen>
 364:	03 c0       	rjmp	.+6      	; 0x36c <GetKeypad+0x162>
 366:	33 9b       	sbis	0x06, 3	; 6
 368:	de cf       	rjmp	.-68     	; 0x326 <GetKeypad+0x11c>
 36a:	cc cf       	rjmp	.-104    	; 0x304 <GetKeypad+0xfa>
 36c:	ce 01       	movw	r24, r28
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <LCD_Cursor>:
 374:	81 31       	cpi	r24, 0x11	; 17
 376:	18 f4       	brcc	.+6      	; 0x37e <LCD_Cursor+0xa>
 378:	81 58       	subi	r24, 0x81	; 129
 37a:	3b cf       	rjmp	.-394    	; 0x1f2 <LCD_WriteCommand>
 37c:	08 95       	ret
 37e:	81 55       	subi	r24, 0x51	; 81
 380:	38 cf       	rjmp	.-400    	; 0x1f2 <LCD_WriteCommand>
 382:	08 95       	ret

00000384 <LCD_init>:
 384:	84 e6       	ldi	r24, 0x64	; 100
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	21 df       	rcall	.-446    	; 0x1cc <delay_ms>
 38a:	88 e3       	ldi	r24, 0x38	; 56
 38c:	32 df       	rcall	.-412    	; 0x1f2 <LCD_WriteCommand>
 38e:	86 e0       	ldi	r24, 0x06	; 6
 390:	30 df       	rcall	.-416    	; 0x1f2 <LCD_WriteCommand>
 392:	8f e0       	ldi	r24, 0x0F	; 15
 394:	2e df       	rcall	.-420    	; 0x1f2 <LCD_WriteCommand>
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	2c df       	rcall	.-424    	; 0x1f2 <LCD_WriteCommand>
 39a:	8a e0       	ldi	r24, 0x0A	; 10
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	16 cf       	rjmp	.-468    	; 0x1cc <delay_ms>
 3a0:	08 95       	ret

000003a2 <LCD_WriteData>:
 3a2:	10 9a       	sbi	0x02, 0	; 2
 3a4:	8b b9       	out	0x0b, r24	; 11
 3a6:	11 9a       	sbi	0x02, 1	; 2
 3a8:	00 00       	nop
 3aa:	11 98       	cbi	0x02, 1	; 2
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0d cf       	rjmp	.-486    	; 0x1cc <delay_ms>
 3b2:	08 95       	ret

000003b4 <SM_tick>:
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	de df       	rcall	.-68     	; 0x374 <LCD_Cursor>
 3b8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <keypadValue>
 3bc:	f2 df       	rcall	.-28     	; 0x3a2 <LCD_WriteData>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	08 95       	ret

000003c4 <main>:

// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <main+0x6>
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <main+0x8>
 3cc:	cd b7       	in	r28, 0x3d	; 61
LCD_init();
 3ce:	de b7       	in	r29, 0x3e	; 62
//LCD_ClearScreen();
// Set Data Direction Registers
// Buttons PORTA[0-7], set AVR PORTA to pull down logic
DDRA = 0xFF; PORTA = 0x00;
 3d0:	d9 df       	rcall	.-78     	; 0x384 <LCD_init>
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	81 b9       	out	0x01, r24	; 1
DDRB = 0xFF; PORTB = 0x00;
 3d6:	12 b8       	out	0x02, r1	; 2
 3d8:	84 b9       	out	0x04, r24	; 4
DDRC = 0xF0; PORTC = 0x0F;
 3da:	15 b8       	out	0x05, r1	; 5
 3dc:	90 ef       	ldi	r25, 0xF0	; 240
 3de:	97 b9       	out	0x07, r25	; 7
 3e0:	9f e0       	ldi	r25, 0x0F	; 15
DDRD = 0xFF; PORTD = 0x00;
 3e2:	98 b9       	out	0x08, r25	; 8
 3e4:	8a b9       	out	0x0a, r24	; 10
unsigned long int SMTick1_period = SMTick1_calc/GCD;
unsigned long int SMTick2_period = SMTick2_calc/GCD;

//Declare an array of tasks 
static task task1, task2;
task *tasks[] = { &task1, &task2};
 3e6:	1b b8       	out	0x0b, r1	; 11
 3e8:	af e0       	ldi	r26, 0x0F	; 15
 3ea:	b1 e0       	ldi	r27, 0x01	; 1
 3ec:	ba 83       	std	Y+2, r27	; 0x02
 3ee:	a9 83       	std	Y+1, r26	; 0x01
 3f0:	e4 e0       	ldi	r30, 0x04	; 4
 3f2:	f1 e0       	ldi	r31, 0x01	; 1
 3f4:	fc 83       	std	Y+4, r31	; 0x04
const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

 //Task 1
task1.state = -1;//Task initial state.
 3f6:	eb 83       	std	Y+3, r30	; 0x03
task1.period = SMTick1_period;//Task Period.
 3f8:	8c 93       	st	X, r24
 3fa:	45 e0       	ldi	r20, 0x05	; 5
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	11 96       	adiw	r26, 0x01	; 1
 404:	4d 93       	st	X+, r20
 406:	5d 93       	st	X+, r21
 408:	6d 93       	st	X+, r22
 40a:	7c 93       	st	X, r23
task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 40c:	14 97       	sbiw	r26, 0x04	; 4
 40e:	15 96       	adiw	r26, 0x05	; 5
 410:	4d 93       	st	X+, r20
 412:	5d 93       	st	X+, r21
 414:	6d 93       	st	X+, r22
 416:	7c 93       	st	X, r23
task1.TickFct = &GetKeypad;//Function pointer for the tick.
 418:	18 97       	sbiw	r26, 0x08	; 8
 41a:	25 e0       	ldi	r18, 0x05	; 5
 41c:	31 e0       	ldi	r19, 0x01	; 1
 41e:	1a 96       	adiw	r26, 0x0a	; 10
 420:	3c 93       	st	X, r19
 422:	2e 93       	st	-X, r18

 //Task 2
 task2.state = -1;//Task initial state.
 424:	19 97       	sbiw	r26, 0x09	; 9
 task2.period = SMTick2_period;//Task Period.
 426:	80 83       	st	Z, r24
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	a0 e0       	ldi	r26, 0x00	; 0
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	81 83       	std	Z+1, r24	; 0x01
 432:	92 83       	std	Z+2, r25	; 0x02
 434:	a3 83       	std	Z+3, r26	; 0x03
 task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 436:	b4 83       	std	Z+4, r27	; 0x04
 438:	85 83       	std	Z+5, r24	; 0x05
 43a:	96 83       	std	Z+6, r25	; 0x06
 43c:	a7 83       	std	Z+7, r26	; 0x07
 task2.TickFct = &SM_tick;//Function pointer for the tick.
 43e:	b0 87       	std	Z+8, r27	; 0x08
 440:	8a ed       	ldi	r24, 0xDA	; 218
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	92 87       	std	Z+10, r25	; 0x0a
//PORTB = 0xFF;

// Set the timer and turn it on
TimerSet(GCD);
 446:	81 87       	std	Z+9, r24	; 0x09
 448:	6a e0       	ldi	r22, 0x0A	; 10
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	80 e0       	ldi	r24, 0x00	; 0
TimerOn();
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	4c de       	rcall	.-872    	; 0xea <TimerSet>
 452:	5c de       	rcall	.-840    	; 0x10c <TimerOn>
 454:	7e 01       	movw	r14, r28
 456:	85 e0       	ldi	r24, 0x05	; 5
 458:	e8 0e       	add	r14, r24
 45a:	f1 1c       	adc	r15, r1
 45c:	de 01       	movw	r26, r28
 45e:	11 96       	adiw	r26, 0x01	; 1
while(1) {
//LCD_ClearScreen();
	// Scheduler code
	for ( i = 0; i < numTasks; i++ ) {
		// Task is ready to tick
		if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 460:	6d 01       	movw	r12, r26
 462:	f6 01       	movw	r30, r12
 464:	01 91       	ld	r16, Z+
 466:	11 91       	ld	r17, Z+
 468:	6f 01       	movw	r12, r30
 46a:	d8 01       	movw	r26, r16
 46c:	15 96       	adiw	r26, 0x05	; 5
 46e:	4d 91       	ld	r20, X+
 470:	5d 91       	ld	r21, X+
 472:	6d 91       	ld	r22, X+
 474:	7c 91       	ld	r23, X
 476:	18 97       	sbiw	r26, 0x08	; 8
 478:	11 96       	adiw	r26, 0x01	; 1
 47a:	8d 91       	ld	r24, X+
 47c:	9d 91       	ld	r25, X+
 47e:	0d 90       	ld	r0, X+
 480:	bc 91       	ld	r27, X
 482:	a0 2d       	mov	r26, r0
 484:	48 17       	cp	r20, r24
 486:	59 07       	cpc	r21, r25
 488:	6a 07       	cpc	r22, r26
 48a:	7b 07       	cpc	r23, r27
			// Setting next state for task
			tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 48c:	81 f4       	brne	.+32     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 48e:	f8 01       	movw	r30, r16
 490:	80 81       	ld	r24, Z
 492:	01 84       	ldd	r0, Z+9	; 0x09
 494:	f2 85       	ldd	r31, Z+10	; 0x0a
 496:	e0 2d       	mov	r30, r0
 498:	08 2e       	mov	r0, r24
 49a:	00 0c       	add	r0, r0
 49c:	99 0b       	sbc	r25, r25
 49e:	09 95       	icall
 4a0:	d8 01       	movw	r26, r16
			// Reset the elapsed time for next tick.
			tasks[i]->elapsedTime = 0;
 4a2:	8c 93       	st	X, r24
 4a4:	f8 01       	movw	r30, r16
 4a6:	15 82       	std	Z+5, r1	; 0x05
 4a8:	16 82       	std	Z+6, r1	; 0x06
 4aa:	17 82       	std	Z+7, r1	; 0x07
		}
		tasks[i]->elapsedTime += 1;
 4ac:	10 86       	std	Z+8, r1	; 0x08
 4ae:	f8 01       	movw	r30, r16
 4b0:	85 81       	ldd	r24, Z+5	; 0x05
 4b2:	96 81       	ldd	r25, Z+6	; 0x06
 4b4:	a7 81       	ldd	r26, Z+7	; 0x07
 4b6:	b0 85       	ldd	r27, Z+8	; 0x08
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	a1 1d       	adc	r26, r1
 4bc:	b1 1d       	adc	r27, r1
 4be:	85 83       	std	Z+5, r24	; 0x05
 4c0:	96 83       	std	Z+6, r25	; 0x06
 4c2:	a7 83       	std	Z+7, r26	; 0x07
//LCD_ClearScreen();
unsigned short i; // Scheduler for-loop iterator
while(1) {
//LCD_ClearScreen();
	// Scheduler code
	for ( i = 0; i < numTasks; i++ ) {
 4c4:	b0 87       	std	Z+8, r27	; 0x08
 4c6:	ce 14       	cp	r12, r14
 4c8:	df 04       	cpc	r13, r15
			// Reset the elapsed time for next tick.
			tasks[i]->elapsedTime = 0;
		}
		tasks[i]->elapsedTime += 1;
	}
	while(!TimerFlag);
 4ca:	59 f6       	brne	.-106    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 4cc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <TimerFlag>
 4d0:	88 23       	and	r24, r24
	TimerFlag = 0;
 4d2:	e1 f3       	breq	.-8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d4:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <TimerFlag>
 4d8:	c1 cf       	rjmp	.-126    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>

000004da <__tablejump2__>:
 4da:	ee 0f       	add	r30, r30
 4dc:	ff 1f       	adc	r31, r31
 4de:	00 24       	eor	r0, r0
 4e0:	00 1c       	adc	r0, r0
 4e2:	0b be       	out	0x3b, r0	; 59
 4e4:	07 90       	elpm	r0, Z+
 4e6:	f6 91       	elpm	r31, Z
 4e8:	e0 2d       	mov	r30, r0
 4ea:	09 94       	ijmp

000004ec <_exit>:
 4ec:	f8 94       	cli

000004ee <__stop_program>:
 4ee:	ff cf       	rjmp	.-2      	; 0x4ee <__stop_program>
