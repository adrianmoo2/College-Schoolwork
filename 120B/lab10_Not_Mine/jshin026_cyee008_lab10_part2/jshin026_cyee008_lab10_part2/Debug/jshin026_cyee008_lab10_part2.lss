
jshin026_cyee008_lab10_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000308  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000308  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800134  00800134  000003d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001073  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a39  00000000  00000000  0000157b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c9  00000000  00000000  00001fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000717  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000062f  00000000  00000000  00003163  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b1 c0       	rjmp	.+354    	; 0x198 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e0       	ldi	r30, 0x08	; 8
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 33       	cpi	r26, 0x34	; 52
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e3       	ldi	r26, 0x34	; 52
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 36       	cpi	r26, 0x65	; 101
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a6 d0       	rcall	.+332    	; 0x210 <main>
  c4:	1f c1       	rjmp	.+574    	; 0x304 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	}

	PORTB = output;	// Write combined, shared output variables to PORTB

	return state;
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	10 98       	cbi	0x02, 0	; 2
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	11 9a       	sbi	0x02, 1	; 2
  f4:	00 00       	nop
  f6:	11 98       	cbi	0x02, 1	; 2
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	10 9a       	sbi	0x02, 0	; 2
 136:	8b b9       	out	0x0b, r24	; 11
 138:	11 9a       	sbi	0x02, 1	; 2
 13a:	00 00       	nop
 13c:	11 98       	cbi	0x02, 1	; 2
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <lcd_tick>:
 178:	6d e0       	ldi	r22, 0x0D	; 13
 17a:	71 e0       	ldi	r23, 0x01	; 1
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 180:	e2 df       	rcall	.-60     	; 0x146 <LCD_DisplayString>
 182:	85 b1       	in	r24, 0x05	; 5
 184:	80 95       	com	r24
 186:	85 b9       	out	0x05, r24	; 5
 188:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 18c:	81 50       	subi	r24, 0x01	; 1
 18e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	08 95       	ret

00000198 <__vector_13>:
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_avr_timer_cntcurr>
 1ae:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_avr_timer_cntcurr+0x1>
 1b2:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <_avr_timer_cntcurr+0x2>
 1b6:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <_avr_timer_cntcurr+0x3>
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	a1 09       	sbc	r26, r1
 1be:	b1 09       	sbc	r27, r1
 1c0:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <_avr_timer_cntcurr>
 1c4:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <_avr_timer_cntcurr+0x1>
 1c8:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <_avr_timer_cntcurr+0x2>
 1cc:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <_avr_timer_cntcurr+0x3>
 1d0:	89 2b       	or	r24, r25
 1d2:	8a 2b       	or	r24, r26
 1d4:	8b 2b       	or	r24, r27
 1d6:	99 f4       	brne	.+38     	; 0x1fe <__vector_13+0x66>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <TimerFlag>
 1de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 1e2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 1e6:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 1ea:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 1ee:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <_avr_timer_cntcurr>
 1f2:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <_avr_timer_cntcurr+0x1>
 1f6:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <_avr_timer_cntcurr+0x2>
 1fa:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <_avr_timer_cntcurr+0x3>
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <main>:

// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	28 97       	sbiw	r28, 0x08	; 8
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
LCD_init();
 222:	cd bf       	out	0x3d, r28	; 61

// Set Data Direction Registers
// Buttons PORTA[0-7], set AVR PORTA to pull down logic
DDRA = 0xFF; PORTA = 0x00;
 224:	78 df       	rcall	.-272    	; 0x116 <LCD_init>
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	81 b9       	out	0x01, r24	; 1
DDRB = 0xFF; PORTB = 0x00;
 22a:	12 b8       	out	0x02, r1	; 2
 22c:	84 b9       	out	0x04, r24	; 4
DDRC = 0xF0; PORTC = 0x0F;
 22e:	15 b8       	out	0x05, r1	; 5
 230:	90 ef       	ldi	r25, 0xF0	; 240
 232:	97 b9       	out	0x07, r25	; 7
 234:	9f e0       	ldi	r25, 0x0F	; 15
DDRD = 0xFF; PORTD = 0x00;
 236:	98 b9       	out	0x08, r25	; 8
 238:	8a b9       	out	0x0a, r24	; 10
unsigned long int SMTick3_period = SMTick3_calc/GCD;
unsigned long int SMTick4_period = SMTick4_calc/GCD;

//Declare an array of tasks 
static task task1, task2, task3, task4;
task *tasks[] = { &task1, &task2, &task3, &task4};
 23a:	1b b8       	out	0x0b, r1	; 11
 23c:	98 e0       	ldi	r25, 0x08	; 8
 23e:	e5 e0       	ldi	r30, 0x05	; 5
 240:	f1 e0       	ldi	r31, 0x01	; 1
 242:	de 01       	movw	r26, r28
 244:	11 96       	adiw	r26, 0x01	; 1
 246:	01 90       	ld	r0, Z+
 248:	0d 92       	st	X+, r0
 24a:	9a 95       	dec	r25
task1.elapsedTime = SMTick1_period;//Task current elapsed time.
task1.TickFct = &GetKeypad;//Function pointer for the tick.
//PORTB = 0xFF;
*/
 //Task 1
 task1.state = -1;//Task initial state.
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x36>
 24e:	e5 e5       	ldi	r30, 0x55	; 85
 250:	f1 e0       	ldi	r31, 0x01	; 1
 task1.period = SMTick1_period;//Task Period.
 252:	80 83       	st	Z, r24
 254:	88 ee       	ldi	r24, 0xE8	; 232
 256:	93 e0       	ldi	r25, 0x03	; 3
 258:	a0 e0       	ldi	r26, 0x00	; 0
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	81 83       	std	Z+1, r24	; 0x01
 25e:	92 83       	std	Z+2, r25	; 0x02
 260:	a3 83       	std	Z+3, r26	; 0x03
 task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 262:	b4 83       	std	Z+4, r27	; 0x04
 264:	85 83       	std	Z+5, r24	; 0x05
 266:	96 83       	std	Z+6, r25	; 0x06
 268:	a7 83       	std	Z+7, r26	; 0x07
 task1.TickFct = &lcd_tick;//Function pointer for the tick.
 26a:	b0 87       	std	Z+8, r27	; 0x08
 26c:	8c eb       	ldi	r24, 0xBC	; 188
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	92 87       	std	Z+10, r25	; 0x0a
 272:	81 87       	std	Z+9, r24	; 0x09
 274:	6e 01       	movw	r12, r28
 276:	89 e0       	ldi	r24, 0x09	; 9
 278:	c8 0e       	add	r12, r24
 27a:	d1 1c       	adc	r13, r1
 27c:	de 01       	movw	r26, r28
 27e:	11 96       	adiw	r26, 0x01	; 1
while(1) {

	// Scheduler code
	for ( i = 0; i < numTasks; i++ ) {
		// Task is ready to tick
		if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 280:	7d 01       	movw	r14, r26
 282:	f7 01       	movw	r30, r14
 284:	01 91       	ld	r16, Z+
 286:	11 91       	ld	r17, Z+
 288:	7f 01       	movw	r14, r30
 28a:	d8 01       	movw	r26, r16
 28c:	15 96       	adiw	r26, 0x05	; 5
 28e:	4d 91       	ld	r20, X+
 290:	5d 91       	ld	r21, X+
 292:	6d 91       	ld	r22, X+
 294:	7c 91       	ld	r23, X
 296:	18 97       	sbiw	r26, 0x08	; 8
 298:	11 96       	adiw	r26, 0x01	; 1
 29a:	8d 91       	ld	r24, X+
 29c:	9d 91       	ld	r25, X+
 29e:	0d 90       	ld	r0, X+
 2a0:	bc 91       	ld	r27, X
 2a2:	a0 2d       	mov	r26, r0
 2a4:	48 17       	cp	r20, r24
 2a6:	59 07       	cpc	r21, r25
 2a8:	6a 07       	cpc	r22, r26
 2aa:	7b 07       	cpc	r23, r27
			// Setting next state for task
			tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 2ac:	81 f4       	brne	.+32     	; 0x2ce <main+0xbe>
 2ae:	f8 01       	movw	r30, r16
 2b0:	80 81       	ld	r24, Z
 2b2:	01 84       	ldd	r0, Z+9	; 0x09
 2b4:	f2 85       	ldd	r31, Z+10	; 0x0a
 2b6:	e0 2d       	mov	r30, r0
 2b8:	08 2e       	mov	r0, r24
 2ba:	00 0c       	add	r0, r0
 2bc:	99 0b       	sbc	r25, r25
 2be:	09 95       	icall
 2c0:	d8 01       	movw	r26, r16
			// Reset the elapsed time for next tick.
			tasks[i]->elapsedTime = 0;
 2c2:	8c 93       	st	X, r24
 2c4:	f8 01       	movw	r30, r16
 2c6:	15 82       	std	Z+5, r1	; 0x05
 2c8:	16 82       	std	Z+6, r1	; 0x06
 2ca:	17 82       	std	Z+7, r1	; 0x07
		}
		tasks[i]->elapsedTime += 1;
 2cc:	10 86       	std	Z+8, r1	; 0x08
 2ce:	f8 01       	movw	r30, r16
 2d0:	85 81       	ldd	r24, Z+5	; 0x05
 2d2:	96 81       	ldd	r25, Z+6	; 0x06
 2d4:	a7 81       	ldd	r26, Z+7	; 0x07
 2d6:	b0 85       	ldd	r27, Z+8	; 0x08
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	a1 1d       	adc	r26, r1
 2dc:	b1 1d       	adc	r27, r1
 2de:	85 83       	std	Z+5, r24	; 0x05
 2e0:	96 83       	std	Z+6, r25	; 0x06
 2e2:	a7 83       	std	Z+7, r26	; 0x07
		--counter;
 2e4:	b0 87       	std	Z+8, r27	; 0x08
 2e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2ea:	81 50       	subi	r24, 0x01	; 1
 2ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
//LCD_ClearScreen(void);
//	LCD_DisplayString(-10, "Legend ...wait for it DARY!");
while(1) {

	// Scheduler code
	for ( i = 0; i < numTasks; i++ ) {
 2f0:	ec 14       	cp	r14, r12
 2f2:	fd 04       	cpc	r15, r13
		--counter;
		if(counter < -37){
			counter = 5;
		}
	}
	while(!TimerFlag);
 2f4:	31 f6       	brne	.-116    	; 0x282 <main+0x72>
 2f6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <TimerFlag>
 2fa:	88 23       	and	r24, r24
	TimerFlag = 0;
 2fc:	e1 f3       	breq	.-8      	; 0x2f6 <main+0xe6>
 2fe:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <TimerFlag>
 302:	bc cf       	rjmp	.-136    	; 0x27c <main+0x6c>

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
