
TEST3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000009bc  00000a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800104  00800104  00000a54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b74  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ff  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e5  00000000  00000000  00001fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  0000259c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000514  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002aa  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002e9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec eb       	ldi	r30, 0xBC	; 188
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 31       	cpi	r26, 0x13	; 19
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c6 d2       	rcall	.+1420   	; 0x650 <main>
  c4:	79 c4       	rjmp	.+2290   	; 0x9b8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
  fc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 100:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 104:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 122:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_cntcurr>
 126:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x2>
 12e:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 13c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 140:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 144:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 162:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 166:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 16a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 172:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 188:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 18c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 194:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <_avr_timer_cntcurr>
 19c:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <_avr_timer_cntcurr+0x1>
 1a0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_avr_timer_cntcurr+0x2>
 1a4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <set_PWM>:
}

void set_PWM(double frequency) {
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	6b 01       	movw	r12, r22
 1b4:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
 1b6:	9b 01       	movw	r18, r22
 1b8:	ac 01       	movw	r20, r24
 1ba:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 1be:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
 1c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x2>
 1c6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x3>
 1ca:	7d d2       	rcall	.+1274   	; 0x6c6 <__cmpsf2>
 1cc:	88 23       	and	r24, r24
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <set_PWM+0x28>
 1d0:	52 c0       	rjmp	.+164    	; 0x276 <set_PWM+0xcc>
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	a9 01       	movw	r20, r18
 1d8:	c7 01       	movw	r24, r14
 1da:	b6 01       	movw	r22, r12
 1dc:	74 d2       	rcall	.+1256   	; 0x6c6 <__cmpsf2>
 1de:	81 11       	cpse	r24, r1
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <set_PWM+0x44>
 1e2:	e1 e9       	ldi	r30, 0x91	; 145
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	88 70       	andi	r24, 0x08	; 8
 1ea:	80 83       	st	Z, r24
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <set_PWM+0x4e>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
 1ee:	e1 e9       	ldi	r30, 0x91	; 145
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	83 60       	ori	r24, 0x03	; 3
 1f6:	80 83       	st	Z, r24
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
 1f8:	28 e5       	ldi	r18, 0x58	; 88
 1fa:	39 e3       	ldi	r19, 0x39	; 57
 1fc:	44 e7       	ldi	r20, 0x74	; 116
 1fe:	5f e3       	ldi	r21, 0x3F	; 63
 200:	c7 01       	movw	r24, r14
 202:	b6 01       	movw	r22, r12
 204:	60 d2       	rcall	.+1216   	; 0x6c6 <__cmpsf2>
 206:	88 23       	and	r24, r24
 208:	3c f4       	brge	.+14     	; 0x218 <set_PWM+0x6e>
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	9f ef       	ldi	r25, 0xFF	; 255
 20e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 212:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 216:	23 c0       	rjmp	.+70     	; 0x25e <set_PWM+0xb4>
		
		// prevents OCR0A from underflowing, using prescaler 64                    // 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	34 e2       	ldi	r19, 0x24	; 36
 21c:	44 ef       	ldi	r20, 0xF4	; 244
 21e:	56 e4       	ldi	r21, 0x46	; 70
 220:	c7 01       	movw	r24, r14
 222:	b6 01       	movw	r22, r12
 224:	62 d3       	rcall	.+1732   	; 0x8ea <__gesf2>
 226:	18 16       	cp	r1, r24
 228:	2c f4       	brge	.+10     	; 0x234 <set_PWM+0x8a>
 22a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 22e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 232:	15 c0       	rjmp	.+42     	; 0x25e <set_PWM+0xb4>
		
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	53 e4       	ldi	r21, 0x43	; 67
 23c:	c7 01       	movw	r24, r14
 23e:	b6 01       	movw	r22, r12
 240:	58 d3       	rcall	.+1712   	; 0x8f2 <__mulsf3>
 242:	9b 01       	movw	r18, r22
 244:	ac 01       	movw	r20, r24
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	74 e2       	ldi	r23, 0x24	; 36
 24a:	84 ef       	ldi	r24, 0xF4	; 244
 24c:	9a e4       	ldi	r25, 0x4A	; 74
 24e:	3f d2       	rcall	.+1150   	; 0x6ce <__divsf3>
 250:	a6 d2       	rcall	.+1356   	; 0x79e <__fixsfsi>
 252:	61 50       	subi	r22, 0x01	; 1
 254:	71 09       	sbc	r23, r1
 256:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 25a:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

		TCNT3 = 0; // resets counter
 25e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 262:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		current_frequency = frequency; // Updates the current frequency
 266:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <__data_end>
 26a:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <__data_end+0x1>
 26e:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <__data_end+0x2>
 272:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <__data_end+0x3>
	}
}
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	df 90       	pop	r13
 27c:	cf 90       	pop	r12
 27e:	08 95       	ret

00000280 <PWM_on>:

void PWM_on() {
	TCCR3A = (1 << COM3A0);
 280:	80 e4       	ldi	r24, 0x40	; 64
 282:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
 286:	8b e0       	ldi	r24, 0x0B	; 11
 288:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	cb 01       	movw	r24, r22
 292:	8b cf       	rjmp	.-234    	; 0x1aa <set_PWM>
 294:	08 95       	ret

00000296 <PWM_off>:
}

void PWM_off() {
	TCCR3A = 0x00;
 296:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = 0x00;
 29a:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 29e:	08 95       	ret

000002a0 <incFreq>:
}

void incFreq()
{
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
	if (freq == 261.63)
 2a8:	c0 90 0d 01 	lds	r12, 0x010D	; 0x80010d <freq>
 2ac:	d0 90 0e 01 	lds	r13, 0x010E	; 0x80010e <freq+0x1>
 2b0:	e0 90 0f 01 	lds	r14, 0x010F	; 0x80010f <freq+0x2>
 2b4:	f0 90 10 01 	lds	r15, 0x0110	; 0x800110 <freq+0x3>
 2b8:	24 ea       	ldi	r18, 0xA4	; 164
 2ba:	30 ed       	ldi	r19, 0xD0	; 208
 2bc:	42 e8       	ldi	r20, 0x82	; 130
 2be:	53 e4       	ldi	r21, 0x43	; 67
 2c0:	c7 01       	movw	r24, r14
 2c2:	b6 01       	movw	r22, r12
 2c4:	00 d2       	rcall	.+1024   	; 0x6c6 <__cmpsf2>
 2c6:	81 11       	cpse	r24, r1
 2c8:	0d c0       	rjmp	.+26     	; 0x2e4 <incFreq+0x44>
	{
		freq = 293.66;
 2ca:	8b e7       	ldi	r24, 0x7B	; 123
 2cc:	94 ed       	ldi	r25, 0xD4	; 212
 2ce:	a2 e9       	ldi	r26, 0x92	; 146
 2d0:	b3 e4       	ldi	r27, 0x43	; 67
 2d2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 2d6:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 2da:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 2de:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
 2e2:	83 c0       	rjmp	.+262    	; 0x3ea <incFreq+0x14a>
	}
	else if (freq == 293.66)
 2e4:	2b e7       	ldi	r18, 0x7B	; 123
 2e6:	34 ed       	ldi	r19, 0xD4	; 212
 2e8:	42 e9       	ldi	r20, 0x92	; 146
 2ea:	53 e4       	ldi	r21, 0x43	; 67
 2ec:	c7 01       	movw	r24, r14
 2ee:	b6 01       	movw	r22, r12
 2f0:	ea d1       	rcall	.+980    	; 0x6c6 <__cmpsf2>
 2f2:	81 11       	cpse	r24, r1
 2f4:	0d c0       	rjmp	.+26     	; 0x310 <incFreq+0x70>
	{
		freq = 329.63;
 2f6:	84 ea       	ldi	r24, 0xA4	; 164
 2f8:	90 ed       	ldi	r25, 0xD0	; 208
 2fa:	a4 ea       	ldi	r26, 0xA4	; 164
 2fc:	b3 e4       	ldi	r27, 0x43	; 67
 2fe:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 302:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 306:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 30a:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
 30e:	6d c0       	rjmp	.+218    	; 0x3ea <incFreq+0x14a>
	}
	else if (freq == 329.63)
 310:	24 ea       	ldi	r18, 0xA4	; 164
 312:	30 ed       	ldi	r19, 0xD0	; 208
 314:	44 ea       	ldi	r20, 0xA4	; 164
 316:	53 e4       	ldi	r21, 0x43	; 67
 318:	c7 01       	movw	r24, r14
 31a:	b6 01       	movw	r22, r12
 31c:	d4 d1       	rcall	.+936    	; 0x6c6 <__cmpsf2>
 31e:	81 11       	cpse	r24, r1
 320:	0d c0       	rjmp	.+26     	; 0x33c <incFreq+0x9c>
	{
		freq = 349.23;
 322:	81 e7       	ldi	r24, 0x71	; 113
 324:	9d e9       	ldi	r25, 0x9D	; 157
 326:	ae ea       	ldi	r26, 0xAE	; 174
 328:	b3 e4       	ldi	r27, 0x43	; 67
 32a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 32e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 332:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 336:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
 33a:	57 c0       	rjmp	.+174    	; 0x3ea <incFreq+0x14a>
	}
	else if (freq == 349.23)
 33c:	21 e7       	ldi	r18, 0x71	; 113
 33e:	3d e9       	ldi	r19, 0x9D	; 157
 340:	4e ea       	ldi	r20, 0xAE	; 174
 342:	53 e4       	ldi	r21, 0x43	; 67
 344:	c7 01       	movw	r24, r14
 346:	b6 01       	movw	r22, r12
 348:	be d1       	rcall	.+892    	; 0x6c6 <__cmpsf2>
 34a:	81 11       	cpse	r24, r1
 34c:	0d c0       	rjmp	.+26     	; 0x368 <incFreq+0xc8>
	{
		freq = 392.00;
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	a4 ec       	ldi	r26, 0xC4	; 196
 354:	b3 e4       	ldi	r27, 0x43	; 67
 356:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 35a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 35e:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 362:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
 366:	41 c0       	rjmp	.+130    	; 0x3ea <incFreq+0x14a>
	}
	else if (freq == 392.00)
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	44 ec       	ldi	r20, 0xC4	; 196
 36e:	53 e4       	ldi	r21, 0x43	; 67
 370:	c7 01       	movw	r24, r14
 372:	b6 01       	movw	r22, r12
 374:	a8 d1       	rcall	.+848    	; 0x6c6 <__cmpsf2>
 376:	81 11       	cpse	r24, r1
 378:	0d c0       	rjmp	.+26     	; 0x394 <incFreq+0xf4>
	{
		freq = 440.00;
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	ac ed       	ldi	r26, 0xDC	; 220
 380:	b3 e4       	ldi	r27, 0x43	; 67
 382:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 386:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 38a:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 38e:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
 392:	2b c0       	rjmp	.+86     	; 0x3ea <incFreq+0x14a>
	}
	else if (freq == 440.00)
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	4c ed       	ldi	r20, 0xDC	; 220
 39a:	53 e4       	ldi	r21, 0x43	; 67
 39c:	c7 01       	movw	r24, r14
 39e:	b6 01       	movw	r22, r12
 3a0:	92 d1       	rcall	.+804    	; 0x6c6 <__cmpsf2>
 3a2:	81 11       	cpse	r24, r1
 3a4:	0d c0       	rjmp	.+26     	; 0x3c0 <incFreq+0x120>
	{
		freq = 493.88;
 3a6:	84 ea       	ldi	r24, 0xA4	; 164
 3a8:	90 ef       	ldi	r25, 0xF0	; 240
 3aa:	a6 ef       	ldi	r26, 0xF6	; 246
 3ac:	b3 e4       	ldi	r27, 0x43	; 67
 3ae:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 3b2:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 3b6:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 3ba:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
 3be:	15 c0       	rjmp	.+42     	; 0x3ea <incFreq+0x14a>
	}
	else if (freq == 493.88)
 3c0:	24 ea       	ldi	r18, 0xA4	; 164
 3c2:	30 ef       	ldi	r19, 0xF0	; 240
 3c4:	46 ef       	ldi	r20, 0xF6	; 246
 3c6:	53 e4       	ldi	r21, 0x43	; 67
 3c8:	c7 01       	movw	r24, r14
 3ca:	b6 01       	movw	r22, r12
 3cc:	7c d1       	rcall	.+760    	; 0x6c6 <__cmpsf2>
 3ce:	81 11       	cpse	r24, r1
 3d0:	0c c0       	rjmp	.+24     	; 0x3ea <incFreq+0x14a>
	{
		freq = 523.25;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	90 ed       	ldi	r25, 0xD0	; 208
 3d6:	a2 e0       	ldi	r26, 0x02	; 2
 3d8:	b4 e4       	ldi	r27, 0x44	; 68
 3da:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 3de:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 3e2:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 3e6:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
	}
}
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	df 90       	pop	r13
 3f0:	cf 90       	pop	r12
 3f2:	08 95       	ret

000003f4 <decFreq>:

void decFreq()
{
 3f4:	cf 92       	push	r12
 3f6:	df 92       	push	r13
 3f8:	ef 92       	push	r14
 3fa:	ff 92       	push	r15
	if (freq == 523.25)
 3fc:	c0 90 0d 01 	lds	r12, 0x010D	; 0x80010d <freq>
 400:	d0 90 0e 01 	lds	r13, 0x010E	; 0x80010e <freq+0x1>
 404:	e0 90 0f 01 	lds	r14, 0x010F	; 0x80010f <freq+0x2>
 408:	f0 90 10 01 	lds	r15, 0x0110	; 0x800110 <freq+0x3>
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	30 ed       	ldi	r19, 0xD0	; 208
 410:	42 e0       	ldi	r20, 0x02	; 2
 412:	54 e4       	ldi	r21, 0x44	; 68
 414:	c7 01       	movw	r24, r14
 416:	b6 01       	movw	r22, r12
 418:	56 d1       	rcall	.+684    	; 0x6c6 <__cmpsf2>
 41a:	81 11       	cpse	r24, r1
 41c:	0d c0       	rjmp	.+26     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	{
		freq = 493.88;
 41e:	84 ea       	ldi	r24, 0xA4	; 164
 420:	90 ef       	ldi	r25, 0xF0	; 240
 422:	a6 ef       	ldi	r26, 0xF6	; 246
 424:	b3 e4       	ldi	r27, 0x43	; 67
 426:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 42a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 42e:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 432:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
 436:	83 c0       	rjmp	.+262    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
	}
	else if (freq == 493.88)
 438:	24 ea       	ldi	r18, 0xA4	; 164
 43a:	30 ef       	ldi	r19, 0xF0	; 240
 43c:	46 ef       	ldi	r20, 0xF6	; 246
 43e:	53 e4       	ldi	r21, 0x43	; 67
 440:	c7 01       	movw	r24, r14
 442:	b6 01       	movw	r22, r12
 444:	40 d1       	rcall	.+640    	; 0x6c6 <__cmpsf2>
 446:	81 11       	cpse	r24, r1
 448:	0d c0       	rjmp	.+26     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	{
		freq = 440.00;
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	ac ed       	ldi	r26, 0xDC	; 220
 450:	b3 e4       	ldi	r27, 0x43	; 67
 452:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 456:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 45a:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 45e:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
 462:	6d c0       	rjmp	.+218    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
	}
	else if (freq == 440.00)
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	4c ed       	ldi	r20, 0xDC	; 220
 46a:	53 e4       	ldi	r21, 0x43	; 67
 46c:	c7 01       	movw	r24, r14
 46e:	b6 01       	movw	r22, r12
 470:	2a d1       	rcall	.+596    	; 0x6c6 <__cmpsf2>
 472:	81 11       	cpse	r24, r1
 474:	0d c0       	rjmp	.+26     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	{
		freq = 392.00;
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	a4 ec       	ldi	r26, 0xC4	; 196
 47c:	b3 e4       	ldi	r27, 0x43	; 67
 47e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 482:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 486:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 48a:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
 48e:	57 c0       	rjmp	.+174    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
	}
	else if (freq == 392.00)
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	44 ec       	ldi	r20, 0xC4	; 196
 496:	53 e4       	ldi	r21, 0x43	; 67
 498:	c7 01       	movw	r24, r14
 49a:	b6 01       	movw	r22, r12
 49c:	14 d1       	rcall	.+552    	; 0x6c6 <__cmpsf2>
 49e:	81 11       	cpse	r24, r1
 4a0:	0d c0       	rjmp	.+26     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
	{
		freq = 349.23;
 4a2:	81 e7       	ldi	r24, 0x71	; 113
 4a4:	9d e9       	ldi	r25, 0x9D	; 157
 4a6:	ae ea       	ldi	r26, 0xAE	; 174
 4a8:	b3 e4       	ldi	r27, 0x43	; 67
 4aa:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 4ae:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 4b2:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 4b6:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
 4ba:	41 c0       	rjmp	.+130    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
	}
	else if (freq == 349.23)
 4bc:	21 e7       	ldi	r18, 0x71	; 113
 4be:	3d e9       	ldi	r19, 0x9D	; 157
 4c0:	4e ea       	ldi	r20, 0xAE	; 174
 4c2:	53 e4       	ldi	r21, 0x43	; 67
 4c4:	c7 01       	movw	r24, r14
 4c6:	b6 01       	movw	r22, r12
 4c8:	fe d0       	rcall	.+508    	; 0x6c6 <__cmpsf2>
 4ca:	81 11       	cpse	r24, r1
 4cc:	0d c0       	rjmp	.+26     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
	{
		freq = 329.63;
 4ce:	84 ea       	ldi	r24, 0xA4	; 164
 4d0:	90 ed       	ldi	r25, 0xD0	; 208
 4d2:	a4 ea       	ldi	r26, 0xA4	; 164
 4d4:	b3 e4       	ldi	r27, 0x43	; 67
 4d6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 4da:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 4de:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 4e2:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
 4e6:	2b c0       	rjmp	.+86     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
	}
	else if (freq == 329.63)
 4e8:	24 ea       	ldi	r18, 0xA4	; 164
 4ea:	30 ed       	ldi	r19, 0xD0	; 208
 4ec:	44 ea       	ldi	r20, 0xA4	; 164
 4ee:	53 e4       	ldi	r21, 0x43	; 67
 4f0:	c7 01       	movw	r24, r14
 4f2:	b6 01       	movw	r22, r12
 4f4:	e8 d0       	rcall	.+464    	; 0x6c6 <__cmpsf2>
 4f6:	81 11       	cpse	r24, r1
 4f8:	0d c0       	rjmp	.+26     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
	{
		freq = 293.66;
 4fa:	8b e7       	ldi	r24, 0x7B	; 123
 4fc:	94 ed       	ldi	r25, 0xD4	; 212
 4fe:	a2 e9       	ldi	r26, 0x92	; 146
 500:	b3 e4       	ldi	r27, 0x43	; 67
 502:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 506:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 50a:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 50e:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
 512:	15 c0       	rjmp	.+42     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
	}
	else if (freq == 293.66)
 514:	2b e7       	ldi	r18, 0x7B	; 123
 516:	34 ed       	ldi	r19, 0xD4	; 212
 518:	42 e9       	ldi	r20, 0x92	; 146
 51a:	53 e4       	ldi	r21, 0x43	; 67
 51c:	c7 01       	movw	r24, r14
 51e:	b6 01       	movw	r22, r12
 520:	d2 d0       	rcall	.+420    	; 0x6c6 <__cmpsf2>
 522:	81 11       	cpse	r24, r1
 524:	0c c0       	rjmp	.+24     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
	{
		freq = 261.63;
 526:	84 ea       	ldi	r24, 0xA4	; 164
 528:	90 ed       	ldi	r25, 0xD0	; 208
 52a:	a2 e8       	ldi	r26, 0x82	; 130
 52c:	b3 e4       	ldi	r27, 0x43	; 67
 52e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 532:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 536:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 53a:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
	}
	
}
 53e:	ff 90       	pop	r15
 540:	ef 90       	pop	r14
 542:	df 90       	pop	r13
 544:	cf 90       	pop	r12
 546:	08 95       	ret

00000548 <ON_Tick>:

void ON_Tick()
{
	unsigned char A0 = ~PINA & 0x01;
 548:	80 b1       	in	r24, 0x00	; 0
 54a:	98 2f       	mov	r25, r24
 54c:	91 70       	andi	r25, 0x01	; 1
	
	switch(ON_state)
 54e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ON_state>
 552:	82 30       	cpi	r24, 0x02	; 2
 554:	a9 f0       	breq	.+42     	; 0x580 <ON_Tick+0x38>
 556:	28 f4       	brcc	.+10     	; 0x562 <ON_Tick+0x1a>
 558:	88 23       	and	r24, r24
 55a:	41 f0       	breq	.+16     	; 0x56c <ON_Tick+0x24>
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	51 f0       	breq	.+20     	; 0x574 <ON_Tick+0x2c>
 560:	21 c0       	rjmp	.+66     	; 0x5a4 <ON_Tick+0x5c>
 562:	83 30       	cpi	r24, 0x03	; 3
 564:	a9 f0       	breq	.+42     	; 0x590 <ON_Tick+0x48>
 566:	84 30       	cpi	r24, 0x04	; 4
 568:	c9 f0       	breq	.+50     	; 0x59c <ON_Tick+0x54>
 56a:	1c c0       	rjmp	.+56     	; 0x5a4 <ON_Tick+0x5c>
	{
		case ON_Start:
			ON_state = ON_Init;
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ON_state>
			break;
 572:	08 95       	ret
		case ON_Init:
			ON_state = A0 ? ON_On : ON_state;
 574:	91 11       	cpse	r25, r1
 576:	01 c0       	rjmp	.+2      	; 0x57a <ON_Tick+0x32>
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ON_state>
			break;
 57e:	12 c0       	rjmp	.+36     	; 0x5a4 <ON_Tick+0x5c>
		case ON_On:
			ON_state = A0 ? ON_Off : ON_StayOn;
 580:	99 23       	and	r25, r25
 582:	11 f0       	breq	.+4      	; 0x588 <ON_Tick+0x40>
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	01 c0       	rjmp	.+2      	; 0x58a <ON_Tick+0x42>
 588:	84 e0       	ldi	r24, 0x04	; 4
 58a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ON_state>
			break;
 58e:	0a c0       	rjmp	.+20     	; 0x5a4 <ON_Tick+0x5c>
		case ON_StayOn:
			ON_state = A0 ? ON_Off : ON_state;
 590:	91 11       	cpse	r25, r1
 592:	01 c0       	rjmp	.+2      	; 0x596 <ON_Tick+0x4e>
 594:	84 e0       	ldi	r24, 0x04	; 4
 596:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ON_state>
			break;
 59a:	04 c0       	rjmp	.+8      	; 0x5a4 <ON_Tick+0x5c>
		case ON_Off:
			ON_state = ON_Init;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ON_state>
			break;
 5a2:	08 95       	ret
	}
	
	switch (ON_state)
 5a4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ON_state>
 5a8:	82 30       	cpi	r24, 0x02	; 2
 5aa:	19 f0       	breq	.+6      	; 0x5b2 <ON_Tick+0x6a>
 5ac:	84 30       	cpi	r24, 0x04	; 4
 5ae:	91 f0       	breq	.+36     	; 0x5d4 <ON_Tick+0x8c>
 5b0:	08 95       	ret
		case ON_Start:
			break;
		case ON_Init:
			break;
		case ON_On:
			PWM_on();
 5b2:	66 de       	rcall	.-820    	; 0x280 <PWM_on>
			freq = 261.63;
 5b4:	84 ea       	ldi	r24, 0xA4	; 164
 5b6:	90 ed       	ldi	r25, 0xD0	; 208
 5b8:	a2 e8       	ldi	r26, 0x82	; 130
 5ba:	b3 e4       	ldi	r27, 0x43	; 67
 5bc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <freq>
 5c0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <freq+0x1>
 5c4:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <freq+0x2>
 5c8:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <freq+0x3>
			set_PWM(freq);
 5cc:	bc 01       	movw	r22, r24
 5ce:	cd 01       	movw	r24, r26
 5d0:	ec cd       	rjmp	.-1064   	; 0x1aa <set_PWM>
			break;
 5d2:	08 95       	ret
		case ON_StayOn:
			break;
		case ON_Off:
			PWM_off();
 5d4:	60 ce       	rjmp	.-832    	; 0x296 <PWM_off>
 5d6:	08 95       	ret

000005d8 <SW_Tick>:
 5d8:	20 b1       	in	r18, 0x00	; 0
}

void SW_Tick()
{
	unsigned char A1 = ~PINA & 0x02;
	unsigned char A2 = ~PINA & 0x04;
 5da:	90 b1       	in	r25, 0x00	; 0
	
	switch(SW_state)
 5dc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <SW_state>
 5e0:	81 30       	cpi	r24, 0x01	; 1
 5e2:	51 f0       	breq	.+20     	; 0x5f8 <SW_Tick+0x20>
 5e4:	28 f0       	brcs	.+10     	; 0x5f0 <SW_Tick+0x18>
 5e6:	82 30       	cpi	r24, 0x02	; 2
 5e8:	71 f0       	breq	.+28     	; 0x606 <SW_Tick+0x2e>
 5ea:	83 30       	cpi	r24, 0x03	; 3
 5ec:	81 f0       	breq	.+32     	; 0x60e <SW_Tick+0x36>
 5ee:	13 c0       	rjmp	.+38     	; 0x616 <SW_Tick+0x3e>
	{
		case SW_Start:
			SW_state = SW_Init;
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <SW_state>
			break;
 5f6:	08 95       	ret
		case SW_Init:
			SW_state = A1 ? SW_Up : SW_state;
 5f8:	21 ff       	sbrs	r18, 1
 5fa:	82 e0       	ldi	r24, 0x02	; 2
			SW_state = A2 ? SW_Down : SW_state;
 5fc:	92 ff       	sbrs	r25, 2
 5fe:	83 e0       	ldi	r24, 0x03	; 3
 600:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <SW_state>
			break;
 604:	08 c0       	rjmp	.+16     	; 0x616 <SW_Tick+0x3e>
		case SW_Up:
			SW_state = SW_Init;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <SW_state>
			break;
 60c:	08 95       	ret
		case SW_Down:
			SW_state = SW_Init;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <SW_state>
			break;
 614:	08 95       	ret
	}
	
	switch(SW_state)
 616:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <SW_state>
 61a:	82 30       	cpi	r24, 0x02	; 2
 61c:	19 f0       	breq	.+6      	; 0x624 <SW_Tick+0x4c>
 61e:	83 30       	cpi	r24, 0x03	; 3
 620:	61 f0       	breq	.+24     	; 0x63a <SW_Tick+0x62>
 622:	08 95       	ret
		case SW_Start:
			break;
		case SW_Init:
			break;
		case SW_Up:
			incFreq();
 624:	3d de       	rcall	.-902    	; 0x2a0 <incFreq>
			set_PWM(freq);
 626:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <freq>
 62a:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <freq+0x1>
 62e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <freq+0x2>
 632:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <freq+0x3>
 636:	b9 cd       	rjmp	.-1166   	; 0x1aa <set_PWM>
			break;
 638:	08 95       	ret
		case SW_Down:
			decFreq();
 63a:	dc de       	rcall	.-584    	; 0x3f4 <decFreq>
 63c:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <freq>
			set_PWM(freq);
 640:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <freq+0x1>
 644:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <freq+0x2>
 648:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <freq+0x3>
 64c:	ae cd       	rjmp	.-1188   	; 0x1aa <set_PWM>
 64e:	08 95       	ret

00000650 <main>:
 650:	11 b8       	out	0x01, r1	; 1
	}
}

void main()
{
	DDRA = 0x00; PORTA = 0xFF;
 652:	8f ef       	ldi	r24, 0xFF	; 255
 654:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 656:	84 b9       	out	0x04, r24	; 4
 658:	15 b8       	out	0x05, r1	; 5

	
	
	SW_state = SW_Start;
 65a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <SW_state>
	ON_state = ON_Start;
 65e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ON_state>
	const unsigned long timerPeriod = 100;
	
	unsigned long SW_elapsedTime = 0;
	unsigned long ON_elapsedTime = 0;
	
	TimerSet(100);
 662:	64 e6       	ldi	r22, 0x64	; 100
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	8e dd       	rcall	.-1252   	; 0x188 <TimerSet>
	TimerOn();
 66c:	2d dd       	rcall	.-1446   	; 0xc8 <TimerOn>
 66e:	81 2c       	mov	r8, r1
	ON_state = ON_Start;
	
	const unsigned long timerPeriod = 100;
	
	unsigned long SW_elapsedTime = 0;
	unsigned long ON_elapsedTime = 0;
 670:	91 2c       	mov	r9, r1
 672:	54 01       	movw	r10, r8
 674:	c1 2c       	mov	r12, r1
	SW_state = SW_Start;
	ON_state = ON_Start;
	
	const unsigned long timerPeriod = 100;
	
	unsigned long SW_elapsedTime = 0;
 676:	d1 2c       	mov	r13, r1
 678:	76 01       	movw	r14, r12
 67a:	0e c0       	rjmp	.+28     	; 0x698 <main+0x48>
	
	while (1)
	{
		if (ON_elapsedTime >= 200)
		{	
			ON_Tick();
 67c:	65 df       	rcall	.-310    	; 0x548 <ON_Tick>
 67e:	81 2c       	mov	r8, r1
			ON_elapsedTime = 0;
 680:	91 2c       	mov	r9, r1
 682:	54 01       	movw	r10, r8
 684:	88 ec       	ldi	r24, 0xC8	; 200
		}
		if (SW_elapsedTime >= 200)
 686:	c8 16       	cp	r12, r24
 688:	d1 04       	cpc	r13, r1
 68a:	e1 04       	cpc	r14, r1
 68c:	f1 04       	cpc	r15, r1
 68e:	20 f0       	brcs	.+8      	; 0x698 <main+0x48>
		{
			SW_Tick();
 690:	a3 df       	rcall	.-186    	; 0x5d8 <SW_Tick>
 692:	c1 2c       	mov	r12, r1
			SW_elapsedTime = 0;
 694:	d1 2c       	mov	r13, r1
 696:	76 01       	movw	r14, r12
 698:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <TimerFlag>
		}
		while (!TimerFlag) {}
 69c:	88 23       	and	r24, r24
 69e:	e1 f3       	breq	.-8      	; 0x698 <main+0x48>
 6a0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <TimerFlag>
			TimerFlag = 0;
 6a4:	84 e6       	ldi	r24, 0x64	; 100
			ON_elapsedTime += timerPeriod;
 6a6:	88 0e       	add	r8, r24
 6a8:	91 1c       	adc	r9, r1
 6aa:	a1 1c       	adc	r10, r1
 6ac:	b1 1c       	adc	r11, r1
 6ae:	84 e6       	ldi	r24, 0x64	; 100
			SW_elapsedTime += timerPeriod;
 6b0:	c8 0e       	add	r12, r24
 6b2:	d1 1c       	adc	r13, r1
 6b4:	e1 1c       	adc	r14, r1
 6b6:	f1 1c       	adc	r15, r1
 6b8:	88 ec       	ldi	r24, 0xC8	; 200
	TimerSet(100);
	TimerOn();
	
	while (1)
	{
		if (ON_elapsedTime >= 200)
 6ba:	88 16       	cp	r8, r24
 6bc:	91 04       	cpc	r9, r1
 6be:	a1 04       	cpc	r10, r1
 6c0:	b1 04       	cpc	r11, r1
 6c2:	00 f3       	brcs	.-64     	; 0x684 <main+0x34>
 6c4:	db cf       	rjmp	.-74     	; 0x67c <main+0x2c>

000006c6 <__cmpsf2>:
 6c6:	9c d0       	rcall	.+312    	; 0x800 <__fp_cmp>
 6c8:	08 f4       	brcc	.+2      	; 0x6cc <__cmpsf2+0x6>
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	08 95       	ret

000006ce <__divsf3>:
 6ce:	0c d0       	rcall	.+24     	; 0x6e8 <__divsf3x>
 6d0:	d2 c0       	rjmp	.+420    	; 0x876 <__fp_round>
 6d2:	ca d0       	rcall	.+404    	; 0x868 <__fp_pscB>
 6d4:	40 f0       	brcs	.+16     	; 0x6e6 <__divsf3+0x18>
 6d6:	c1 d0       	rcall	.+386    	; 0x85a <__fp_pscA>
 6d8:	30 f0       	brcs	.+12     	; 0x6e6 <__divsf3+0x18>
 6da:	21 f4       	brne	.+8      	; 0x6e4 <__divsf3+0x16>
 6dc:	5f 3f       	cpi	r21, 0xFF	; 255
 6de:	19 f0       	breq	.+6      	; 0x6e6 <__divsf3+0x18>
 6e0:	b3 c0       	rjmp	.+358    	; 0x848 <__fp_inf>
 6e2:	51 11       	cpse	r21, r1
 6e4:	fc c0       	rjmp	.+504    	; 0x8de <__fp_szero>
 6e6:	b6 c0       	rjmp	.+364    	; 0x854 <__fp_nan>

000006e8 <__divsf3x>:
 6e8:	d7 d0       	rcall	.+430    	; 0x898 <__fp_split3>
 6ea:	98 f3       	brcs	.-26     	; 0x6d2 <__divsf3+0x4>

000006ec <__divsf3_pse>:
 6ec:	99 23       	and	r25, r25
 6ee:	c9 f3       	breq	.-14     	; 0x6e2 <__divsf3+0x14>
 6f0:	55 23       	and	r21, r21
 6f2:	b1 f3       	breq	.-20     	; 0x6e0 <__divsf3+0x12>
 6f4:	95 1b       	sub	r25, r21
 6f6:	55 0b       	sbc	r21, r21
 6f8:	bb 27       	eor	r27, r27
 6fa:	aa 27       	eor	r26, r26
 6fc:	62 17       	cp	r22, r18
 6fe:	73 07       	cpc	r23, r19
 700:	84 07       	cpc	r24, r20
 702:	38 f0       	brcs	.+14     	; 0x712 <__divsf3_pse+0x26>
 704:	9f 5f       	subi	r25, 0xFF	; 255
 706:	5f 4f       	sbci	r21, 0xFF	; 255
 708:	22 0f       	add	r18, r18
 70a:	33 1f       	adc	r19, r19
 70c:	44 1f       	adc	r20, r20
 70e:	aa 1f       	adc	r26, r26
 710:	a9 f3       	breq	.-22     	; 0x6fc <__divsf3_pse+0x10>
 712:	33 d0       	rcall	.+102    	; 0x77a <__divsf3_pse+0x8e>
 714:	0e 2e       	mov	r0, r30
 716:	3a f0       	brmi	.+14     	; 0x726 <__divsf3_pse+0x3a>
 718:	e0 e8       	ldi	r30, 0x80	; 128
 71a:	30 d0       	rcall	.+96     	; 0x77c <__divsf3_pse+0x90>
 71c:	91 50       	subi	r25, 0x01	; 1
 71e:	50 40       	sbci	r21, 0x00	; 0
 720:	e6 95       	lsr	r30
 722:	00 1c       	adc	r0, r0
 724:	ca f7       	brpl	.-14     	; 0x718 <__divsf3_pse+0x2c>
 726:	29 d0       	rcall	.+82     	; 0x77a <__divsf3_pse+0x8e>
 728:	fe 2f       	mov	r31, r30
 72a:	27 d0       	rcall	.+78     	; 0x77a <__divsf3_pse+0x8e>
 72c:	66 0f       	add	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	88 1f       	adc	r24, r24
 732:	bb 1f       	adc	r27, r27
 734:	26 17       	cp	r18, r22
 736:	37 07       	cpc	r19, r23
 738:	48 07       	cpc	r20, r24
 73a:	ab 07       	cpc	r26, r27
 73c:	b0 e8       	ldi	r27, 0x80	; 128
 73e:	09 f0       	breq	.+2      	; 0x742 <__divsf3_pse+0x56>
 740:	bb 0b       	sbc	r27, r27
 742:	80 2d       	mov	r24, r0
 744:	bf 01       	movw	r22, r30
 746:	ff 27       	eor	r31, r31
 748:	93 58       	subi	r25, 0x83	; 131
 74a:	5f 4f       	sbci	r21, 0xFF	; 255
 74c:	2a f0       	brmi	.+10     	; 0x758 <__divsf3_pse+0x6c>
 74e:	9e 3f       	cpi	r25, 0xFE	; 254
 750:	51 05       	cpc	r21, r1
 752:	68 f0       	brcs	.+26     	; 0x76e <__divsf3_pse+0x82>
 754:	79 c0       	rjmp	.+242    	; 0x848 <__fp_inf>
 756:	c3 c0       	rjmp	.+390    	; 0x8de <__fp_szero>
 758:	5f 3f       	cpi	r21, 0xFF	; 255
 75a:	ec f3       	brlt	.-6      	; 0x756 <__divsf3_pse+0x6a>
 75c:	98 3e       	cpi	r25, 0xE8	; 232
 75e:	dc f3       	brlt	.-10     	; 0x756 <__divsf3_pse+0x6a>
 760:	86 95       	lsr	r24
 762:	77 95       	ror	r23
 764:	67 95       	ror	r22
 766:	b7 95       	ror	r27
 768:	f7 95       	ror	r31
 76a:	9f 5f       	subi	r25, 0xFF	; 255
 76c:	c9 f7       	brne	.-14     	; 0x760 <__divsf3_pse+0x74>
 76e:	88 0f       	add	r24, r24
 770:	91 1d       	adc	r25, r1
 772:	96 95       	lsr	r25
 774:	87 95       	ror	r24
 776:	97 f9       	bld	r25, 7
 778:	08 95       	ret
 77a:	e1 e0       	ldi	r30, 0x01	; 1
 77c:	66 0f       	add	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	bb 1f       	adc	r27, r27
 784:	62 17       	cp	r22, r18
 786:	73 07       	cpc	r23, r19
 788:	84 07       	cpc	r24, r20
 78a:	ba 07       	cpc	r27, r26
 78c:	20 f0       	brcs	.+8      	; 0x796 <__divsf3_pse+0xaa>
 78e:	62 1b       	sub	r22, r18
 790:	73 0b       	sbc	r23, r19
 792:	84 0b       	sbc	r24, r20
 794:	ba 0b       	sbc	r27, r26
 796:	ee 1f       	adc	r30, r30
 798:	88 f7       	brcc	.-30     	; 0x77c <__divsf3_pse+0x90>
 79a:	e0 95       	com	r30
 79c:	08 95       	ret

0000079e <__fixsfsi>:
 79e:	04 d0       	rcall	.+8      	; 0x7a8 <__fixunssfsi>
 7a0:	68 94       	set
 7a2:	b1 11       	cpse	r27, r1
 7a4:	9c c0       	rjmp	.+312    	; 0x8de <__fp_szero>
 7a6:	08 95       	ret

000007a8 <__fixunssfsi>:
 7a8:	7f d0       	rcall	.+254    	; 0x8a8 <__fp_splitA>
 7aa:	88 f0       	brcs	.+34     	; 0x7ce <__fixunssfsi+0x26>
 7ac:	9f 57       	subi	r25, 0x7F	; 127
 7ae:	90 f0       	brcs	.+36     	; 0x7d4 <__fixunssfsi+0x2c>
 7b0:	b9 2f       	mov	r27, r25
 7b2:	99 27       	eor	r25, r25
 7b4:	b7 51       	subi	r27, 0x17	; 23
 7b6:	a0 f0       	brcs	.+40     	; 0x7e0 <__fixunssfsi+0x38>
 7b8:	d1 f0       	breq	.+52     	; 0x7ee <__fixunssfsi+0x46>
 7ba:	66 0f       	add	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	1a f0       	brmi	.+6      	; 0x7ca <__fixunssfsi+0x22>
 7c4:	ba 95       	dec	r27
 7c6:	c9 f7       	brne	.-14     	; 0x7ba <__fixunssfsi+0x12>
 7c8:	12 c0       	rjmp	.+36     	; 0x7ee <__fixunssfsi+0x46>
 7ca:	b1 30       	cpi	r27, 0x01	; 1
 7cc:	81 f0       	breq	.+32     	; 0x7ee <__fixunssfsi+0x46>
 7ce:	86 d0       	rcall	.+268    	; 0x8dc <__fp_zero>
 7d0:	b1 e0       	ldi	r27, 0x01	; 1
 7d2:	08 95       	ret
 7d4:	83 c0       	rjmp	.+262    	; 0x8dc <__fp_zero>
 7d6:	67 2f       	mov	r22, r23
 7d8:	78 2f       	mov	r23, r24
 7da:	88 27       	eor	r24, r24
 7dc:	b8 5f       	subi	r27, 0xF8	; 248
 7de:	39 f0       	breq	.+14     	; 0x7ee <__fixunssfsi+0x46>
 7e0:	b9 3f       	cpi	r27, 0xF9	; 249
 7e2:	cc f3       	brlt	.-14     	; 0x7d6 <__fixunssfsi+0x2e>
 7e4:	86 95       	lsr	r24
 7e6:	77 95       	ror	r23
 7e8:	67 95       	ror	r22
 7ea:	b3 95       	inc	r27
 7ec:	d9 f7       	brne	.-10     	; 0x7e4 <__fixunssfsi+0x3c>
 7ee:	3e f4       	brtc	.+14     	; 0x7fe <__fixunssfsi+0x56>
 7f0:	90 95       	com	r25
 7f2:	80 95       	com	r24
 7f4:	70 95       	com	r23
 7f6:	61 95       	neg	r22
 7f8:	7f 4f       	sbci	r23, 0xFF	; 255
 7fa:	8f 4f       	sbci	r24, 0xFF	; 255
 7fc:	9f 4f       	sbci	r25, 0xFF	; 255
 7fe:	08 95       	ret

00000800 <__fp_cmp>:
 800:	99 0f       	add	r25, r25
 802:	00 08       	sbc	r0, r0
 804:	55 0f       	add	r21, r21
 806:	aa 0b       	sbc	r26, r26
 808:	e0 e8       	ldi	r30, 0x80	; 128
 80a:	fe ef       	ldi	r31, 0xFE	; 254
 80c:	16 16       	cp	r1, r22
 80e:	17 06       	cpc	r1, r23
 810:	e8 07       	cpc	r30, r24
 812:	f9 07       	cpc	r31, r25
 814:	c0 f0       	brcs	.+48     	; 0x846 <__fp_cmp+0x46>
 816:	12 16       	cp	r1, r18
 818:	13 06       	cpc	r1, r19
 81a:	e4 07       	cpc	r30, r20
 81c:	f5 07       	cpc	r31, r21
 81e:	98 f0       	brcs	.+38     	; 0x846 <__fp_cmp+0x46>
 820:	62 1b       	sub	r22, r18
 822:	73 0b       	sbc	r23, r19
 824:	84 0b       	sbc	r24, r20
 826:	95 0b       	sbc	r25, r21
 828:	39 f4       	brne	.+14     	; 0x838 <__fp_cmp+0x38>
 82a:	0a 26       	eor	r0, r26
 82c:	61 f0       	breq	.+24     	; 0x846 <__fp_cmp+0x46>
 82e:	23 2b       	or	r18, r19
 830:	24 2b       	or	r18, r20
 832:	25 2b       	or	r18, r21
 834:	21 f4       	brne	.+8      	; 0x83e <__fp_cmp+0x3e>
 836:	08 95       	ret
 838:	0a 26       	eor	r0, r26
 83a:	09 f4       	brne	.+2      	; 0x83e <__fp_cmp+0x3e>
 83c:	a1 40       	sbci	r26, 0x01	; 1
 83e:	a6 95       	lsr	r26
 840:	8f ef       	ldi	r24, 0xFF	; 255
 842:	81 1d       	adc	r24, r1
 844:	81 1d       	adc	r24, r1
 846:	08 95       	ret

00000848 <__fp_inf>:
 848:	97 f9       	bld	r25, 7
 84a:	9f 67       	ori	r25, 0x7F	; 127
 84c:	80 e8       	ldi	r24, 0x80	; 128
 84e:	70 e0       	ldi	r23, 0x00	; 0
 850:	60 e0       	ldi	r22, 0x00	; 0
 852:	08 95       	ret

00000854 <__fp_nan>:
 854:	9f ef       	ldi	r25, 0xFF	; 255
 856:	80 ec       	ldi	r24, 0xC0	; 192
 858:	08 95       	ret

0000085a <__fp_pscA>:
 85a:	00 24       	eor	r0, r0
 85c:	0a 94       	dec	r0
 85e:	16 16       	cp	r1, r22
 860:	17 06       	cpc	r1, r23
 862:	18 06       	cpc	r1, r24
 864:	09 06       	cpc	r0, r25
 866:	08 95       	ret

00000868 <__fp_pscB>:
 868:	00 24       	eor	r0, r0
 86a:	0a 94       	dec	r0
 86c:	12 16       	cp	r1, r18
 86e:	13 06       	cpc	r1, r19
 870:	14 06       	cpc	r1, r20
 872:	05 06       	cpc	r0, r21
 874:	08 95       	ret

00000876 <__fp_round>:
 876:	09 2e       	mov	r0, r25
 878:	03 94       	inc	r0
 87a:	00 0c       	add	r0, r0
 87c:	11 f4       	brne	.+4      	; 0x882 <__fp_round+0xc>
 87e:	88 23       	and	r24, r24
 880:	52 f0       	brmi	.+20     	; 0x896 <__fp_round+0x20>
 882:	bb 0f       	add	r27, r27
 884:	40 f4       	brcc	.+16     	; 0x896 <__fp_round+0x20>
 886:	bf 2b       	or	r27, r31
 888:	11 f4       	brne	.+4      	; 0x88e <__fp_round+0x18>
 88a:	60 ff       	sbrs	r22, 0
 88c:	04 c0       	rjmp	.+8      	; 0x896 <__fp_round+0x20>
 88e:	6f 5f       	subi	r22, 0xFF	; 255
 890:	7f 4f       	sbci	r23, 0xFF	; 255
 892:	8f 4f       	sbci	r24, 0xFF	; 255
 894:	9f 4f       	sbci	r25, 0xFF	; 255
 896:	08 95       	ret

00000898 <__fp_split3>:
 898:	57 fd       	sbrc	r21, 7
 89a:	90 58       	subi	r25, 0x80	; 128
 89c:	44 0f       	add	r20, r20
 89e:	55 1f       	adc	r21, r21
 8a0:	59 f0       	breq	.+22     	; 0x8b8 <__fp_splitA+0x10>
 8a2:	5f 3f       	cpi	r21, 0xFF	; 255
 8a4:	71 f0       	breq	.+28     	; 0x8c2 <__fp_splitA+0x1a>
 8a6:	47 95       	ror	r20

000008a8 <__fp_splitA>:
 8a8:	88 0f       	add	r24, r24
 8aa:	97 fb       	bst	r25, 7
 8ac:	99 1f       	adc	r25, r25
 8ae:	61 f0       	breq	.+24     	; 0x8c8 <__fp_splitA+0x20>
 8b0:	9f 3f       	cpi	r25, 0xFF	; 255
 8b2:	79 f0       	breq	.+30     	; 0x8d2 <__fp_splitA+0x2a>
 8b4:	87 95       	ror	r24
 8b6:	08 95       	ret
 8b8:	12 16       	cp	r1, r18
 8ba:	13 06       	cpc	r1, r19
 8bc:	14 06       	cpc	r1, r20
 8be:	55 1f       	adc	r21, r21
 8c0:	f2 cf       	rjmp	.-28     	; 0x8a6 <__fp_split3+0xe>
 8c2:	46 95       	lsr	r20
 8c4:	f1 df       	rcall	.-30     	; 0x8a8 <__fp_splitA>
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <__fp_splitA+0x30>
 8c8:	16 16       	cp	r1, r22
 8ca:	17 06       	cpc	r1, r23
 8cc:	18 06       	cpc	r1, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	f1 cf       	rjmp	.-30     	; 0x8b4 <__fp_splitA+0xc>
 8d2:	86 95       	lsr	r24
 8d4:	71 05       	cpc	r23, r1
 8d6:	61 05       	cpc	r22, r1
 8d8:	08 94       	sec
 8da:	08 95       	ret

000008dc <__fp_zero>:
 8dc:	e8 94       	clt

000008de <__fp_szero>:
 8de:	bb 27       	eor	r27, r27
 8e0:	66 27       	eor	r22, r22
 8e2:	77 27       	eor	r23, r23
 8e4:	cb 01       	movw	r24, r22
 8e6:	97 f9       	bld	r25, 7
 8e8:	08 95       	ret

000008ea <__gesf2>:
 8ea:	8a df       	rcall	.-236    	; 0x800 <__fp_cmp>
 8ec:	08 f4       	brcc	.+2      	; 0x8f0 <__gesf2+0x6>
 8ee:	8f ef       	ldi	r24, 0xFF	; 255
 8f0:	08 95       	ret

000008f2 <__mulsf3>:
 8f2:	0b d0       	rcall	.+22     	; 0x90a <__mulsf3x>
 8f4:	c0 cf       	rjmp	.-128    	; 0x876 <__fp_round>
 8f6:	b1 df       	rcall	.-158    	; 0x85a <__fp_pscA>
 8f8:	28 f0       	brcs	.+10     	; 0x904 <__mulsf3+0x12>
 8fa:	b6 df       	rcall	.-148    	; 0x868 <__fp_pscB>
 8fc:	18 f0       	brcs	.+6      	; 0x904 <__mulsf3+0x12>
 8fe:	95 23       	and	r25, r21
 900:	09 f0       	breq	.+2      	; 0x904 <__mulsf3+0x12>
 902:	a2 cf       	rjmp	.-188    	; 0x848 <__fp_inf>
 904:	a7 cf       	rjmp	.-178    	; 0x854 <__fp_nan>
 906:	11 24       	eor	r1, r1
 908:	ea cf       	rjmp	.-44     	; 0x8de <__fp_szero>

0000090a <__mulsf3x>:
 90a:	c6 df       	rcall	.-116    	; 0x898 <__fp_split3>
 90c:	a0 f3       	brcs	.-24     	; 0x8f6 <__mulsf3+0x4>

0000090e <__mulsf3_pse>:
 90e:	95 9f       	mul	r25, r21
 910:	d1 f3       	breq	.-12     	; 0x906 <__mulsf3+0x14>
 912:	95 0f       	add	r25, r21
 914:	50 e0       	ldi	r21, 0x00	; 0
 916:	55 1f       	adc	r21, r21
 918:	62 9f       	mul	r22, r18
 91a:	f0 01       	movw	r30, r0
 91c:	72 9f       	mul	r23, r18
 91e:	bb 27       	eor	r27, r27
 920:	f0 0d       	add	r31, r0
 922:	b1 1d       	adc	r27, r1
 924:	63 9f       	mul	r22, r19
 926:	aa 27       	eor	r26, r26
 928:	f0 0d       	add	r31, r0
 92a:	b1 1d       	adc	r27, r1
 92c:	aa 1f       	adc	r26, r26
 92e:	64 9f       	mul	r22, r20
 930:	66 27       	eor	r22, r22
 932:	b0 0d       	add	r27, r0
 934:	a1 1d       	adc	r26, r1
 936:	66 1f       	adc	r22, r22
 938:	82 9f       	mul	r24, r18
 93a:	22 27       	eor	r18, r18
 93c:	b0 0d       	add	r27, r0
 93e:	a1 1d       	adc	r26, r1
 940:	62 1f       	adc	r22, r18
 942:	73 9f       	mul	r23, r19
 944:	b0 0d       	add	r27, r0
 946:	a1 1d       	adc	r26, r1
 948:	62 1f       	adc	r22, r18
 94a:	83 9f       	mul	r24, r19
 94c:	a0 0d       	add	r26, r0
 94e:	61 1d       	adc	r22, r1
 950:	22 1f       	adc	r18, r18
 952:	74 9f       	mul	r23, r20
 954:	33 27       	eor	r19, r19
 956:	a0 0d       	add	r26, r0
 958:	61 1d       	adc	r22, r1
 95a:	23 1f       	adc	r18, r19
 95c:	84 9f       	mul	r24, r20
 95e:	60 0d       	add	r22, r0
 960:	21 1d       	adc	r18, r1
 962:	82 2f       	mov	r24, r18
 964:	76 2f       	mov	r23, r22
 966:	6a 2f       	mov	r22, r26
 968:	11 24       	eor	r1, r1
 96a:	9f 57       	subi	r25, 0x7F	; 127
 96c:	50 40       	sbci	r21, 0x00	; 0
 96e:	8a f0       	brmi	.+34     	; 0x992 <__mulsf3_pse+0x84>
 970:	e1 f0       	breq	.+56     	; 0x9aa <__mulsf3_pse+0x9c>
 972:	88 23       	and	r24, r24
 974:	4a f0       	brmi	.+18     	; 0x988 <__mulsf3_pse+0x7a>
 976:	ee 0f       	add	r30, r30
 978:	ff 1f       	adc	r31, r31
 97a:	bb 1f       	adc	r27, r27
 97c:	66 1f       	adc	r22, r22
 97e:	77 1f       	adc	r23, r23
 980:	88 1f       	adc	r24, r24
 982:	91 50       	subi	r25, 0x01	; 1
 984:	50 40       	sbci	r21, 0x00	; 0
 986:	a9 f7       	brne	.-22     	; 0x972 <__mulsf3_pse+0x64>
 988:	9e 3f       	cpi	r25, 0xFE	; 254
 98a:	51 05       	cpc	r21, r1
 98c:	70 f0       	brcs	.+28     	; 0x9aa <__mulsf3_pse+0x9c>
 98e:	5c cf       	rjmp	.-328    	; 0x848 <__fp_inf>
 990:	a6 cf       	rjmp	.-180    	; 0x8de <__fp_szero>
 992:	5f 3f       	cpi	r21, 0xFF	; 255
 994:	ec f3       	brlt	.-6      	; 0x990 <__mulsf3_pse+0x82>
 996:	98 3e       	cpi	r25, 0xE8	; 232
 998:	dc f3       	brlt	.-10     	; 0x990 <__mulsf3_pse+0x82>
 99a:	86 95       	lsr	r24
 99c:	77 95       	ror	r23
 99e:	67 95       	ror	r22
 9a0:	b7 95       	ror	r27
 9a2:	f7 95       	ror	r31
 9a4:	e7 95       	ror	r30
 9a6:	9f 5f       	subi	r25, 0xFF	; 255
 9a8:	c1 f7       	brne	.-16     	; 0x99a <__mulsf3_pse+0x8c>
 9aa:	fe 2b       	or	r31, r30
 9ac:	88 0f       	add	r24, r24
 9ae:	91 1d       	adc	r25, r1
 9b0:	96 95       	lsr	r25
 9b2:	87 95       	ror	r24
 9b4:	97 f9       	bld	r25, 7
 9b6:	08 95       	ret

000009b8 <_exit>:
 9b8:	f8 94       	cli

000009ba <__stop_program>:
 9ba:	ff cf       	rjmp	.-2      	; 0x9ba <__stop_program>
