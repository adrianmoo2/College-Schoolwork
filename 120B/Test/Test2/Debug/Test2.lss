
Test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090c  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084d  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f2  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000409  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005b  00000000  00000000  00001af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	39 d0       	rcall	.+114    	; 0x11c <main>
  aa:	41 c0       	rjmp	.+130    	; 0x12e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Tick>:
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}

void Tick() {
	switch (state) {
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	99 f0       	breq	.+38     	; 0xdc <Tick+0x2e>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <Tick+0x14>
  b8:	88 23       	and	r24, r24
  ba:	41 f0       	breq	.+16     	; 0xcc <Tick+0x1e>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	51 f0       	breq	.+20     	; 0xd4 <Tick+0x26>
  c0:	1d c0       	rjmp	.+58     	; 0xfc <Tick+0x4e>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	99 f0       	breq	.+38     	; 0xec <Tick+0x3e>
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	a9 f0       	breq	.+42     	; 0xf4 <Tick+0x46>
  ca:	18 c0       	rjmp	.+48     	; 0xfc <Tick+0x4e>
		case Start:
			state = Init;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  d2:	1c c0       	rjmp	.+56     	; 0x10c <Tick+0x5e>
			break;
		case Init:
			state = WaitPush;
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  da:	08 95       	ret
		case WaitPush:
			state = GetBit(PINA, 0) ? Light2 : Light1;
  dc:	00 99       	sbic	0x00, 0	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <Tick+0x36>
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <Tick+0x38>
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  ea:	08 c0       	rjmp	.+16     	; 0xfc <Tick+0x4e>
		case Light1:
			state = WaitPush;
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  f2:	08 95       	ret
		case Light2:
			state = WaitPush;
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  fa:	08 95       	ret
		default:
			break;
	}
	
	switch (state) {
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	31 f0       	breq	.+12     	; 0x110 <Tick+0x62>
 104:	84 30       	cpi	r24, 0x04	; 4
 106:	39 f0       	breq	.+14     	; 0x116 <Tick+0x68>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	39 f4       	brne	.+14     	; 0x11a <Tick+0x6c>
		case Start:
			break;
		case Init:
			PORTB = 0x00;
 10c:	15 b8       	out	0x05, r1	; 5
			break;
 10e:	08 95       	ret
		case WaitPush:
			break;
		case Light1:
			PORTB = 0x15; 
 110:	85 e1       	ldi	r24, 0x15	; 21
 112:	85 b9       	out	0x05, r24	; 5
			break;
 114:	08 95       	ret
		case Light2:
			PORTB = 0x0A;
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	85 b9       	out	0x05, r24	; 5
 11a:	08 95       	ret

0000011c <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 11c:	11 b8       	out	0x01, r1	; 1
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 122:	84 b9       	out	0x04, r24	; 4
 124:	15 b8       	out	0x05, r1	; 5
	
	state = Start;
 126:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	
    while(1)
    {
		Tick();
 12a:	c1 df       	rcall	.-126    	; 0xae <Tick>
 12c:	fe cf       	rjmp	.-4      	; 0x12a <main+0xe>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
